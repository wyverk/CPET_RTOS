
excercise3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003160  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800336c  0800336c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003374  08003374  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004008  20000010  0800338c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004018  0800338c  00024018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea45  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002329  00000000  00000000  0002ea85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00030db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00031b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b7f  00000000  00000000  00032838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a394  00000000  00000000  000493b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009184f  00000000  00000000  0005374b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4f9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000e5018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080032e8 	.word	0x080032e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080032e8 	.word	0x080032e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb37 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f831 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f899 	bl	8000658 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of greenLED */
  osThreadDef(greenLED, StartGreenLED, osPriorityNormal, 0, 128);
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <main+0x60>)
 8000528:	f107 041c 	add.w	r4, r7, #28
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  greenLEDHandle = osThreadCreate(osThread(greenLED), NULL);
 800053a:	f107 031c 	add.w	r3, r7, #28
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fca0 	bl	8001e86 <osThreadCreate>
 8000546:	4602      	mov	r2, r0
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0x64>)
 800054a:	601a      	str	r2, [r3, #0]

  /* definition and creation of redLED */
  osThreadDef(redLED, StartRedLED, osPriorityNormal, 0, 128);
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0x68>)
 800054e:	463c      	mov	r4, r7
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  redLEDHandle = osThreadCreate(osThread(redLED), NULL);
 800055e:	463b      	mov	r3, r7
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fc8f 	bl	8001e86 <osThreadCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <main+0x6c>)
 800056c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f001 fc83 	bl	8001e78 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x5e>
 8000574:	0800330c 	.word	0x0800330c
 8000578:	20003fcc 	.word	0x20003fcc
 800057c:	08003330 	.word	0x08003330
 8000580:	20003fd0 	.word	0x20003fd0

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fea0 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005f8:	23c0      	movs	r3, #192	; 0xc0
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd7f 	bl	800110c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f9c8 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2103      	movs	r1, #3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ffd8 	bl	80015ec <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f9b1 	bl	80009a8 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	4ba1      	ldr	r3, [pc, #644]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4aa0      	ldr	r2, [pc, #640]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b9e      	ldr	r3, [pc, #632]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0310 	and.w	r3, r3, #16
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	4b9a      	ldr	r3, [pc, #616]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a99      	ldr	r2, [pc, #612]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b97      	ldr	r3, [pc, #604]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b93      	ldr	r3, [pc, #588]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a92      	ldr	r2, [pc, #584]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b90      	ldr	r3, [pc, #576]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b8c      	ldr	r3, [pc, #560]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a8b      	ldr	r2, [pc, #556]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b89      	ldr	r3, [pc, #548]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b85      	ldr	r3, [pc, #532]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a84      	ldr	r2, [pc, #528]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b82      	ldr	r3, [pc, #520]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b7e      	ldr	r3, [pc, #504]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a7d      	ldr	r2, [pc, #500]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b7b      	ldr	r3, [pc, #492]	; (80008f8 <MX_GPIO_Init+0x2a0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	4878      	ldr	r0, [pc, #480]	; (80008fc <MX_GPIO_Init+0x2a4>)
 800071c:	f000 fcdc 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	4876      	ldr	r0, [pc, #472]	; (8000900 <MX_GPIO_Init+0x2a8>)
 8000726:	f000 fcd7 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800072a:	2200      	movs	r2, #0
 800072c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000730:	4874      	ldr	r0, [pc, #464]	; (8000904 <MX_GPIO_Init+0x2ac>)
 8000732:	f000 fcd1 	bl	80010d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000736:	2304      	movs	r3, #4
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	486c      	ldr	r0, [pc, #432]	; (80008fc <MX_GPIO_Init+0x2a4>)
 800074a:	f000 fb43 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	4865      	ldr	r0, [pc, #404]	; (80008fc <MX_GPIO_Init+0x2a4>)
 8000766:	f000 fb35 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800076a:	2332      	movs	r3, #50	; 0x32
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800076e:	4b66      	ldr	r3, [pc, #408]	; (8000908 <MX_GPIO_Init+0x2b0>)
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	485f      	ldr	r0, [pc, #380]	; (80008fc <MX_GPIO_Init+0x2a4>)
 800077e:	f000 fb29 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4859      	ldr	r0, [pc, #356]	; (8000900 <MX_GPIO_Init+0x2a8>)
 800079a:	f000 fb1b 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800079e:	2308      	movs	r3, #8
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ae:	2305      	movs	r3, #5
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4851      	ldr	r0, [pc, #324]	; (8000900 <MX_GPIO_Init+0x2a8>)
 80007ba:	f000 fb0b 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007c2:	4b51      	ldr	r3, [pc, #324]	; (8000908 <MX_GPIO_Init+0x2b0>)
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	484e      	ldr	r0, [pc, #312]	; (800090c <MX_GPIO_Init+0x2b4>)
 80007d2:	f000 faff 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007d6:	2310      	movs	r3, #16
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007e6:	2306      	movs	r3, #6
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4846      	ldr	r0, [pc, #280]	; (800090c <MX_GPIO_Init+0x2b4>)
 80007f2:	f000 faef 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007f6:	23e0      	movs	r3, #224	; 0xe0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000806:	2305      	movs	r3, #5
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	483e      	ldr	r0, [pc, #248]	; (800090c <MX_GPIO_Init+0x2b4>)
 8000812:	f000 fadf 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000816:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000828:	2305      	movs	r3, #5
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4837      	ldr	r0, [pc, #220]	; (8000910 <MX_GPIO_Init+0x2b8>)
 8000834:	f000 face 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000838:	f24f 0310 	movw	r3, #61456	; 0xf010
 800083c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	482c      	ldr	r0, [pc, #176]	; (8000904 <MX_GPIO_Init+0x2ac>)
 8000852:	f000 fabf 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000856:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000868:	2306      	movs	r3, #6
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4823      	ldr	r0, [pc, #140]	; (8000900 <MX_GPIO_Init+0x2a8>)
 8000874:	f000 faae 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	481f      	ldr	r0, [pc, #124]	; (800090c <MX_GPIO_Init+0x2b4>)
 800088e:	f000 faa1 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000892:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008a4:	230a      	movs	r3, #10
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4817      	ldr	r0, [pc, #92]	; (800090c <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fa90 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <MX_GPIO_Init+0x2ac>)
 80008c8:	f000 fa84 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008cc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d2:	2312      	movs	r3, #18
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008de:	2304      	movs	r3, #4
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fa73 	bl	8000dd4 <HAL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40021000 	.word	0x40021000
 8000900:	40020800 	.word	0x40020800
 8000904:	40020c00 	.word	0x40020c00
 8000908:	10120000 	.word	0x10120000
 800090c:	40020000 	.word	0x40020000
 8000910:	40020400 	.word	0x40020400

08000914 <StartGreenLED>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartGreenLED */
void StartGreenLED(void const * argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <StartGreenLED+0x34>)
 8000924:	f000 fbd8 	bl	80010d8 <HAL_GPIO_WritePin>
    osDelay(2000);
 8000928:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800092c:	f001 faf7 	bl	8001f1e <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <StartGreenLED+0x34>)
 8000938:	f000 fbce 	bl	80010d8 <HAL_GPIO_WritePin>
    osDelay(1500);
 800093c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000940:	f001 faed 	bl	8001f1e <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000944:	e7ea      	b.n	800091c <StartGreenLED+0x8>
 8000946:	bf00      	nop
 8000948:	40020c00 	.word	0x40020c00

0800094c <StartRedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLED */
void StartRedLED(void const * argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedLED */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <StartRedLED+0x34>)
 800095c:	f000 fbbc 	bl	80010d8 <HAL_GPIO_WritePin>
	 osDelay(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f001 fadb 	bl	8001f1e <osDelay>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096e:	4804      	ldr	r0, [pc, #16]	; (8000980 <StartRedLED+0x34>)
 8000970:	f000 fbb2 	bl	80010d8 <HAL_GPIO_WritePin>
	 osDelay(1000);
 8000974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000978:	f001 fad1 	bl	8001f1e <osDelay>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800097c:	e7ea      	b.n	8000954 <StartRedLED+0x8>
 800097e:	bf00      	nop
 8000980:	40020c00 	.word	0x40020c00

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f91b 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010000 	.word	0x40010000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 f9bf 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2019      	movs	r0, #25
 8000a26:	f000 f9ab 	bl	8000d80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000a2a:	2019      	movs	r0, #25
 8000a2c:	f000 f9c4 	bl	8000db8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4c:	f107 0210 	add.w	r2, r7, #16
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 ffa6 	bl	80019a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a5c:	f000 ff90 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 8000a60:	4603      	mov	r3, r0
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_InitTick+0xa8>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_InitTick+0xac>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_InitTick+0xb0>)
 8000a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_InitTick+0xac>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_InitTick+0xac>)
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_InitTick+0xac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_InitTick+0xac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_InitTick+0xac>)
 8000a96:	f000 ffb9 	bl	8001a0c <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <HAL_InitTick+0xac>)
 8000aa2:	f000 ffe8 	bl	8001a76 <HAL_TIM_Base_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20003fd4 	.word	0x20003fd4
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000afe:	f000 ffde 	bl	8001abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20003fd4 	.word	0x20003fd4

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <SystemInit+0x28>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <SystemInit+0x28>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SystemInit+0x28>)
 8000b22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b26:	609a      	str	r2, [r3, #8]
#endif
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b3e:	e003      	b.n	8000b48 <LoopCopyDataInit>

08000b40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b46:	3104      	adds	r1, #4

08000b48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b50:	d3f6      	bcc.n	8000b40 <CopyDataInit>
  ldr  r2, =_sbss
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b54:	e002      	b.n	8000b5c <LoopFillZerobss>

08000b56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b58:	f842 3b04 	str.w	r3, [r2], #4

08000b5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b60:	d3f9      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b62:	f7ff ffd3 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 fb93 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fcd3 	bl	8000514 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b74:	0800337c 	.word	0x0800337c
  ldr  r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b7c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b80:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b84:	20004018 	.word	0x20004018

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff28 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fefa 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20004014 	.word	0x20004014

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20004014 	.word	0x20004014

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e159      	b.n	80010a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8148 	bne.w	800109e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d00b      	beq.n	8000e2e <HAL_GPIO_Init+0x5a>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d007      	beq.n	8000e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	2b11      	cmp	r3, #17
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d130      	bne.n	8000e90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0xfc>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b12      	cmp	r3, #18
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80a2 	beq.w	800109e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <HAL_GPIO_Init+0x2e4>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a55      	ldr	r2, [pc, #340]	; (80010b8 <HAL_GPIO_Init+0x2e4>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_GPIO_Init+0x2e4>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x2e8>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x2ec>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x202>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x1fe>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a46      	ldr	r2, [pc, #280]	; (80010c8 <HAL_GPIO_Init+0x2f4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x1fa>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a45      	ldr	r2, [pc, #276]	; (80010cc <HAL_GPIO_Init+0x2f8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x1f6>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a44      	ldr	r2, [pc, #272]	; (80010d0 <HAL_GPIO_Init+0x2fc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x1f2>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e008      	b.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x204>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f002 0203 	and.w	r2, r2, #3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe8:	4934      	ldr	r1, [pc, #208]	; (80010bc <HAL_GPIO_Init+0x2e8>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff6:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800101a:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <HAL_GPIO_Init+0x300>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001044:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <HAL_GPIO_Init+0x300>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_GPIO_Init+0x300>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	f67f aea2 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	3724      	adds	r7, #36	; 0x24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e25b      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d075      	beq.n	8001216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112a:	4ba3      	ldr	r3, [pc, #652]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b04      	cmp	r3, #4
 8001134:	d00c      	beq.n	8001150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4ba0      	ldr	r3, [pc, #640]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	2b08      	cmp	r3, #8
 8001140:	d112      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b9d      	ldr	r3, [pc, #628]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800114e:	d10b      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	4b99      	ldr	r3, [pc, #612]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d05b      	beq.n	8001214 <HAL_RCC_OscConfig+0x108>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d157      	bne.n	8001214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e236      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x74>
 8001172:	4b91      	ldr	r3, [pc, #580]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a90      	ldr	r2, [pc, #576]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e01d      	b.n	80011bc <HAL_RCC_OscConfig+0xb0>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a8a      	ldr	r2, [pc, #552]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a87      	ldr	r2, [pc, #540]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xb0>
 80011a4:	4b84      	ldr	r3, [pc, #528]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a83      	ldr	r2, [pc, #524]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a80      	ldr	r2, [pc, #512]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fd18 	bl	8000bf8 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fd14 	bl	8000bf8 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e1fb      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0xc0>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fd04 	bl	8000bf8 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fd00 	bl	8000bf8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1e7      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	4b6c      	ldr	r3, [pc, #432]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0xe8>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d063      	beq.n	80012ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001222:	4b65      	ldr	r3, [pc, #404]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d11c      	bne.n	8001274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b5f      	ldr	r3, [pc, #380]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d116      	bne.n	8001274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x152>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e1bb      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	4b56      	ldr	r3, [pc, #344]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4952      	ldr	r1, [pc, #328]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	e03a      	b.n	80012ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d020      	beq.n	80012be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <HAL_RCC_OscConfig+0x2b0>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fcb9 	bl	8000bf8 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fcb5 	bl	8000bf8 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e19c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4940      	ldr	r1, [pc, #256]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x2b0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc98 	bl	8000bf8 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc94 	bl	8000bf8 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e17b      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d030      	beq.n	8001358 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d016      	beq.n	800132c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_RCC_OscConfig+0x2b4>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fc78 	bl	8000bf8 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fc74 	bl	8000bf8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e15b      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x200>
 800132a:	e015      	b.n	8001358 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_RCC_OscConfig+0x2b4>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fc61 	bl	8000bf8 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133a:	f7ff fc5d 	bl	8000bf8 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e144      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a0 	beq.w	80014a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d121      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_RCC_OscConfig+0x2b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_RCC_OscConfig+0x2b8>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fc23 	bl	8000bf8 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e011      	b.n	80013da <HAL_RCC_OscConfig+0x2ce>
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	42470000 	.word	0x42470000
 80013c0:	42470e80 	.word	0x42470e80
 80013c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c8:	f7ff fc16 	bl	8000bf8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0fd      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d106      	bne.n	80013fc <HAL_RCC_OscConfig+0x2f0>
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a7c      	ldr	r2, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e01c      	b.n	8001436 <HAL_RCC_OscConfig+0x32a>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x312>
 8001404:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a76      	ldr	r2, [pc, #472]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x32a>
 800141e:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	4a70      	ldr	r2, [pc, #448]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6713      	str	r3, [r2, #112]	; 0x70
 800142a:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001430:	f023 0304 	bic.w	r3, r3, #4
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff fbdb 	bl	8000bf8 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fbd7 	bl	8000bf8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0bc      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ee      	beq.n	8001446 <HAL_RCC_OscConfig+0x33a>
 8001468:	e014      	b.n	8001494 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fbc5 	bl	8000bf8 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fbc1 	bl	8000bf8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e0a6      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149a:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8092 	beq.w	80015d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d05c      	beq.n	8001576 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d141      	bne.n	8001548 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <HAL_RCC_OscConfig+0x4dc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fb95 	bl	8000bf8 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d2:	f7ff fb91 	bl	8000bf8 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e078      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e4:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69da      	ldr	r2, [r3, #28]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	019b      	lsls	r3, r3, #6
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	3b01      	subs	r3, #1
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	061b      	lsls	r3, r3, #24
 8001514:	4933      	ldr	r1, [pc, #204]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x4dc>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fb6a 	bl	8000bf8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fb66 	bl	8000bf8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04d      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x41c>
 8001546:	e045      	b.n	80015d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x4dc>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fb53 	bl	8000bf8 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fb4f 	bl	8000bf8 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e036      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x44a>
 8001574:	e02e      	b.n	80015d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e029      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_RCC_OscConfig+0x4d8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	429a      	cmp	r2, r3
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d115      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015aa:	4013      	ands	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40007000 	.word	0x40007000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470060 	.word	0x42470060

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa8c 	bl	8000bf8 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa88 	bl	8000bf8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4601      	mov	r1, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	fa21 f303 	lsr.w	r3, r1, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f93c 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	08003354 	.word	0x08003354
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d007      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x32>
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d008      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x38>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 80b4 	bne.w	800194c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017e6:	60bb      	str	r3, [r7, #8]
       break;
 80017e8:	e0b3      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80017ec:	60bb      	str	r3, [r7, #8]
      break;
 80017ee:	e0b0      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4b5a      	ldr	r3, [pc, #360]	; (800195c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04a      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4b55      	ldr	r3, [pc, #340]	; (800195c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	ea03 0501 	and.w	r5, r3, r1
 800181c:	ea04 0602 	and.w	r6, r4, r2
 8001820:	4629      	mov	r1, r5
 8001822:	4632      	mov	r2, r6
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	0154      	lsls	r4, r2, #5
 800182e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001832:	014b      	lsls	r3, r1, #5
 8001834:	4619      	mov	r1, r3
 8001836:	4622      	mov	r2, r4
 8001838:	1b49      	subs	r1, r1, r5
 800183a:	eb62 0206 	sbc.w	r2, r2, r6
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	0194      	lsls	r4, r2, #6
 8001848:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	1a5b      	subs	r3, r3, r1
 8001850:	eb64 0402 	sbc.w	r4, r4, r2
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	00e2      	lsls	r2, r4, #3
 800185e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001862:	00d9      	lsls	r1, r3, #3
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	195b      	adds	r3, r3, r5
 800186a:	eb44 0406 	adc.w	r4, r4, r6
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	0262      	lsls	r2, r4, #9
 8001878:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800187c:	0259      	lsls	r1, r3, #9
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f04f 0400 	mov.w	r4, #0
 800188c:	461a      	mov	r2, r3
 800188e:	4623      	mov	r3, r4
 8001890:	f7fe fca6 	bl	80001e0 <__aeabi_uldivmod>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e049      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	ea03 0501 	and.w	r5, r3, r1
 80018b2:	ea04 0602 	and.w	r6, r4, r2
 80018b6:	4629      	mov	r1, r5
 80018b8:	4632      	mov	r2, r6
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	0154      	lsls	r4, r2, #5
 80018c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018c8:	014b      	lsls	r3, r1, #5
 80018ca:	4619      	mov	r1, r3
 80018cc:	4622      	mov	r2, r4
 80018ce:	1b49      	subs	r1, r1, r5
 80018d0:	eb62 0206 	sbc.w	r2, r2, r6
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	0194      	lsls	r4, r2, #6
 80018de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e2:	018b      	lsls	r3, r1, #6
 80018e4:	1a5b      	subs	r3, r3, r1
 80018e6:	eb64 0402 	sbc.w	r4, r4, r2
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	00e2      	lsls	r2, r4, #3
 80018f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018f8:	00d9      	lsls	r1, r3, #3
 80018fa:	460b      	mov	r3, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	195b      	adds	r3, r3, r5
 8001900:	eb44 0406 	adc.w	r4, r4, r6
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	02a2      	lsls	r2, r4, #10
 800190e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001912:	0299      	lsls	r1, r3, #10
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	461a      	mov	r2, r3
 8001924:	4623      	mov	r3, r4
 8001926:	f7fe fc5b 	bl	80001e0 <__aeabi_uldivmod>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	60bb      	str	r3, [r7, #8]
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800194e:	60bb      	str	r3, [r7, #8]
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	68bb      	ldr	r3, [r7, #8]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_RCC_GetHCLKFreq+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff fff0 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 8001988:	4601      	mov	r1, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0b5b      	lsrs	r3, r3, #13
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08003364 	.word	0x08003364

080019a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	220f      	movs	r2, #15
 80019b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	08db      	lsrs	r3, r3, #3
 80019e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_RCC_GetClockConfig+0x60>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 020f 	and.w	r2, r3, #15
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e01d      	b.n	8001a5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f815 	bl	8001a62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f000 f968 	bl	8001d20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d007      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d122      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d11b      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0202 	mvn.w	r2, #2
 8001aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8ee 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001b06:	e005      	b.n	8001b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8e0 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8f1 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d122      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d11b      	bne.n	8001b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0204 	mvn.w	r2, #4
 8001b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8c4 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001b5a:	e005      	b.n	8001b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8b6 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8c7 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d122      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11b      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f06f 0208 	mvn.w	r2, #8
 8001b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f89a 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001bae:	e005      	b.n	8001bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f88c 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f89d 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d122      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d11b      	bne.n	8001c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0210 	mvn.w	r2, #16
 8001be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2208      	movs	r2, #8
 8001bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f870 	bl	8001ce2 <HAL_TIM_IC_CaptureCallback>
 8001c02:	e005      	b.n	8001c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f862 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f873 	bl	8001cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10e      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0201 	mvn.w	r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7fe fea1 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d10e      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b80      	cmp	r3, #128	; 0x80
 8001c5c:	d107      	bne.n	8001c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8e3 	bl	8001e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b40      	cmp	r3, #64	; 0x40
 8001c7a:	d10e      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d107      	bne.n	8001c9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f838 	bl	8001d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d107      	bne.n	8001cc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0220 	mvn.w	r2, #32
 8001cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f8ad 	bl	8001e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a34      	ldr	r2, [pc, #208]	; (8001e04 <TIM_Base_SetConfig+0xe4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00f      	beq.n	8001d58 <TIM_Base_SetConfig+0x38>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3e:	d00b      	beq.n	8001d58 <TIM_Base_SetConfig+0x38>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <TIM_Base_SetConfig+0xe8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <TIM_Base_SetConfig+0x38>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <TIM_Base_SetConfig+0xec>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_Base_SetConfig+0x38>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <TIM_Base_SetConfig+0xf0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d108      	bne.n	8001d6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <TIM_Base_SetConfig+0xe4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01b      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d017      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <TIM_Base_SetConfig+0xe8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <TIM_Base_SetConfig+0xec>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00f      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <TIM_Base_SetConfig+0xf0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00b      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <TIM_Base_SetConfig+0xf4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <TIM_Base_SetConfig+0xf8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <TIM_Base_SetConfig+0x8a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <TIM_Base_SetConfig+0xfc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d108      	bne.n	8001dbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <TIM_Base_SetConfig+0xe4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	615a      	str	r2, [r3, #20]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40000800 	.word	0x40000800
 8001e10:	40000c00 	.word	0x40000c00
 8001e14:	40014000 	.word	0x40014000
 8001e18:	40014400 	.word	0x40014400
 8001e1c:	40014800 	.word	0x40014800

08001e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	2b84      	cmp	r3, #132	; 0x84
 8001e5c:	d005      	beq.n	8001e6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	3303      	adds	r3, #3
 8001e68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e7c:	f000 fad2 	bl	8002424 <vTaskStartScheduler>
  
  return osOK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e88:	b089      	sub	sp, #36	; 0x24
 8001e8a:	af04      	add	r7, sp, #16
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <osThreadCreate+0x54>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685c      	ldr	r4, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681d      	ldr	r5, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691e      	ldr	r6, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ffc8 	bl	8001e48 <makeFreeRtosPriority>
 8001eb8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ec2:	9202      	str	r2, [sp, #8]
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	9100      	str	r1, [sp, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4632      	mov	r2, r6
 8001ecc:	4629      	mov	r1, r5
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 f8ed 	bl	80020ae <xTaskCreateStatic>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e01c      	b.n	8001f14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685c      	ldr	r4, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ee6:	b29e      	uxth	r6, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffaa 	bl	8001e48 <makeFreeRtosPriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4632      	mov	r2, r6
 8001f02:	4629      	mov	r1, r5
 8001f04:	4620      	mov	r0, r4
 8001f06:	f000 f92b 	bl	8002160 <xTaskCreate>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <osDelay+0x16>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	e000      	b.n	8001f36 <osDelay+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fa40 	bl	80023bc <vTaskDelay>
  
  return osOK;
 8001f3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f103 0208 	add.w	r2, r3, #8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f103 0208 	add.w	r2, r3, #8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f103 0208 	add.w	r2, r3, #8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d103      	bne.n	8002008 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e00c      	b.n	8002022 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3308      	adds	r3, #8
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e002      	b.n	8002016 <vListInsert+0x2e>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	d2f6      	bcs.n	8002010 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6892      	ldr	r2, [r2, #8]
 8002070:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6852      	ldr	r2, [r2, #4]
 800207a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d103      	bne.n	800208e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08e      	sub	sp, #56	; 0x38
 80020b2:	af04      	add	r7, sp, #16
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	e7fe      	b.n	80020d4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <xTaskCreateStatic+0x42>
 80020dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e7fe      	b.n	80020ee <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80020f0:	2354      	movs	r3, #84	; 0x54
 80020f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b54      	cmp	r3, #84	; 0x54
 80020f8:	d009      	beq.n	800210e <xTaskCreateStatic+0x60>
 80020fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e7fe      	b.n	800210c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01e      	beq.n	8002152 <xTaskCreateStatic+0xa4>
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01b      	beq.n	8002152 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002122:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800212c:	2300      	movs	r3, #0
 800212e:	9303      	str	r3, [sp, #12]
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f850 	bl	80021ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800214a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800214c:	f000 f8cc 	bl	80022e8 <prvAddNewTaskToReadyList>
 8002150:	e001      	b.n	8002156 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002156:	697b      	ldr	r3, [r7, #20]
	}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af04      	add	r7, sp, #16
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f000 feb5 	bl	8002ee4 <pvPortMalloc>
 800217a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00e      	beq.n	80021a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002182:	2054      	movs	r0, #84	; 0x54
 8002184:	f000 feae 	bl	8002ee4 <pvPortMalloc>
 8002188:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
 8002196:	e005      	b.n	80021a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f000 ff65 	bl	8003068 <vPortFree>
 800219e:	e001      	b.n	80021a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d017      	beq.n	80021da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021b2:	88fa      	ldrh	r2, [r7, #6]
 80021b4:	2300      	movs	r3, #0
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f80e 	bl	80021ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021ce:	69f8      	ldr	r0, [r7, #28]
 80021d0:	f000 f88a 	bl	80022e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	e002      	b.n	80021e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80021e0:	69bb      	ldr	r3, [r7, #24]
	}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b088      	sub	sp, #32
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002202:	3b01      	subs	r3, #1
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	f023 0307 	bic.w	r3, r3, #7
 8002210:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <prvInitialiseNewTask+0x46>
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e7fe      	b.n	800222e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	e012      	b.n	800225c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	7819      	ldrb	r1, [r3, #0]
 800223e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	3334      	adds	r3, #52	; 0x34
 8002246:	460a      	mov	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	d9e9      	bls.n	8002236 <prvInitialiseNewTask+0x4c>
 8002262:	e000      	b.n	8002266 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002264:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	2b06      	cmp	r3, #6
 8002272:	d901      	bls.n	8002278 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002274:	2306      	movs	r3, #6
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2200      	movs	r2, #0
 8002288:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	3304      	adds	r3, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fe79 	bl	8001f86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	3318      	adds	r3, #24
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fe74 	bl	8001f86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	f1c3 0207 	rsb	r2, r3, #7
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	2200      	movs	r2, #0
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	69b8      	ldr	r0, [r7, #24]
 80022c8:	f000 fc08 	bl	8002adc <pxPortInitialiseStack>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022de:	bf00      	nop
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022f0:	f000 fd1c 	bl	8002d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <prvAddNewTaskToReadyList+0xb8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <prvAddNewTaskToReadyList+0xb8>)
 80022fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <prvAddNewTaskToReadyList+0xbc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002306:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <prvAddNewTaskToReadyList+0xbc>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <prvAddNewTaskToReadyList+0xb8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d110      	bne.n	8002336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002314:	f000 fabc 	bl	8002890 <prvInitialiseTaskLists>
 8002318:	e00d      	b.n	8002336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <prvAddNewTaskToReadyList+0xc0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <prvAddNewTaskToReadyList+0xbc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	429a      	cmp	r2, r3
 800232e:	d802      	bhi.n	8002336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <prvAddNewTaskToReadyList+0xbc>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <prvAddNewTaskToReadyList+0xc4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <prvAddNewTaskToReadyList+0xc4>)
 800233e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <prvAddNewTaskToReadyList+0xc8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <prvAddNewTaskToReadyList+0xc8>)
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <prvAddNewTaskToReadyList+0xcc>)
 8002360:	441a      	add	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fe19 	bl	8001fa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800236e:	f000 fd0b 	bl	8002d88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <prvAddNewTaskToReadyList+0xc0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <prvAddNewTaskToReadyList+0xbc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	429a      	cmp	r2, r3
 8002386:	d207      	bcs.n	8002398 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <prvAddNewTaskToReadyList+0xd0>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000380 	.word	0x20000380
 80023a4:	20000280 	.word	0x20000280
 80023a8:	2000038c 	.word	0x2000038c
 80023ac:	2000039c 	.word	0x2000039c
 80023b0:	20000388 	.word	0x20000388
 80023b4:	20000284 	.word	0x20000284
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <vTaskDelay+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <vTaskDelay+0x2e>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	e7fe      	b.n	80023e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80023ea:	f000 f879 	bl	80024e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023ee:	2100      	movs	r1, #0
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fb0d 	bl	8002a10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023f6:	f000 f881 	bl	80024fc <xTaskResumeAll>
 80023fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d107      	bne.n	8002412 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <vTaskDelay+0x64>)
 8002404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200003a8 	.word	0x200003a8
 8002420:	e000ed04 	.word	0xe000ed04

08002424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002432:	463a      	mov	r2, r7
 8002434:	1d39      	adds	r1, r7, #4
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f850 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	9202      	str	r2, [sp, #8]
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	460a      	mov	r2, r1
 8002452:	491d      	ldr	r1, [pc, #116]	; (80024c8 <vTaskStartScheduler+0xa4>)
 8002454:	481d      	ldr	r0, [pc, #116]	; (80024cc <vTaskStartScheduler+0xa8>)
 8002456:	f7ff fe2a 	bl	80020ae <xTaskCreateStatic>
 800245a:	4602      	mov	r2, r0
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <vTaskStartScheduler+0xac>)
 800245e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <vTaskStartScheduler+0xac>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002468:	2301      	movs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e001      	b.n	8002472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d115      	bne.n	80024a4 <vTaskStartScheduler+0x80>
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <vTaskStartScheduler+0xb0>)
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <vTaskStartScheduler+0xb4>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <vTaskStartScheduler+0xb8>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800249e:	f000 fba7 	bl	8002bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024a2:	e00d      	b.n	80024c0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d109      	bne.n	80024c0 <vTaskStartScheduler+0x9c>
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e7fe      	b.n	80024be <vTaskStartScheduler+0x9a>
}
 80024c0:	bf00      	nop
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	0800334c 	.word	0x0800334c
 80024cc:	08002861 	.word	0x08002861
 80024d0:	200003a4 	.word	0x200003a4
 80024d4:	200003a0 	.word	0x200003a0
 80024d8:	2000038c 	.word	0x2000038c
 80024dc:	20000384 	.word	0x20000384

080024e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <vTaskSuspendAll+0x18>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <vTaskSuspendAll+0x18>)
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	200003a8 	.word	0x200003a8

080024fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <xTaskResumeAll+0x114>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <xTaskResumeAll+0x2a>
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	e7fe      	b.n	8002524 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002526:	f000 fc01 	bl	8002d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <xTaskResumeAll+0x114>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	4a37      	ldr	r2, [pc, #220]	; (8002610 <xTaskResumeAll+0x114>)
 8002532:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002534:	4b36      	ldr	r3, [pc, #216]	; (8002610 <xTaskResumeAll+0x114>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d161      	bne.n	8002600 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <xTaskResumeAll+0x118>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d05d      	beq.n	8002600 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002544:	e02e      	b.n	80025a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <xTaskResumeAll+0x11c>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3318      	adds	r3, #24
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fd81 	bl	800205a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3304      	adds	r3, #4
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fd7c 	bl	800205a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	2201      	movs	r2, #1
 8002568:	409a      	lsls	r2, r3
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <xTaskResumeAll+0x120>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	4a2a      	ldr	r2, [pc, #168]	; (800261c <xTaskResumeAll+0x120>)
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <xTaskResumeAll+0x124>)
 8002582:	441a      	add	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3304      	adds	r3, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f7ff fd08 	bl	8001fa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <xTaskResumeAll+0x128>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <xTaskResumeAll+0x12c>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <xTaskResumeAll+0x11c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1cc      	bne.n	8002546 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025b2:	f000 fa07 	bl	80029c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <xTaskResumeAll+0x130>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025c2:	f000 f837 	bl	8002634 <xTaskIncrementTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <xTaskResumeAll+0x12c>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f1      	bne.n	80025c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <xTaskResumeAll+0x130>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <xTaskResumeAll+0x12c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <xTaskResumeAll+0x134>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002600:	f000 fbc2 	bl	8002d88 <vPortExitCritical>

	return xAlreadyYielded;
 8002604:	68bb      	ldr	r3, [r7, #8]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200003a8 	.word	0x200003a8
 8002614:	20000380 	.word	0x20000380
 8002618:	20000340 	.word	0x20000340
 800261c:	20000388 	.word	0x20000388
 8002620:	20000284 	.word	0x20000284
 8002624:	20000280 	.word	0x20000280
 8002628:	20000394 	.word	0x20000394
 800262c:	20000390 	.word	0x20000390
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263e:	4b50      	ldr	r3, [pc, #320]	; (8002780 <xTaskIncrementTick+0x14c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 808c 	bne.w	8002760 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002648:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <xTaskIncrementTick+0x150>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002650:	4a4c      	ldr	r2, [pc, #304]	; (8002784 <xTaskIncrementTick+0x150>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d11f      	bne.n	800269c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800265c:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <xTaskIncrementTick+0x154>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <xTaskIncrementTick+0x46>
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	e7fe      	b.n	8002678 <xTaskIncrementTick+0x44>
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <xTaskIncrementTick+0x154>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	4b42      	ldr	r3, [pc, #264]	; (800278c <xTaskIncrementTick+0x158>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a40      	ldr	r2, [pc, #256]	; (8002788 <xTaskIncrementTick+0x154>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <xTaskIncrementTick+0x158>)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b40      	ldr	r3, [pc, #256]	; (8002790 <xTaskIncrementTick+0x15c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <xTaskIncrementTick+0x15c>)
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	f000 f994 	bl	80029c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800269c:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <xTaskIncrementTick+0x160>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d34d      	bcc.n	8002742 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <xTaskIncrementTick+0x154>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <xTaskIncrementTick+0x80>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <xTaskIncrementTick+0x82>
 80026b4:	2300      	movs	r3, #0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <xTaskIncrementTick+0x160>)
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	601a      	str	r2, [r3, #0]
					break;
 80026c2:	e03e      	b.n	8002742 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <xTaskIncrementTick+0x154>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d203      	bcs.n	80026e4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026dc:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <xTaskIncrementTick+0x160>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
						break;
 80026e2:	e02e      	b.n	8002742 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fcb6 	bl	800205a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3318      	adds	r3, #24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fcad 	bl	800205a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <xTaskIncrementTick+0x164>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <xTaskIncrementTick+0x164>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <xTaskIncrementTick+0x168>)
 8002720:	441a      	add	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3304      	adds	r3, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7ff fc39 	bl	8001fa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <xTaskIncrementTick+0x16c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	429a      	cmp	r2, r3
 800273a:	d3b4      	bcc.n	80026a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800273c:	2301      	movs	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002740:	e7b1      	b.n	80026a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <xTaskIncrementTick+0x16c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	4914      	ldr	r1, [pc, #80]	; (800279c <xTaskIncrementTick+0x168>)
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d907      	bls.n	800276a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e004      	b.n	800276a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <xTaskIncrementTick+0x170>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <xTaskIncrementTick+0x170>)
 8002768:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <xTaskIncrementTick+0x174>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002772:	2301      	movs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002776:	697b      	ldr	r3, [r7, #20]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200003a8 	.word	0x200003a8
 8002784:	20000384 	.word	0x20000384
 8002788:	20000338 	.word	0x20000338
 800278c:	2000033c 	.word	0x2000033c
 8002790:	20000398 	.word	0x20000398
 8002794:	200003a0 	.word	0x200003a0
 8002798:	20000388 	.word	0x20000388
 800279c:	20000284 	.word	0x20000284
 80027a0:	20000280 	.word	0x20000280
 80027a4:	20000390 	.word	0x20000390
 80027a8:	20000394 	.word	0x20000394

080027ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <vTaskSwitchContext+0xa0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <vTaskSwitchContext+0xa4>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027c0:	e03e      	b.n	8002840 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <vTaskSwitchContext+0xa4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <vTaskSwitchContext+0xa8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027d6:	7afb      	ldrb	r3, [r7, #11]
 80027d8:	f1c3 031f 	rsb	r3, r3, #31
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	491e      	ldr	r1, [pc, #120]	; (8002858 <vTaskSwitchContext+0xac>)
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <vTaskSwitchContext+0x5a>
	__asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	e7fe      	b.n	8002804 <vTaskSwitchContext+0x58>
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4a11      	ldr	r2, [pc, #68]	; (8002858 <vTaskSwitchContext+0xac>)
 8002812:	4413      	add	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	3308      	adds	r3, #8
 8002828:	429a      	cmp	r2, r3
 800282a:	d104      	bne.n	8002836 <vTaskSwitchContext+0x8a>
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a07      	ldr	r2, [pc, #28]	; (800285c <vTaskSwitchContext+0xb0>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	200003a8 	.word	0x200003a8
 8002850:	20000394 	.word	0x20000394
 8002854:	20000388 	.word	0x20000388
 8002858:	20000284 	.word	0x20000284
 800285c:	20000280 	.word	0x20000280

08002860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002868:	f000 f852 	bl	8002910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <prvIdleTask+0x28>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d9f9      	bls.n	8002868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <prvIdleTask+0x2c>)
 8002876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002884:	e7f0      	b.n	8002868 <prvIdleTask+0x8>
 8002886:	bf00      	nop
 8002888:	20000284 	.word	0x20000284
 800288c:	e000ed04 	.word	0xe000ed04

08002890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	e00c      	b.n	80028b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <prvInitialiseTaskLists+0x60>)
 80028a8:	4413      	add	r3, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fb4b 	bl	8001f46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3301      	adds	r3, #1
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d9ef      	bls.n	800289c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80028bc:	480d      	ldr	r0, [pc, #52]	; (80028f4 <prvInitialiseTaskLists+0x64>)
 80028be:	f7ff fb42 	bl	8001f46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028c2:	480d      	ldr	r0, [pc, #52]	; (80028f8 <prvInitialiseTaskLists+0x68>)
 80028c4:	f7ff fb3f 	bl	8001f46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <prvInitialiseTaskLists+0x6c>)
 80028ca:	f7ff fb3c 	bl	8001f46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <prvInitialiseTaskLists+0x70>)
 80028d0:	f7ff fb39 	bl	8001f46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028d4:	480b      	ldr	r0, [pc, #44]	; (8002904 <prvInitialiseTaskLists+0x74>)
 80028d6:	f7ff fb36 	bl	8001f46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <prvInitialiseTaskLists+0x78>)
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <prvInitialiseTaskLists+0x64>)
 80028de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <prvInitialiseTaskLists+0x7c>)
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <prvInitialiseTaskLists+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000284 	.word	0x20000284
 80028f4:	20000310 	.word	0x20000310
 80028f8:	20000324 	.word	0x20000324
 80028fc:	20000340 	.word	0x20000340
 8002900:	20000354 	.word	0x20000354
 8002904:	2000036c 	.word	0x2000036c
 8002908:	20000338 	.word	0x20000338
 800290c:	2000033c 	.word	0x2000033c

08002910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002916:	e019      	b.n	800294c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002918:	f000 fa08 	bl	8002d2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <prvCheckTasksWaitingTermination+0x4c>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fb96 	bl	800205a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <prvCheckTasksWaitingTermination+0x50>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <prvCheckTasksWaitingTermination+0x50>)
 8002936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <prvCheckTasksWaitingTermination+0x54>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3b01      	subs	r3, #1
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <prvCheckTasksWaitingTermination+0x54>)
 8002940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002942:	f000 fa21 	bl	8002d88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f80e 	bl	8002968 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <prvCheckTasksWaitingTermination+0x54>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e1      	bne.n	8002918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000354 	.word	0x20000354
 8002960:	20000380 	.word	0x20000380
 8002964:	20000368 	.word	0x20000368

08002968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fb72 	bl	8003068 <vPortFree>
				vPortFree( pxTCB );
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fb6f 	bl	8003068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800298a:	e017      	b.n	80029bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002992:	2b01      	cmp	r3, #1
 8002994:	d103      	bne.n	800299e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb66 	bl	8003068 <vPortFree>
	}
 800299c:	e00e      	b.n	80029bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d009      	beq.n	80029bc <prvDeleteTCB+0x54>
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e7fe      	b.n	80029ba <prvDeleteTCB+0x52>
	}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <prvResetNextTaskUnblockTime+0x44>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <prvResetNextTaskUnblockTime+0x14>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <prvResetNextTaskUnblockTime+0x16>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <prvResetNextTaskUnblockTime+0x48>)
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029e6:	e008      	b.n	80029fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <prvResetNextTaskUnblockTime+0x44>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <prvResetNextTaskUnblockTime+0x48>)
 80029f8:	6013      	str	r3, [r2, #0]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000338 	.word	0x20000338
 8002a0c:	200003a0 	.word	0x200003a0

08002a10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3304      	adds	r3, #4
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fb17 	bl	800205a <uxListRemove>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4013      	ands	r3, r2
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d10a      	bne.n	8002a68 <prvAddCurrentTaskToDelayedList+0x58>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	481a      	ldr	r0, [pc, #104]	; (8002acc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a62:	f7ff fa9d 	bl	8001fa0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a66:	e026      	b.n	8002ab6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d209      	bcs.n	8002a94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f7ff faab 	bl	8001fe8 <vListInsert>
}
 8002a92:	e010      	b.n	8002ab6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7ff faa1 	bl	8001fe8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d202      	bcs.n	8002ab6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002ab0:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6013      	str	r3, [r2, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000384 	.word	0x20000384
 8002ac4:	20000280 	.word	0x20000280
 8002ac8:	20000388 	.word	0x20000388
 8002acc:	2000036c 	.word	0x2000036c
 8002ad0:	2000033c 	.word	0x2000033c
 8002ad4:	20000338 	.word	0x20000338
 8002ad8:	200003a0 	.word	0x200003a0

08002adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b04      	subs	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b04      	subs	r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <pxPortInitialiseStack+0x64>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3b14      	subs	r3, #20
 8002b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3b04      	subs	r3, #4
 8002b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f06f 0202 	mvn.w	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b20      	subs	r3, #32
 8002b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	08002b45 	.word	0x08002b45

08002b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <prvTaskExitError+0x50>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d009      	beq.n	8002b6c <prvTaskExitError+0x28>
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e7fe      	b.n	8002b6a <prvTaskExitError+0x26>
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b7e:	bf00      	nop
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0fc      	beq.n	8002b80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	2000000c 	.word	0x2000000c
	...

08002ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <pxCurrentTCBConst2>)
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	6808      	ldr	r0, [r1, #0]
 8002ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	f380 8809 	msr	PSP, r0
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f380 8811 	msr	BASEPRI, r0
 8002bba:	4770      	bx	lr
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst2>:
 8002bc0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <prvPortStartFirstTask+0x24>)
 8002bca:	6800      	ldr	r0, [r0, #0]
 8002bcc:	6800      	ldr	r0, [r0, #0]
 8002bce:	f380 8808 	msr	MSP, r0
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f380 8814 	msr	CONTROL, r0
 8002bda:	b662      	cpsie	i
 8002bdc:	b661      	cpsie	f
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	df00      	svc	0
 8002be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bea:	bf00      	nop
 8002bec:	e000ed08 	.word	0xe000ed08

08002bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bf6:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <xPortStartScheduler+0x118>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <xPortStartScheduler+0x11c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <xPortStartScheduler+0x24>
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	e7fe      	b.n	8002c12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <xPortStartScheduler+0x118>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3d      	ldr	r2, [pc, #244]	; (8002d10 <xPortStartScheduler+0x120>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d109      	bne.n	8002c32 <xPortStartScheduler+0x42>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e7fe      	b.n	8002c30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c32:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <xPortStartScheduler+0x124>)
 8002c34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <xPortStartScheduler+0x128>)
 8002c58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c60:	e009      	b.n	8002c76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002c62:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002c6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d0ef      	beq.n	8002c62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d009      	beq.n	8002ca2 <xPortStartScheduler+0xb2>
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	e7fe      	b.n	8002ca0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002caa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cb4:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <xPortStartScheduler+0x12c>)
 8002cb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <xPortStartScheduler+0x130>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <xPortStartScheduler+0x130>)
 8002cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <xPortStartScheduler+0x130>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <xPortStartScheduler+0x130>)
 8002cd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002cd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002cd8:	f000 f8d6 	bl	8002e88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <xPortStartScheduler+0x134>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ce2:	f000 f8f5 	bl	8002ed0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <xPortStartScheduler+0x138>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <xPortStartScheduler+0x138>)
 8002cec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002cf2:	f7ff ff69 	bl	8002bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002cf6:	f7ff fd59 	bl	80027ac <vTaskSwitchContext>
	prvTaskExitError();
 8002cfa:	f7ff ff23 	bl	8002b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	410fc271 	.word	0x410fc271
 8002d10:	410fc270 	.word	0x410fc270
 8002d14:	e000e400 	.word	0xe000e400
 8002d18:	200003ac 	.word	0x200003ac
 8002d1c:	200003b0 	.word	0x200003b0
 8002d20:	e000ed20 	.word	0xe000ed20
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	e000ef34 	.word	0xe000ef34

08002d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <vPortEnterCritical+0x54>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <vPortEnterCritical+0x54>)
 8002d4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <vPortEnterCritical+0x54>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10e      	bne.n	8002d74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <vPortEnterCritical+0x58>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <vPortEnterCritical+0x48>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	e7fe      	b.n	8002d72 <vPortEnterCritical+0x46>
	}
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	2000000c 	.word	0x2000000c
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <vPortExitCritical+0x4c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <vPortExitCritical+0x22>
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	e7fe      	b.n	8002da8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <vPortExitCritical+0x4c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <vPortExitCritical+0x4c>)
 8002db2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <vPortExitCritical+0x4c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <vPortExitCritical+0x3e>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000000c 	.word	0x2000000c
	...

08002de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f7ff fccc 	bl	80027ac <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e60:	f7ff fbe8 	bl	8002634 <xTaskIncrementTick>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <SysTick_Handler+0x3c>)
 8002e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	e000ed04 	.word	0xe000ed04

08002e88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <vPortSetupTimerInterrupt+0x34>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <vPortSetupTimerInterrupt+0x38>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <vPortSetupTimerInterrupt+0x3c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <vPortSetupTimerInterrupt+0x40>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <vPortSetupTimerInterrupt+0x44>)
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <vPortSetupTimerInterrupt+0x34>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010
 8002ec0:	e000e018 	.word	0xe000e018
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	10624dd3 	.word	0x10624dd3
 8002ecc:	e000e014 	.word	0xe000e014

08002ed0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ed0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ee0 <vPortEnableVFP+0x10>
 8002ed4:	6801      	ldr	r1, [r0, #0]
 8002ed6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002eda:	6001      	str	r1, [r0, #0]
 8002edc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ede:	bf00      	nop
 8002ee0:	e000ed88 	.word	0xe000ed88

08002ee4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ef0:	f7ff faf6 	bl	80024e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ef4:	4b57      	ldr	r3, [pc, #348]	; (8003054 <pvPortMalloc+0x170>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002efc:	f000 f90c 	bl	8003118 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f00:	4b55      	ldr	r3, [pc, #340]	; (8003058 <pvPortMalloc+0x174>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 808c 	bne.w	8003026 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01c      	beq.n	8002f4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002f14:	2208      	movs	r2, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d013      	beq.n	8002f4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f023 0307 	bic.w	r3, r3, #7
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <pvPortMalloc+0x6a>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e7fe      	b.n	8002f4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d068      	beq.n	8003026 <pvPortMalloc+0x142>
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <pvPortMalloc+0x178>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d863      	bhi.n	8003026 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f5e:	4b40      	ldr	r3, [pc, #256]	; (8003060 <pvPortMalloc+0x17c>)
 8002f60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <pvPortMalloc+0x17c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f68:	e004      	b.n	8002f74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d903      	bls.n	8002f86 <pvPortMalloc+0xa2>
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f1      	bne.n	8002f6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <pvPortMalloc+0x170>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d04a      	beq.n	8003026 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2208      	movs	r2, #8
 8002f96:	4413      	add	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	1ad2      	subs	r2, r2, r3
 8002faa:	2308      	movs	r3, #8
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d91e      	bls.n	8002ff0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <pvPortMalloc+0xf4>
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	e7fe      	b.n	8002fd6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad2      	subs	r2, r2, r3
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fea:	69b8      	ldr	r0, [r7, #24]
 8002fec:	f000 f8f6 	bl	80031dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <pvPortMalloc+0x178>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <pvPortMalloc+0x178>)
 8002ffc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <pvPortMalloc+0x178>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <pvPortMalloc+0x180>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d203      	bcs.n	8003012 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <pvPortMalloc+0x178>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a15      	ldr	r2, [pc, #84]	; (8003064 <pvPortMalloc+0x180>)
 8003010:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <pvPortMalloc+0x174>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	431a      	orrs	r2, r3
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003026:	f7ff fa69 	bl	80024fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <pvPortMalloc+0x164>
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e7fe      	b.n	8003046 <pvPortMalloc+0x162>
	return pvReturn;
 8003048:	69fb      	ldr	r3, [r7, #28]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20003fbc 	.word	0x20003fbc
 8003058:	20003fc8 	.word	0x20003fc8
 800305c:	20003fc0 	.word	0x20003fc0
 8003060:	20003fb4 	.word	0x20003fb4
 8003064:	20003fc4 	.word	0x20003fc4

08003068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d046      	beq.n	8003108 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800307a:	2308      	movs	r3, #8
 800307c:	425b      	negs	r3, r3
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4413      	add	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <vPortFree+0xa8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <vPortFree+0x42>
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e7fe      	b.n	80030a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <vPortFree+0x5e>
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	e7fe      	b.n	80030c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <vPortFree+0xa8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d019      	beq.n	8003108 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d115      	bne.n	8003108 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <vPortFree+0xa8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	401a      	ands	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030ec:	f7ff f9f8 	bl	80024e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <vPortFree+0xac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a06      	ldr	r2, [pc, #24]	; (8003114 <vPortFree+0xac>)
 80030fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030fe:	6938      	ldr	r0, [r7, #16]
 8003100:	f000 f86c 	bl	80031dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003104:	f7ff f9fa 	bl	80024fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003108:	bf00      	nop
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20003fc8 	.word	0x20003fc8
 8003114:	20003fc0 	.word	0x20003fc0

08003118 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800311e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003122:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <prvHeapInit+0xac>)
 8003126:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3307      	adds	r3, #7
 8003136:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0307 	bic.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <prvHeapInit+0xac>)
 8003148:	4413      	add	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <prvHeapInit+0xb0>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <prvHeapInit+0xb0>)
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003164:	2208      	movs	r2, #8
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0307 	bic.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a15      	ldr	r2, [pc, #84]	; (80031cc <prvHeapInit+0xb4>)
 8003178:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <prvHeapInit+0xb4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <prvHeapInit+0xb4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <prvHeapInit+0xb4>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <prvHeapInit+0xb8>)
 80031a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <prvHeapInit+0xbc>)
 80031ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <prvHeapInit+0xc0>)
 80031b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031b6:	601a      	str	r2, [r3, #0]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	200003b4 	.word	0x200003b4
 80031c8:	20003fb4 	.word	0x20003fb4
 80031cc:	20003fbc 	.word	0x20003fbc
 80031d0:	20003fc4 	.word	0x20003fc4
 80031d4:	20003fc0 	.word	0x20003fc0
 80031d8:	20003fc8 	.word	0x20003fc8

080031dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <prvInsertBlockIntoFreeList+0xac>)
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e002      	b.n	80031f0 <prvInsertBlockIntoFreeList+0x14>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d8f7      	bhi.n	80031ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4413      	add	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d108      	bne.n	800321e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	441a      	add	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	441a      	add	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d118      	bne.n	8003264 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <prvInsertBlockIntoFreeList+0xb0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d00d      	beq.n	800325a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e008      	b.n	800326c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <prvInsertBlockIntoFreeList+0xb0>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e003      	b.n	800326c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d002      	beq.n	800327a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20003fb4 	.word	0x20003fb4
 800328c:	20003fbc 	.word	0x20003fbc

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4e0d      	ldr	r6, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1ba4      	subs	r4, r4, r6
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2500      	movs	r5, #0
 800329c:	42a5      	cmp	r5, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4e0b      	ldr	r6, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f820 	bl	80032e8 <_init>
 80032a8:	1ba4      	subs	r4, r4, r6
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2500      	movs	r5, #0
 80032ae:	42a5      	cmp	r5, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032b8:	4798      	blx	r3
 80032ba:	3501      	adds	r5, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032c2:	4798      	blx	r3
 80032c4:	3501      	adds	r5, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003374 	.word	0x08003374
 80032cc:	08003374 	.word	0x08003374
 80032d0:	08003374 	.word	0x08003374
 80032d4:	08003378 	.word	0x08003378

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr
