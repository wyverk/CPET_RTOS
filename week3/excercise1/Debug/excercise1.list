
excercise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a358  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a57c  0800a57c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a584  0800a584  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047f4  20000094  0800a620  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004888  0800a620  00024888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258ba  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e54  00000000  00000000  0004597e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bf0  00000000  00000000  0004a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019e8  00000000  00000000  0004c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c0a3  00000000  00000000  0004ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018cd1  00000000  00000000  00069e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009de63  00000000  00000000  00082b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007694  00000000  00000000  00120a04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4e0 	.word	0x0800a4e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800a4e0 	.word	0x0800a4e0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200000b0 	.word	0x200000b0
 8000510:	20000104 	.word	0x20000104

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd05 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f823 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f967 	bl	80007f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000526:	f000 f8a3 	bl	8000670 <MX_I2C1_Init>
  MX_I2S2_Init();
 800052a:	f000 f8cf 	bl	80006cc <MX_I2S2_Init>
  MX_I2S3_Init();
 800052e:	f000 f8fb 	bl	8000728 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000532:	f000 f929 	bl	8000788 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <main+0x4c>)
 8000538:	1d3c      	adds	r4, r7, #4
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f007 f9c4 	bl	80078da <osThreadCreate>
 8000552:	4602      	mov	r2, r0
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <main+0x50>)
 8000556:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f007 f9b8 	bl	80078cc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x48>
 800055e:	bf00      	nop
 8000560:	0800a504 	.word	0x0800a504
 8000564:	20004064 	.word	0x20004064

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09a      	sub	sp, #104	; 0x68
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f009 feef 	bl	800a35a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <SystemClock_Config+0x100>)
 80005a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a6:	4a30      	ldr	r2, [pc, #192]	; (8000668 <SystemClock_Config+0x100>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ac:	6413      	str	r3, [r2, #64]	; 0x40
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <SystemClock_Config+0x100>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <SystemClock_Config+0x104>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a2a      	ldr	r2, [pc, #168]	; (800066c <SystemClock_Config+0x104>)
 80005c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0x104>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d6:	2301      	movs	r3, #1
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ee:	23c0      	movs	r3, #192	; 0xc0
 80005f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005f6:	2308      	movs	r3, #8
 80005f8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f9b2 	bl	8003968 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060a:	f000 fa09 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fc0c 	bl	8003e48 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000636:	f000 f9f3 	bl	8000a20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800063e:	23c8      	movs	r3, #200	; 0xc8
 8000640:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000642:	2305      	movs	r3, #5
 8000644:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fe1e 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800065a:	f000 f9e1 	bl	8000a20 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3768      	adds	r7, #104	; 0x68
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f002 fb83 	bl	8002db8 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f9b2 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20004068 	.word	0x20004068
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2S2_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2S2_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2S2_Init+0x50>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2S2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_I2S2_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2S2_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2S2_Init+0x50>)
 80006f2:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <MX_I2S2_Init+0x58>)
 80006f4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2S2_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2S2_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2S2_Init+0x50>)
 8000704:	2201      	movs	r2, #1
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2S2_Init+0x50>)
 800070a:	f002 fc8d 	bl	8003028 <HAL_I2S_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f984 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20004114 	.word	0x20004114
 8000720:	40003800 	.word	0x40003800
 8000724:	00017700 	.word	0x00017700

08000728 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_I2S3_Init+0x54>)
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <MX_I2S3_Init+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2S3_Init+0x54>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_I2S3_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_I2S3_Init+0x54>)
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <MX_I2S3_Init+0x5c>)
 8000752:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2S3_Init+0x54>)
 8000768:	f002 fc5e 	bl	8003028 <HAL_I2S_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000772:	f000 f955 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000415c 	.word	0x2000415c
 8000780:	40003c00 	.word	0x40003c00
 8000784:	00017700 	.word	0x00017700

08000788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_SPI1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_SPI1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI1_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI1_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_SPI1_Init+0x64>)
 80007da:	f003 fea7 	bl	800452c <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f91c 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200040bc 	.word	0x200040bc
 80007f0:	40013000 	.word	0x40013000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b60      	ldr	r3, [pc, #384]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a5f      	ldr	r2, [pc, #380]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b5d      	ldr	r3, [pc, #372]	; (8000990 <MX_GPIO_Init+0x19c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b59      	ldr	r3, [pc, #356]	; (8000990 <MX_GPIO_Init+0x19c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a58      	ldr	r2, [pc, #352]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b56      	ldr	r3, [pc, #344]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b52      	ldr	r3, [pc, #328]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a51      	ldr	r2, [pc, #324]	; (8000990 <MX_GPIO_Init+0x19c>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a4a      	ldr	r2, [pc, #296]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b48      	ldr	r3, [pc, #288]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b44      	ldr	r3, [pc, #272]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a43      	ldr	r2, [pc, #268]	; (8000990 <MX_GPIO_Init+0x19c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <MX_GPIO_Init+0x19c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <MX_GPIO_Init+0x19c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <MX_GPIO_Init+0x19c>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <MX_GPIO_Init+0x19c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4837      	ldr	r0, [pc, #220]	; (8000994 <MX_GPIO_Init+0x1a0>)
 80008b8:	f000 fdfe 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2101      	movs	r1, #1
 80008c0:	4835      	ldr	r0, [pc, #212]	; (8000998 <MX_GPIO_Init+0x1a4>)
 80008c2:	f000 fdf9 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008c6:	2200      	movs	r2, #0
 80008c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008cc:	4833      	ldr	r0, [pc, #204]	; (800099c <MX_GPIO_Init+0x1a8>)
 80008ce:	f000 fdf3 	bl	80014b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008d2:	2304      	movs	r3, #4
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	482b      	ldr	r0, [pc, #172]	; (8000994 <MX_GPIO_Init+0x1a0>)
 80008e6:	f000 fc65 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ea:	2308      	movs	r3, #8
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4824      	ldr	r0, [pc, #144]	; (8000994 <MX_GPIO_Init+0x1a0>)
 8000902:	f000 fc57 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000906:	2332      	movs	r3, #50	; 0x32
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_GPIO_Init+0x1ac>)
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	481e      	ldr	r0, [pc, #120]	; (8000994 <MX_GPIO_Init+0x1a0>)
 800091a:	f000 fc4b 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_GPIO_Init+0x1a4>)
 8000936:	f000 fc3d 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_GPIO_Init+0x1ac>)
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4815      	ldr	r0, [pc, #84]	; (80009a4 <MX_GPIO_Init+0x1b0>)
 800094e:	f000 fc31 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000952:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000956:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_GPIO_Init+0x1a8>)
 800096c:	f000 fc22 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_GPIO_Init+0x1a8>)
 8000984:	f000 fc16 	bl	80011b4 <HAL_GPIO_Init>

}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	; 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	10120000 	.word	0x10120000
 80009a4:	40020000 	.word	0x40020000

080009a8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009b0:	f009 f98c 	bl	8009ccc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <StartDefaultTask+0x4c>)
 80009bc:	f000 fd7c 	bl	80014b8 <HAL_GPIO_WritePin>
    for(int i=0; i < 1000000; ++i);
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e002      	b.n	80009cc <StartDefaultTask+0x24>
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <StartDefaultTask+0x50>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	ddf8      	ble.n	80009c6 <StartDefaultTask+0x1e>
    osDelay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f006 ffcb 	bl	8007972 <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <StartDefaultTask+0x4c>)
 80009e4:	f000 fd68 	bl	80014b8 <HAL_GPIO_WritePin>
    vTaskDelay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f008 f81a 	bl	8008a24 <vTaskDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009f0:	e7e0      	b.n	80009b4 <StartDefaultTask+0xc>
 80009f2:	bf00      	nop
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	000f423f 	.word	0x000f423f

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 faad 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010000 	.word	0x40010000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_MspInit+0x54>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <HAL_MspInit+0x54>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x54>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_MspInit+0x54>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_MspInit+0x54>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_MspInit+0x54>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210f      	movs	r1, #15
 8000a72:	f06f 0001 	mvn.w	r0, #1
 8000a76:	f000 fb73 	bl	8001160 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_I2C_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12c      	bne.n	8000b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000acc:	2312      	movs	r3, #18
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HAL_I2C_MspInit+0x8c>)
 8000ae4:	f000 fb66 	bl	80011b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_I2C_MspInit+0x88>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a59      	ldr	r2, [pc, #356]	; (8000c9c <HAL_I2S_MspInit+0x184>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d15b      	bne.n	8000bf2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
 8000b3e:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a57      	ldr	r2, [pc, #348]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	623b      	str	r3, [r7, #32]
 8000b54:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	4b51      	ldr	r3, [pc, #324]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a49      	ldr	r2, [pc, #292]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	483e      	ldr	r0, [pc, #248]	; (8000ca4 <HAL_I2S_MspInit+0x18c>)
 8000baa:	f000 fb03 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <HAL_I2S_MspInit+0x18c>)
 8000bca:	f000 faf3 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be0:	2305      	movs	r3, #5
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <HAL_I2S_MspInit+0x190>)
 8000bec:	f000 fae2 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf0:	e04f      	b.n	8000c92 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <HAL_I2S_MspInit+0x194>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d14a      	bne.n	8000c92 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_I2S_MspInit+0x188>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c50:	2310      	movs	r3, #16
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c60:	2306      	movs	r3, #6
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <HAL_I2S_MspInit+0x198>)
 8000c6c:	f000 faa2 	bl	80011b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c70:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c82:	2306      	movs	r3, #6
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_I2S_MspInit+0x18c>)
 8000c8e:	f000 fa91 	bl	80011b4 <HAL_GPIO_Init>
}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	; 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40003800 	.word	0x40003800
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40003c00 	.word	0x40003c00
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f000 fa43 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2019      	movs	r0, #25
 8000d5a:	f000 fa01 	bl	8001160 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000d5e:	2019      	movs	r0, #25
 8000d60:	f000 fa1a 	bl	8001198 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6453      	str	r3, [r2, #68]	; 0x44
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_InitTick+0xa0>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fa4e 	bl	800422c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d90:	f003 fa38 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8000d94:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_InitTick+0xa4>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	3b01      	subs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_InitTick+0xa8>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <HAL_InitTick+0xac>)
 8000da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_InitTick+0xa8>)
 8000dac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_InitTick+0xa8>)
 8000db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_InitTick+0xa8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_InitTick+0xa8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_InitTick+0xa8>)
 8000dc6:	f003 fc15 	bl	80045f4 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d104      	bne.n	8000dda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <HAL_InitTick+0xa8>)
 8000dd2:	f003 fc44 	bl	800465e <HAL_TIM_Base_Start_IT>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3730      	adds	r7, #48	; 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	431bde83 	.word	0x431bde83
 8000dec:	200041a4 	.word	0x200041a4
 8000df0:	40010000 	.word	0x40010000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e2e:	f003 fc3a 	bl	80046a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200041a4 	.word	0x200041a4

08000e3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <OTG_FS_IRQHandler+0x10>)
 8000e42:	f000 fdd7 	bl	80019f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200045c0 	.word	0x200045c0

08000e50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x50>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x16>
		heap_end = &end;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <_sbrk+0x50>)
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <_sbrk+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <_sbrk+0x50>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <_sbrk+0x50>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	466a      	mov	r2, sp
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d907      	bls.n	8000e8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e7a:	f009 fa29 	bl	800a2d0 <__errno>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	230c      	movs	r3, #12
 8000e82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	e006      	b.n	8000e98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <_sbrk+0x50>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <_sbrk+0x50>)
 8000e94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000304 	.word	0x20000304
 8000ea4:	20004888 	.word	0x20004888

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SystemInit+0x28>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <SystemInit+0x28>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SystemInit+0x28>)
 8000ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eda:	e003      	b.n	8000ee4 <LoopCopyDataInit>

08000edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ee2:	3104      	adds	r1, #4

08000ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eec:	d3f6      	bcc.n	8000edc <CopyDataInit>
  ldr  r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef0:	e002      	b.n	8000ef8 <LoopFillZerobss>

08000ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef4:	f842 3b04 	str.w	r3, [r2], #4

08000ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000efc:	d3f9      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd3 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f009 f9eb 	bl	800a2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fb05 	bl	8000514 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f10:	0800a58c 	.word	0x0800a58c
  ldr  r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f18:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000f1c:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000f20:	20004888 	.word	0x20004888

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f8fa 	bl	800114a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fef4 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fd68 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200041e4 	.word	0x200041e4

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200041e4 	.word	0x200041e4

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_Delay+0x40>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff4c 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001172:	f7ff ff61 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68b9      	ldr	r1, [r7, #8]
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff ffb1 	bl	80010e4 <NVIC_EncodePriority>
 8001182:	4602      	mov	r2, r0
 8001184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff80 	bl	8001090 <__NVIC_SetPriority>
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff54 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e159      	b.n	8001484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8148 	bne.w	800147e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d00b      	beq.n	800120e <HAL_GPIO_Init+0x5a>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001202:	2b11      	cmp	r3, #17
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b12      	cmp	r3, #18
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0xfc>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a2 	beq.w	800147e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x2e4>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_GPIO_Init+0x2e4>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_GPIO_Init+0x2e4>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x2e8>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_GPIO_Init+0x2ec>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x202>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <HAL_GPIO_Init+0x2f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x1fe>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a46      	ldr	r2, [pc, #280]	; (80014a8 <HAL_GPIO_Init+0x2f4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x1fa>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a45      	ldr	r2, [pc, #276]	; (80014ac <HAL_GPIO_Init+0x2f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x1f6>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a44      	ldr	r2, [pc, #272]	; (80014b0 <HAL_GPIO_Init+0x2fc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x1f2>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x204>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4934      	ldr	r1, [pc, #208]	; (800149c <HAL_GPIO_Init+0x2e8>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <HAL_GPIO_Init+0x300>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fa:	4a2e      	ldr	r2, [pc, #184]	; (80014b4 <HAL_GPIO_Init+0x300>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_GPIO_Init+0x300>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001424:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <HAL_GPIO_Init+0x300>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_GPIO_Init+0x300>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <HAL_GPIO_Init+0x300>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_GPIO_Init+0x300>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_GPIO_Init+0x300>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f aea2 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	3724      	adds	r7, #36	; 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ec:	b08f      	sub	sp, #60	; 0x3c
 80014ee:	af0a      	add	r7, sp, #40	; 0x28
 80014f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e054      	b.n	80015a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f008 fc2c 	bl	8009d74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 faea 	bl	8004b14 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	687e      	ldr	r6, [r7, #4]
 8001548:	466d      	mov	r5, sp
 800154a:	f106 0410 	add.w	r4, r6, #16
 800154e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155a:	e885 0003 	stmia.w	r5, {r0, r1}
 800155e:	1d33      	adds	r3, r6, #4
 8001560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f003 fa64 	bl	8004a30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fae1 	bl	8004b36 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	687e      	ldr	r6, [r7, #4]
 800157c:	466d      	mov	r5, sp
 800157e:	f106 0410 	add.w	r4, r6, #16
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001592:	1d33      	adds	r3, r6, #4
 8001594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f003 fbf4 	bl	8004d84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b089      	sub	sp, #36	; 0x24
 80015b2:	af04      	add	r7, sp, #16
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	4608      	mov	r0, r1
 80015b8:	4611      	mov	r1, r2
 80015ba:	461a      	mov	r2, r3
 80015bc:	4603      	mov	r3, r0
 80015be:	70fb      	strb	r3, [r7, #3]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70bb      	strb	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_HCD_HC_Init+0x28>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e07f      	b.n	80016d6 <HAL_HCD_HC_Init+0x128>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	333d      	adds	r3, #61	; 0x3d
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	3338      	adds	r3, #56	; 0x38
 8001602:	787a      	ldrb	r2, [r7, #1]
 8001604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	3340      	adds	r3, #64	; 0x40
 8001616:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001618:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	3339      	adds	r3, #57	; 0x39
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	440b      	add	r3, r1
 800163c:	333f      	adds	r3, #63	; 0x3f
 800163e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	78bb      	ldrb	r3, [r7, #2]
 8001648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	333a      	adds	r3, #58	; 0x3a
 800165c:	4602      	mov	r2, r0
 800165e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001660:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001664:	2b00      	cmp	r3, #0
 8001666:	da0a      	bge.n	800167e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	333b      	adds	r3, #59	; 0x3b
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e009      	b.n	8001692 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	333b      	adds	r3, #59	; 0x3b
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	333c      	adds	r3, #60	; 0x3c
 80016a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016a6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	787c      	ldrb	r4, [r7, #1]
 80016ae:	78ba      	ldrb	r2, [r7, #2]
 80016b0:	78f9      	ldrb	r1, [r7, #3]
 80016b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4623      	mov	r3, r4
 80016c4:	f003 fce0 	bl	8005088 <USB_HC_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}

080016de <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_HCD_HC_Halt+0x1e>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e00f      	b.n	800171c <HAL_HCD_HC_Halt+0x3e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f003 ff1a 	bl	8005546 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	70fb      	strb	r3, [r7, #3]
 8001736:	460b      	mov	r3, r1
 8001738:	70bb      	strb	r3, [r7, #2]
 800173a:	4613      	mov	r3, r2
 800173c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	333b      	adds	r3, #59	; 0x3b
 800174e:	78ba      	ldrb	r2, [r7, #2]
 8001750:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	333f      	adds	r3, #63	; 0x3f
 8001762:	787a      	ldrb	r2, [r7, #1]
 8001764:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001766:	7c3b      	ldrb	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3342      	adds	r3, #66	; 0x42
 800177c:	2203      	movs	r2, #3
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e009      	b.n	8001796 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001796:	787b      	ldrb	r3, [r7, #1]
 8001798:	2b03      	cmp	r3, #3
 800179a:	f200 80d6 	bhi.w	800194a <HAL_HCD_HC_SubmitRequest+0x226>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	08001935 	.word	0x08001935
 80017ac:	08001821 	.word	0x08001821
 80017b0:	080018ab 	.word	0x080018ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017b4:	7c3b      	ldrb	r3, [r7, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 80c9 	bne.w	800194e <HAL_HCD_HC_SubmitRequest+0x22a>
 80017bc:	78bb      	ldrb	r3, [r7, #2]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80c5 	bne.w	800194e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80017c4:	8b3b      	ldrh	r3, [r7, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3351      	adds	r3, #81	; 0x51
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3351      	adds	r3, #81	; 0x51
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3342      	adds	r3, #66	; 0x42
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001808:	e0a1      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2202      	movs	r2, #2
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e096      	b.n	800194e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d120      	bne.n	8001868 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3351      	adds	r3, #81	; 0x51
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10a      	bne.n	8001852 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3342      	adds	r3, #66	; 0x42
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001850:	e07e      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3342      	adds	r3, #66	; 0x42
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
      break;
 8001866:	e073      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3350      	adds	r3, #80	; 0x50
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
      break;
 8001892:	e05d      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	2202      	movs	r2, #2
 80018a6:	701a      	strb	r2, [r3, #0]
      break;
 80018a8:	e052      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018aa:	78bb      	ldrb	r3, [r7, #2]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d120      	bne.n	80018f2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	3351      	adds	r3, #81	; 0x51
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	3342      	adds	r3, #66	; 0x42
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018da:	e039      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3342      	adds	r3, #66	; 0x42
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
      break;
 80018f0:	e02e      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3350      	adds	r3, #80	; 0x50
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10a      	bne.n	800191e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3342      	adds	r3, #66	; 0x42
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
      break;
 800191c:	e018      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e00d      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
      break;
 8001948:	e002      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800194a:	bf00      	nop
 800194c:	e000      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800194e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3344      	adds	r3, #68	; 0x44
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	8b39      	ldrh	r1, [r7, #24]
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4403      	add	r3, r0
 8001974:	3348      	adds	r3, #72	; 0x48
 8001976:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	335c      	adds	r3, #92	; 0x5c
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	334c      	adds	r3, #76	; 0x4c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3339      	adds	r3, #57	; 0x39
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	335d      	adds	r3, #93	; 0x5d
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	3338      	adds	r3, #56	; 0x38
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	18d1      	adds	r1, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	f003 fc5a 	bl	800529c <USB_HC_StartXfer>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop

080019f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 f977 	bl	8004cfe <USB_GetMode>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 80f1 	bne.w	8001bfa <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 f95b 	bl	8004cd8 <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80e7 	beq.w	8001bf8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f952 	bl	8004cd8 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a3e:	d104      	bne.n	8001a4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 f942 	bl	8004cd8 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a5e:	d104      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 f932 	bl	8004cd8 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a7e:	d104      	bne.n	8001a8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f922 	bl	8004cd8 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d103      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 f914 	bl	8004cd8 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aba:	d117      	bne.n	8001aec <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001aca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001ace:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f008 f9cd 	bl	8009e70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fa0d 	bl	8004efc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 f8f1 	bl	8004cd8 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d102      	bne.n	8001b08 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f001 f8c8 	bl	8002c98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f8e3 	bl	8004cd8 <USB_ReadInterrupts>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d106      	bne.n	8001b2a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f008 f98b 	bl	8009e38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2208      	movs	r2, #8
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 f8d2 	bl	8004cd8 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b3e:	d138      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fced 	bl	8005524 <USB_HC_ReadInterrupt>
 8001b4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e025      	b.n	8001b9e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d018      	beq.n	8001b98 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b7c:	d106      	bne.n	8001b8c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8cf 	bl	8001d28 <HCD_HC_IN_IRQHandler>
 8001b8a:	e005      	b.n	8001b98 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fc5f 	bl	8002456 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d3d4      	bcc.n	8001b52 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 f88e 	bl	8004cd8 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d101      	bne.n	8001bca <HAL_HCD_IRQHandler+0x1d6>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_HCD_IRQHandler+0x1d8>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d014      	beq.n	8001bfa <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0210 	bic.w	r2, r2, #16
 8001bde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 ffad 	bl	8002b40 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0210 	orr.w	r2, r2, #16
 8001bf4:	619a      	str	r2, [r3, #24]
 8001bf6:	e000      	b.n	8001bfa <HAL_HCD_IRQHandler+0x206>
      return;
 8001bf8:	bf00      	nop
    }
  }
}
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_HCD_Start+0x16>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e013      	b.n	8001c3e <HAL_HCD_Start+0x3e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 ff65 	bl	8004af2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 f9c8 	bl	8004fc4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_HCD_Stop+0x16>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e00d      	b.n	8001c78 <HAL_HCD_Stop+0x32>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fda7 	bl	80057bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 f96f 	bl	8004f70 <USB_ResetPort>
 8001c92:	4603      	mov	r3, r0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	335c      	adds	r3, #92	; 0x5c
 8001cb8:	781b      	ldrb	r3, [r3, #0]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	334c      	adds	r3, #76	; 0x4c
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 f9b1 	bl	8005064 <USB_GetCurrentFrame>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 f98c 	bl	8005036 <USB_GetHostSpeed>
 8001d1e:	4603      	mov	r3, r0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d119      	bne.n	8001d8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	461a      	mov	r2, r3
 8001d66:	2304      	movs	r3, #4
 8001d68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	0151      	lsls	r1, r2, #5
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	440a      	add	r2, r1
 8001d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	60d3      	str	r3, [r2, #12]
 8001d8a:	e095      	b.n	8001eb8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d109      	bne.n	8001db6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	461a      	mov	r2, r3
 8001db0:	2320      	movs	r3, #32
 8001db2:	6093      	str	r3, [r2, #8]
 8001db4:	e080      	b.n	8001eb8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d134      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	0151      	lsls	r1, r2, #5
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	440a      	add	r2, r1
 8001de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	335d      	adds	r3, #93	; 0x5d
 8001dfc:	2205      	movs	r2, #5
 8001dfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2310      	movs	r3, #16
 8001e10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2308      	movs	r3, #8
 8001e22:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fb89 	bl	8005546 <USB_HC_Halt>
 8001e34:	e040      	b.n	8001eb8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4c:	d134      	bne.n	8001eb8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	0151      	lsls	r1, r2, #5
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	440a      	add	r2, r1
 8001e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fb64 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	335d      	adds	r3, #93	; 0x5d
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ece:	d122      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	0151      	lsls	r1, r2, #5
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	440a      	add	r2, r1
 8001ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fb23 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f12:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f14:	e29b      	b.n	800244e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	f040 80c1 	bne.w	80020b0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01b      	beq.n	8001f6e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	3348      	adds	r3, #72	; 0x48
 8001f46:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f5a:	1ad1      	subs	r1, r2, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4403      	add	r3, r0
 8001f6a:	334c      	adds	r3, #76	; 0x4c
 8001f6c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	335d      	adds	r3, #93	; 0x5d
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3358      	adds	r3, #88	; 0x58
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333f      	adds	r3, #63	; 0x3f
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	440b      	add	r3, r1
 8001fcc:	333f      	adds	r3, #63	; 0x3f
 8001fce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d121      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 faa1 	bl	8005546 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	461a      	mov	r2, r3
 8002012:	2310      	movs	r3, #16
 8002014:	6093      	str	r3, [r2, #8]
 8002016:	e034      	b.n	8002082 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	333f      	adds	r3, #63	; 0x3f
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d129      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	440a      	add	r2, r1
 8002044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800204c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	335c      	adds	r3, #92	; 0x5c
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	b2d8      	uxtb	r0, r3
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	335c      	adds	r3, #92	; 0x5c
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4601      	mov	r1, r0
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f007 ff05 	bl	8009e8c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3350      	adds	r3, #80	; 0x50
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2d8      	uxtb	r0, r3
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3350      	adds	r3, #80	; 0x50
 80020aa:	4602      	mov	r2, r0
 80020ac:	701a      	strb	r2, [r3, #0]
}
 80020ae:	e1ce      	b.n	800244e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 80f1 	bne.w	80022aa <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	0151      	lsls	r1, r2, #5
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	440a      	add	r2, r1
 80020de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e2:	f023 0302 	bic.w	r3, r3, #2
 80020e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	335d      	adds	r3, #93	; 0x5d
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10a      	bne.n	8002114 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	335c      	adds	r3, #92	; 0x5c
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e0b0      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	335d      	adds	r3, #93	; 0x5d
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b05      	cmp	r3, #5
 8002128:	d10a      	bne.n	8002140 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	335c      	adds	r3, #92	; 0x5c
 800213a:	2205      	movs	r2, #5
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e09a      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	335d      	adds	r3, #93	; 0x5d
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b06      	cmp	r3, #6
 8002154:	d00a      	beq.n	800216c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	335d      	adds	r3, #93	; 0x5d
 8002166:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002168:	2b08      	cmp	r3, #8
 800216a:	d156      	bne.n	800221a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3358      	adds	r3, #88	; 0x58
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4403      	add	r3, r0
 800218e:	3358      	adds	r3, #88	; 0x58
 8002190:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	3358      	adds	r3, #88	; 0x58
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d914      	bls.n	80021d2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	3358      	adds	r3, #88	; 0x58
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e009      	b.n	80021e6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	335c      	adds	r3, #92	; 0x5c
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021fc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002204:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02d      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	335d      	adds	r3, #93	; 0x5d
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d122      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800225a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002262:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	461a      	mov	r2, r3
 8002284:	2302      	movs	r3, #2
 8002286:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	b2d8      	uxtb	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	335c      	adds	r3, #92	; 0x5c
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	4601      	mov	r1, r0
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f007 fdf2 	bl	8009e8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022a8:	e0d1      	b.n	800244e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d13e      	bne.n	800233e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	0151      	lsls	r1, r2, #5
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	440a      	add	r2, r1
 80022d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	3358      	adds	r3, #88	; 0x58
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4403      	add	r3, r0
 8002302:	3358      	adds	r3, #88	; 0x58
 8002304:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	335d      	adds	r3, #93	; 0x5d
 8002316:	2206      	movs	r2, #6
 8002318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f003 f90e 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	461a      	mov	r2, r3
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	6093      	str	r3, [r2, #8]
}
 800233c:	e087      	b.n	800244e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b10      	cmp	r3, #16
 8002352:	d17c      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	333f      	adds	r3, #63	; 0x3f
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d122      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3358      	adds	r3, #88	; 0x58
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	440a      	add	r2, r1
 8002394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 f8cc 	bl	8005546 <USB_HC_Halt>
 80023ae:	e045      	b.n	800243c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	333f      	adds	r3, #63	; 0x3f
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	333f      	adds	r3, #63	; 0x3f
 80023d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d12f      	bne.n	800243c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3358      	adds	r3, #88	; 0x58
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d121      	bne.n	800243c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	335d      	adds	r3, #93	; 0x5d
 8002408:	2203      	movs	r2, #3
 800240a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	0151      	lsls	r1, r2, #5
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	440a      	add	r2, r1
 8002422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f003 f885 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2310      	movs	r3, #16
 800244c:	6093      	str	r3, [r2, #8]
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d119      	bne.n	80024ba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	461a      	mov	r2, r3
 8002494:	2304      	movs	r3, #4
 8002496:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	0151      	lsls	r1, r2, #5
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	440a      	add	r2, r1
 80024ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024b8:	e33e      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d141      	bne.n	8002554 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	461a      	mov	r2, r3
 80024de:	2320      	movs	r3, #32
 80024e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	333d      	adds	r3, #61	; 0x3d
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f040 831f 	bne.w	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	440b      	add	r3, r1
 8002508:	333d      	adds	r3, #61	; 0x3d
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	0151      	lsls	r1, r2, #5
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	440a      	add	r2, r1
 8002538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fffa 	bl	8005546 <USB_HC_Halt>
}
 8002552:	e2f1      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d13f      	bne.n	80025ea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	335d      	adds	r3, #93	; 0x5d
 800257a:	2204      	movs	r2, #4
 800257c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	333d      	adds	r3, #61	; 0x3d
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	440b      	add	r3, r1
 80025a0:	3358      	adds	r3, #88	; 0x58
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	0151      	lsls	r1, r2, #5
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	440a      	add	r2, r1
 80025bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 ffb8 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	461a      	mov	r2, r3
 80025e4:	2340      	movs	r3, #64	; 0x40
 80025e6:	6093      	str	r3, [r2, #8]
}
 80025e8:	e2a6      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d122      	bne.n	8002648 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	0151      	lsls	r1, r2, #5
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	440a      	add	r2, r1
 8002618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f002 ff8a 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	461a      	mov	r2, r3
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	6093      	str	r3, [r2, #8]
}
 8002646:	e277      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d135      	bne.n	80026ca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3358      	adds	r3, #88	; 0x58
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	440a      	add	r2, r1
 8002688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f002 ff52 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	461a      	mov	r2, r3
 80026b0:	2301      	movs	r3, #1
 80026b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	335d      	adds	r3, #93	; 0x5d
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
}
 80026c8:	e236      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d12b      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	461a      	mov	r2, r3
 80026ee:	2308      	movs	r3, #8
 80026f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	0151      	lsls	r1, r2, #5
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	440a      	add	r2, r1
 8002708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f002 ff12 	bl	8005546 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	335d      	adds	r3, #93	; 0x5d
 8002732:	2205      	movs	r2, #5
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	e1ff      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b10      	cmp	r3, #16
 800274c:	d155      	bne.n	80027fa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	3358      	adds	r3, #88	; 0x58
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	335d      	adds	r3, #93	; 0x5d
 8002772:	2203      	movs	r2, #3
 8002774:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	333d      	adds	r3, #61	; 0x3d
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d114      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	333c      	adds	r3, #60	; 0x3c
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	333d      	adds	r3, #61	; 0x3d
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 feb0 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	2310      	movs	r3, #16
 80027f6:	6093      	str	r3, [r2, #8]
}
 80027f8:	e19e      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d12b      	bne.n	8002868 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fe83 	bl	8005546 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	335d      	adds	r3, #93	; 0x5d
 8002850:	2206      	movs	r2, #6
 8002852:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	6093      	str	r3, [r2, #8]
}
 8002866:	e167      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287e:	d135      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	0151      	lsls	r1, r2, #5
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	440a      	add	r2, r1
 8002896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289a:	f043 0302 	orr.w	r3, r3, #2
 800289e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fe4b 	bl	8005546 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	335d      	adds	r3, #93	; 0x5d
 80028e6:	2208      	movs	r2, #8
 80028e8:	701a      	strb	r2, [r3, #0]
}
 80028ea:	e125      	b.n	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	f040 811a 	bne.w	8002b38 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	0151      	lsls	r1, r2, #5
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	440a      	add	r2, r1
 800291a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	335d      	adds	r3, #93	; 0x5d
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d137      	bne.n	80029aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	335c      	adds	r3, #92	; 0x5c
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	333f      	adds	r3, #63	; 0x3f
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d00b      	beq.n	800297c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	333f      	adds	r3, #63	; 0x3f
 8002974:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002976:	2b03      	cmp	r3, #3
 8002978:	f040 80c5 	bne.w	8002b06 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3351      	adds	r3, #81	; 0x51
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2d8      	uxtb	r0, r3
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3351      	adds	r3, #81	; 0x51
 80029a4:	4602      	mov	r2, r0
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e0ad      	b.n	8002b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	335d      	adds	r3, #93	; 0x5d
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d10a      	bne.n	80029d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	2202      	movs	r2, #2
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e097      	b.n	8002b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	335d      	adds	r3, #93	; 0x5d
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d10a      	bne.n	8002a02 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e081      	b.n	8002b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	335d      	adds	r3, #93	; 0x5d
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10a      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	335c      	adds	r3, #92	; 0x5c
 8002a28:	2205      	movs	r2, #5
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e06b      	b.n	8002b06 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	335d      	adds	r3, #93	; 0x5d
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d00a      	beq.n	8002a5a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	335d      	adds	r3, #93	; 0x5d
 8002a54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d155      	bne.n	8002b06 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	3358      	adds	r3, #88	; 0x58
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4403      	add	r3, r0
 8002a7c:	3358      	adds	r3, #88	; 0x58
 8002a7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3358      	adds	r3, #88	; 0x58
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d914      	bls.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3358      	adds	r3, #88	; 0x58
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2204      	movs	r2, #4
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e009      	b.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	335c      	adds	r3, #92	; 0x5c
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	2302      	movs	r3, #2
 8002b16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	b2d8      	uxtb	r0, r3
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4601      	mov	r1, r0
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f007 f9aa 	bl	8009e8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	0c5b      	lsrs	r3, r3, #17
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b74:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d003      	beq.n	8002b84 <HCD_RXQLVL_IRQHandler+0x44>
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	f000 8082 	beq.w	8002c86 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b82:	e083      	b.n	8002c8c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07f      	beq.n	8002c8a <HCD_RXQLVL_IRQHandler+0x14a>
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3344      	adds	r3, #68	; 0x44
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d074      	beq.n	8002c8a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3344      	adds	r3, #68	; 0x44
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f002 f863 	bl	8004c86 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	3344      	adds	r3, #68	; 0x44
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	18d1      	adds	r1, r2, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4403      	add	r3, r0
 8002be4:	3344      	adds	r3, #68	; 0x44
 8002be6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	334c      	adds	r3, #76	; 0x4c
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	18d1      	adds	r1, r2, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4403      	add	r3, r0
 8002c0c:	334c      	adds	r3, #76	; 0x4c
 8002c0e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HCD_RXQLVL_IRQHandler+0x154>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d031      	beq.n	8002c8a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c44:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	3350      	adds	r3, #80	; 0x50
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2d8      	uxtb	r0, r3
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3350      	adds	r3, #80	; 0x50
 8002c80:	4602      	mov	r2, r0
 8002c82:	701a      	strb	r2, [r3, #0]
      break;
 8002c84:	e001      	b.n	8002c8a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c8a:	bf00      	nop
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	; 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	1ff80000 	.word	0x1ff80000

08002c98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cc4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d113      	bne.n	8002cf8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10a      	bne.n	8002cf0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002ce8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f007 f8b2 	bl	8009e54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d147      	bne.n	8002d92 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d129      	bne.n	8002d68 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d113      	bne.n	8002d44 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d26:	d106      	bne.n	8002d36 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 f8e4 	bl	8004efc <USB_InitFSLSPClkSel>
 8002d34:	e011      	b.n	8002d5a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 f8dd 	bl	8004efc <USB_InitFSLSPClkSel>
 8002d42:	e00a      	b.n	8002d5a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d106      	bne.n	8002d5a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d52:	461a      	mov	r2, r3
 8002d54:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d58:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f007 f8a8 	bl	8009eb0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f007 f877 	bl	8009e54 <HAL_HCD_Connect_Callback>
 8002d66:	e014      	b.n	8002d92 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f007 f8af 	bl	8009ecc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002d7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d80:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d103      	bne.n	8002da4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f043 0320 	orr.w	r3, r3, #32
 8002da2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e11f      	b.n	800300a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fe52 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f001 f9de 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8002e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a7b      	ldr	r2, [pc, #492]	; (8003014 <HAL_I2C_Init+0x25c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d807      	bhi.n	8002e3c <HAL_I2C_Init+0x84>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a7a      	ldr	r2, [pc, #488]	; (8003018 <HAL_I2C_Init+0x260>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	bf94      	ite	ls
 8002e34:	2301      	movls	r3, #1
 8002e36:	2300      	movhi	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e006      	b.n	8002e4a <HAL_I2C_Init+0x92>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a77      	ldr	r2, [pc, #476]	; (800301c <HAL_I2C_Init+0x264>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bf94      	ite	ls
 8002e44:	2301      	movls	r3, #1
 8002e46:	2300      	movhi	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0db      	b.n	800300a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a72      	ldr	r2, [pc, #456]	; (8003020 <HAL_I2C_Init+0x268>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9b      	lsrs	r3, r3, #18
 8002e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a64      	ldr	r2, [pc, #400]	; (8003014 <HAL_I2C_Init+0x25c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d802      	bhi.n	8002e8c <HAL_I2C_Init+0xd4>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	e009      	b.n	8002ea0 <HAL_I2C_Init+0xe8>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a63      	ldr	r2, [pc, #396]	; (8003024 <HAL_I2C_Init+0x26c>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4956      	ldr	r1, [pc, #344]	; (8003014 <HAL_I2C_Init+0x25c>)
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d80d      	bhi.n	8002edc <HAL_I2C_Init+0x124>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e59      	subs	r1, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	bf38      	it	cc
 8002ed8:	2304      	movcc	r3, #4
 8002eda:	e04f      	b.n	8002f7c <HAL_I2C_Init+0x1c4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d111      	bne.n	8002f08 <HAL_I2C_Init+0x150>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e012      	b.n	8002f2e <HAL_I2C_Init+0x176>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Init+0x17e>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e022      	b.n	8002f7c <HAL_I2C_Init+0x1c4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <HAL_I2C_Init+0x1a4>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e58      	subs	r0, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	440b      	add	r3, r1
 8002f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5a:	e00f      	b.n	8002f7c <HAL_I2C_Init+0x1c4>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6809      	ldr	r1, [r1, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6911      	ldr	r1, [r2, #16]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	000186a0 	.word	0x000186a0
 8003018:	001e847f 	.word	0x001e847f
 800301c:	003d08ff 	.word	0x003d08ff
 8003020:	431bde83 	.word	0x431bde83
 8003024:	10624dd3 	.word	0x10624dd3

08003028 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e128      	b.n	800328c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a90      	ldr	r2, [pc, #576]	; (8003294 <HAL_I2S_Init+0x26c>)
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7fd fd5f 	bl	8000b18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003070:	f023 030f 	bic.w	r3, r3, #15
 8003074:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2202      	movs	r2, #2
 800307c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d060      	beq.n	8003148 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800308e:	2310      	movs	r3, #16
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e001      	b.n	8003098 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b20      	cmp	r3, #32
 800309e:	d802      	bhi.n	80030a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f001 f9e2 	bl	8004470 <HAL_RCCEx_GetPeriphCLKFreq>
 80030ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b6:	d125      	bne.n	8003104 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d010      	beq.n	80030e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	3305      	adds	r3, #5
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	e01f      	b.n	8003122 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	3305      	adds	r3, #5
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	e00e      	b.n	8003122 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	3305      	adds	r3, #5
 8003120:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a5c      	ldr	r2, [pc, #368]	; (8003298 <HAL_I2S_Init+0x270>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	08db      	lsrs	r3, r3, #3
 800312c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e003      	b.n	8003150 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003148:	2302      	movs	r3, #2
 800314a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d902      	bls.n	800315c <HAL_I2S_Init+0x134>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2bff      	cmp	r3, #255	; 0xff
 800315a:	d907      	bls.n	800316c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0210 	orr.w	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e08f      	b.n	800328c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	430a      	orrs	r2, r1
 800317e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800318a:	f023 030f 	bic.w	r3, r3, #15
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6851      	ldr	r1, [r2, #4]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6892      	ldr	r2, [r2, #8]
 8003196:	4311      	orrs	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68d2      	ldr	r2, [r2, #12]
 800319c:	4311      	orrs	r1, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6992      	ldr	r2, [r2, #24]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d161      	bne.n	800327c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_I2S_Init+0x274>)
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_I2S_Init+0x278>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_I2S_Init+0x1a4>
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <HAL_I2S_Init+0x27c>)
 80031ca:	e001      	b.n	80031d0 <HAL_I2S_Init+0x1a8>
 80031cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	4932      	ldr	r1, [pc, #200]	; (80032a0 <HAL_I2S_Init+0x278>)
 80031d8:	428a      	cmp	r2, r1
 80031da:	d101      	bne.n	80031e0 <HAL_I2S_Init+0x1b8>
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <HAL_I2S_Init+0x27c>)
 80031de:	e001      	b.n	80031e4 <HAL_I2S_Init+0x1bc>
 80031e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e8:	f023 030f 	bic.w	r3, r3, #15
 80031ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <HAL_I2S_Init+0x278>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_I2S_Init+0x1d4>
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_I2S_Init+0x27c>)
 80031fa:	e001      	b.n	8003200 <HAL_I2S_Init+0x1d8>
 80031fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003200:	2202      	movs	r2, #2
 8003202:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <HAL_I2S_Init+0x278>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_I2S_Init+0x1ea>
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_I2S_Init+0x27c>)
 8003210:	e001      	b.n	8003216 <HAL_I2S_Init+0x1ee>
 8003212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003222:	d003      	beq.n	800322c <HAL_I2S_Init+0x204>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800322c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e001      	b.n	8003238 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	b299      	uxth	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800324e:	4303      	orrs	r3, r0
 8003250:	b29b      	uxth	r3, r3
 8003252:	430b      	orrs	r3, r1
 8003254:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003256:	4313      	orrs	r3, r2
 8003258:	b29a      	uxth	r2, r3
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	4313      	orrs	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003264:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_I2S_Init+0x278>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_I2S_Init+0x24c>
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_I2S_Init+0x27c>)
 8003272:	e001      	b.n	8003278 <HAL_I2S_Init+0x250>
 8003274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003278:	897a      	ldrh	r2, [r7, #10]
 800327a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0800339f 	.word	0x0800339f
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	080034b5 	.word	0x080034b5
 80032a0:	40003800 	.word	0x40003800
 80032a4:	40003400 	.word	0x40003400

080032a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10e      	bne.n	8003338 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003328:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffb8 	bl	80032a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	b292      	uxth	r2, r2
 8003354:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10e      	bne.n	8003396 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003386:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff93 	bl	80032bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d13a      	bne.n	8003430 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d109      	bne.n	80033d8 <I2S_IRQHandler+0x3a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d102      	bne.n	80033d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ffb4 	bl	8003340 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d126      	bne.n	8003430 <I2S_IRQHandler+0x92>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d11f      	bne.n	8003430 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff50 	bl	80032d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d136      	bne.n	80034aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d109      	bne.n	800345a <I2S_IRQHandler+0xbc>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d102      	bne.n	800345a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff45 	bl	80032e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d122      	bne.n	80034aa <I2S_IRQHandler+0x10c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d11b      	bne.n	80034aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003480:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff13 	bl	80032d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4aa2      	ldr	r2, [pc, #648]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034ce:	4ba2      	ldr	r3, [pc, #648]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034d0:	e001      	b.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a9b      	ldr	r2, [pc, #620]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034ec:	4b9a      	ldr	r3, [pc, #616]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ee:	e001      	b.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d004      	beq.n	800350c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 8099 	bne.w	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d107      	bne.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f925 	bl	8003770 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9c8 	bl	80038d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d13a      	bne.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d035      	beq.n	80035c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a7e      	ldr	r2, [pc, #504]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800355e:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4979      	ldr	r1, [pc, #484]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800356e:	428b      	cmp	r3, r1
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003572:	4b79      	ldr	r3, [pc, #484]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800358e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f043 0202 	orr.w	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fe88 	bl	80032d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	f040 80be 	bne.w	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80b8 	beq.w	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a59      	ldr	r2, [pc, #356]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035f2:	4b59      	ldr	r3, [pc, #356]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f4:	e001      	b.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4954      	ldr	r1, [pc, #336]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003602:	428b      	cmp	r3, r1
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003612:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fe4a 	bl	80032d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800363c:	e084      	b.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d107      	bne.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8be 	bl	80037d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8fd 	bl	800386c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d12f      	bne.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02a      	beq.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003694:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2e      	ldr	r2, [pc, #184]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036a0:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a2:	e001      	b.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4929      	ldr	r1, [pc, #164]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d101      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036b4:	4b28      	ldr	r3, [pc, #160]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036b6:	e001      	b.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f043 0202 	orr.w	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fdfa 	bl	80032d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d131      	bne.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02c      	beq.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036fc:	e001      	b.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370a:	428b      	cmp	r3, r1
 800370c:	d101      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003710:	e001      	b.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fdc5 	bl	80032d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003746:	e000      	b.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003748:	bf00      	nop
}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40003800 	.word	0x40003800
 8003758:	40003400 	.word	0x40003400

0800375c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c99      	adds	r1, r3, #2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6251      	str	r1, [r2, #36]	; 0x24
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d113      	bne.n	80037ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ffc9 	bl	800375c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c99      	adds	r1, r3, #2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6251      	str	r1, [r2, #36]	; 0x24
 80037e6:	8819      	ldrh	r1, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <I2SEx_TxISR_I2SExt+0x90>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <I2SEx_TxISR_I2SExt+0x22>
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <I2SEx_TxISR_I2SExt+0x94>)
 80037f4:	e001      	b.n	80037fa <I2SEx_TxISR_I2SExt+0x26>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	460a      	mov	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d121      	bne.n	800385a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <I2SEx_TxISR_I2SExt+0x90>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <I2SEx_TxISR_I2SExt+0x50>
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <I2SEx_TxISR_I2SExt+0x94>)
 8003822:	e001      	b.n	8003828 <I2SEx_TxISR_I2SExt+0x54>
 8003824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	490d      	ldr	r1, [pc, #52]	; (8003864 <I2SEx_TxISR_I2SExt+0x90>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d101      	bne.n	8003838 <I2SEx_TxISR_I2SExt+0x64>
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <I2SEx_TxISR_I2SExt+0x94>)
 8003836:	e001      	b.n	800383c <I2SEx_TxISR_I2SExt+0x68>
 8003838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003840:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff81 	bl	800375c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40003800 	.word	0x40003800
 8003868:	40003400 	.word	0x40003400

0800386c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68d8      	ldr	r0, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	1c99      	adds	r1, r3, #2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003884:	b282      	uxth	r2, r0
 8003886:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff4a 	bl	800375c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <I2SEx_RxISR_I2SExt+0x90>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <I2SEx_RxISR_I2SExt+0x16>
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <I2SEx_RxISR_I2SExt+0x94>)
 80038e4:	e001      	b.n	80038ea <I2SEx_RxISR_I2SExt+0x1a>
 80038e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ea:	68d8      	ldr	r0, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	1c99      	adds	r1, r3, #2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038f6:	b282      	uxth	r2, r0
 80038f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d121      	bne.n	8003956 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <I2SEx_RxISR_I2SExt+0x90>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <I2SEx_RxISR_I2SExt+0x50>
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <I2SEx_RxISR_I2SExt+0x94>)
 800391e:	e001      	b.n	8003924 <I2SEx_RxISR_I2SExt+0x54>
 8003920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	490d      	ldr	r1, [pc, #52]	; (8003960 <I2SEx_RxISR_I2SExt+0x90>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d101      	bne.n	8003934 <I2SEx_RxISR_I2SExt+0x64>
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <I2SEx_RxISR_I2SExt+0x94>)
 8003932:	e001      	b.n	8003938 <I2SEx_RxISR_I2SExt+0x68>
 8003934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003938:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff03 	bl	800375c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40003800 	.word	0x40003800
 8003964:	40003400 	.word	0x40003400

08003968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e25b      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d075      	beq.n	8003a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	4ba3      	ldr	r3, [pc, #652]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4ba0      	ldr	r3, [pc, #640]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b9d      	ldr	r3, [pc, #628]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b99      	ldr	r3, [pc, #612]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e236      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x74>
 80039ce:	4b91      	ldr	r3, [pc, #580]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a90      	ldr	r2, [pc, #576]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b8b      	ldr	r3, [pc, #556]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a8a      	ldr	r2, [pc, #552]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a87      	ldr	r2, [pc, #540]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 8003a00:	4b84      	ldr	r3, [pc, #528]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a83      	ldr	r2, [pc, #524]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a80      	ldr	r2, [pc, #512]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fd fab8 	bl	8000f94 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fd fab4 	bl	8000f94 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1fb      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd faa4 	bl	8000f94 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd faa0 	bl	8000f94 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1e7      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b5c      	ldr	r3, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1bb      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4952      	ldr	r1, [pc, #328]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e03a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	; (8003c18 <HAL_RCC_OscConfig+0x2b0>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd fa59 	bl	8000f94 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fd fa55 	bl	8000f94 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e19c      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4940      	ldr	r1, [pc, #256]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <HAL_RCC_OscConfig+0x2b0>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fa38 	bl	8000f94 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b28:	f7fd fa34 	bl	8000f94 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e17b      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d030      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <HAL_RCC_OscConfig+0x2b4>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd fa18 	bl	8000f94 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fd fa14 	bl	8000f94 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e15b      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x200>
 8003b86:	e015      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_OscConfig+0x2b4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fa01 	bl	8000f94 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fd f9fd 	bl	8000f94 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e144      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f0      	bne.n	8003b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a0 	beq.w	8003d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6413      	str	r3, [r2, #64]	; 0x40
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x2b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d121      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCC_OscConfig+0x2b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <HAL_RCC_OscConfig+0x2b8>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd f9c3 	bl	8000f94 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	e011      	b.n	8003c36 <HAL_RCC_OscConfig+0x2ce>
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470000 	.word	0x42470000
 8003c1c:	42470e80 	.word	0x42470e80
 8003c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd f9b6 	bl	8000f94 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0fd      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x4d4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d106      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2f0>
 8003c4a:	4b7d      	ldr	r3, [pc, #500]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a7c      	ldr	r2, [pc, #496]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
 8003c56:	e01c      	b.n	8003c92 <HAL_RCC_OscConfig+0x32a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d10c      	bne.n	8003c7a <HAL_RCC_OscConfig+0x312>
 8003c60:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a76      	ldr	r2, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	e00b      	b.n	8003c92 <HAL_RCC_OscConfig+0x32a>
 8003c7a:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	4a70      	ldr	r2, [pc, #448]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
 8003c86:	4b6e      	ldr	r3, [pc, #440]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	4a6d      	ldr	r2, [pc, #436]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d015      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fd f97b 	bl	8000f94 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fd f977 	bl	8000f94 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0bc      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ee      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x33a>
 8003cc4:	e014      	b.n	8003cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc6:	f7fd f965 	bl	8000f94 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd f961 	bl	8000f94 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0a6      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ee      	bne.n	8003cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b52      	ldr	r3, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	4a51      	ldr	r2, [pc, #324]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8092 	beq.w	8003e30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d05c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d141      	bne.n	8003da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b48      	ldr	r3, [pc, #288]	; (8003e44 <HAL_RCC_OscConfig+0x4dc>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fd f935 	bl	8000f94 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2e:	f7fd f931 	bl	8000f94 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e078      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	019b      	lsls	r3, r3, #6
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	3b01      	subs	r3, #1
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	4933      	ldr	r1, [pc, #204]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d76:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_RCC_OscConfig+0x4dc>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f90a 	bl	8000f94 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d84:	f7fd f906 	bl	8000f94 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e04d      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x41c>
 8003da2:	e045      	b.n	8003e30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x4dc>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd f8f3 	bl	8000f94 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fd f8ef 	bl	8000f94 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e036      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f0      	bne.n	8003db2 <HAL_RCC_OscConfig+0x44a>
 8003dd0:	e02e      	b.n	8003e30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e029      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_RCC_OscConfig+0x4d8>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d115      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470060 	.word	0x42470060

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90c      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e067      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b37      	ldr	r3, [pc, #220]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4934      	ldr	r1, [pc, #208]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fd f82c 	bl	8000f94 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fd f828 	bl	8000f94 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e04f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d20c      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f821 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4601      	mov	r1, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fea8 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00
 8004004:	40023800 	.word	0x40023800
 8004008:	0800a564 	.word	0x0800a564
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b04      	cmp	r3, #4
 8004034:	d007      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x32>
 8004036:	2b08      	cmp	r3, #8
 8004038:	d008      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x38>
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 80b4 	bne.w	80041a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004040:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004042:	60bb      	str	r3, [r7, #8]
       break;
 8004044:	e0b3      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004046:	4b5e      	ldr	r3, [pc, #376]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004048:	60bb      	str	r3, [r7, #8]
      break;
 800404a:	e0b0      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800404c:	4b5a      	ldr	r3, [pc, #360]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004054:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004056:	4b58      	ldr	r3, [pc, #352]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04a      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004062:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	f04f 0400 	mov.w	r4, #0
 800406c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	ea03 0501 	and.w	r5, r3, r1
 8004078:	ea04 0602 	and.w	r6, r4, r2
 800407c:	4629      	mov	r1, r5
 800407e:	4632      	mov	r2, r6
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	f04f 0400 	mov.w	r4, #0
 8004088:	0154      	lsls	r4, r2, #5
 800408a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800408e:	014b      	lsls	r3, r1, #5
 8004090:	4619      	mov	r1, r3
 8004092:	4622      	mov	r2, r4
 8004094:	1b49      	subs	r1, r1, r5
 8004096:	eb62 0206 	sbc.w	r2, r2, r6
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	f04f 0400 	mov.w	r4, #0
 80040a2:	0194      	lsls	r4, r2, #6
 80040a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040a8:	018b      	lsls	r3, r1, #6
 80040aa:	1a5b      	subs	r3, r3, r1
 80040ac:	eb64 0402 	sbc.w	r4, r4, r2
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	00e2      	lsls	r2, r4, #3
 80040ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040be:	00d9      	lsls	r1, r3, #3
 80040c0:	460b      	mov	r3, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	195b      	adds	r3, r3, r5
 80040c6:	eb44 0406 	adc.w	r4, r4, r6
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	0262      	lsls	r2, r4, #9
 80040d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040d8:	0259      	lsls	r1, r3, #9
 80040da:	460b      	mov	r3, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	4621      	mov	r1, r4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	461a      	mov	r2, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	f7fc f878 	bl	80001e0 <__aeabi_uldivmod>
 80040f0:	4603      	mov	r3, r0
 80040f2:	460c      	mov	r4, r1
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e049      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f8:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	ea03 0501 	and.w	r5, r3, r1
 800410e:	ea04 0602 	and.w	r6, r4, r2
 8004112:	4629      	mov	r1, r5
 8004114:	4632      	mov	r2, r6
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	0154      	lsls	r4, r2, #5
 8004120:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004124:	014b      	lsls	r3, r1, #5
 8004126:	4619      	mov	r1, r3
 8004128:	4622      	mov	r2, r4
 800412a:	1b49      	subs	r1, r1, r5
 800412c:	eb62 0206 	sbc.w	r2, r2, r6
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	f04f 0400 	mov.w	r4, #0
 8004138:	0194      	lsls	r4, r2, #6
 800413a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800413e:	018b      	lsls	r3, r1, #6
 8004140:	1a5b      	subs	r3, r3, r1
 8004142:	eb64 0402 	sbc.w	r4, r4, r2
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	00e2      	lsls	r2, r4, #3
 8004150:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004154:	00d9      	lsls	r1, r3, #3
 8004156:	460b      	mov	r3, r1
 8004158:	4614      	mov	r4, r2
 800415a:	195b      	adds	r3, r3, r5
 800415c:	eb44 0406 	adc.w	r4, r4, r6
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	02a2      	lsls	r2, r4, #10
 800416a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800416e:	0299      	lsls	r1, r3, #10
 8004170:	460b      	mov	r3, r1
 8004172:	4614      	mov	r4, r2
 8004174:	4618      	mov	r0, r3
 8004176:	4621      	mov	r1, r4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f04f 0400 	mov.w	r4, #0
 800417e:	461a      	mov	r2, r3
 8004180:	4623      	mov	r3, r4
 8004182:	f7fc f82d 	bl	80001e0 <__aeabi_uldivmod>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
 800418a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	60bb      	str	r3, [r7, #8]
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041aa:	60bb      	str	r3, [r7, #8]
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	68bb      	ldr	r3, [r7, #8]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	007a1200 	.word	0x007a1200

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000000 	.word	0x20000000

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4601      	mov	r1, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4a03      	ldr	r2, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800a574 	.word	0x0800a574

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4601      	mov	r1, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800a574 	.word	0x0800a574

0800422c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	220f      	movs	r2, #15
 800423a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0203 	and.w	r2, r3, #3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_RCC_GetClockConfig+0x60>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	40023c00 	.word	0x40023c00

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d038      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042b8:	4b68      	ldr	r3, [pc, #416]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042be:	f7fc fe69 	bl	8000f94 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c6:	f7fc fe65 	bl	8000f94 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e0bd      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d8:	4b61      	ldr	r3, [pc, #388]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	019b      	lsls	r3, r3, #6
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	071b      	lsls	r3, r3, #28
 80042f6:	495a      	ldr	r1, [pc, #360]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042fe:	4b57      	ldr	r3, [pc, #348]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004304:	f7fc fe46 	bl	8000f94 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800430c:	f7fc fe42 	bl	8000f94 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e09a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800431e:	4b50      	ldr	r3, [pc, #320]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8083 	beq.w	800443e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	4b48      	ldr	r3, [pc, #288]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004346:	6413      	str	r3, [r2, #64]	; 0x40
 8004348:	4b45      	ldr	r3, [pc, #276]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004354:	4b43      	ldr	r3, [pc, #268]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a42      	ldr	r2, [pc, #264]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004360:	f7fc fe18 	bl	8000f94 <HAL_GetTick>
 8004364:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004368:	f7fc fe14 	bl	8000f94 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e06c      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800437a:	4b3a      	ldr	r3, [pc, #232]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004386:	4b36      	ldr	r3, [pc, #216]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d02f      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d028      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a4:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ae:	4b2e      	ldr	r3, [pc, #184]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b4:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043ba:	4a29      	ldr	r2, [pc, #164]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d114      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fc fde2 	bl	8000f94 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fc fdde 	bl	8000f94 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e034      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ee      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004402:	d10d      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004418:	4911      	ldr	r1, [pc, #68]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
 800441e:	e005      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	4909      	ldr	r1, [pc, #36]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	4313      	orrs	r3, r2
 800443c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7d1a      	ldrb	r2, [r3, #20]
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004450:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	42470068 	.word	0x42470068
 8004460:	40023800 	.word	0x40023800
 8004464:	40007000 	.word	0x40007000
 8004468:	42470e40 	.word	0x42470e40
 800446c:	424711e0 	.word	0x424711e0

08004470 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d13f      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800448e:	4b23      	ldr	r3, [pc, #140]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004496:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d131      	bne.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a2:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044a4:	617b      	str	r3, [r7, #20]
          break;
 80044a6:	e031      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044a8:	4b1c      	ldr	r3, [pc, #112]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b4:	d109      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80044b6:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c0:	4a18      	ldr	r2, [pc, #96]	; (8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	e008      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f6:	0f1b      	lsrs	r3, r3, #28
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	617b      	str	r3, [r7, #20]
          break;
 8004504:	e002      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
          break;
 800450a:	bf00      	nop
        }
      }
      break;
 800450c:	bf00      	nop
    }
  }
  return frequency;
 800450e:	697b      	ldr	r3, [r7, #20]
}
 8004510:	4618      	mov	r0, r3
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40023800 	.word	0x40023800
 8004520:	00bb8000 	.word	0x00bb8000
 8004524:	007a1200 	.word	0x007a1200
 8004528:	00f42400 	.word	0x00f42400

0800452c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e056      	b.n	80045ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fc fbab 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004574:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	ea42 0103 	orr.w	r1, r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 0104 	and.w	r1, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e01d      	b.n	8004642 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f815 	bl	800464a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f000 f968 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d007      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d122      	bne.n	8004702 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d11b      	bne.n	8004702 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f06f 0202 	mvn.w	r2, #2
 80046d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8ee 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 80046ee:	e005      	b.n	80046fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8e0 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f8f1 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d122      	bne.n	8004756 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d11b      	bne.n	8004756 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 0204 	mvn.w	r2, #4
 8004726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8c4 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 8004742:	e005      	b.n	8004750 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8b6 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8c7 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d122      	bne.n	80047aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11b      	bne.n	80047aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f06f 0208 	mvn.w	r2, #8
 800477a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2204      	movs	r2, #4
 8004780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f89a 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 8004796:	e005      	b.n	80047a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f88c 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f89d 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d122      	bne.n	80047fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d11b      	bne.n	80047fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0210 	mvn.w	r2, #16
 80047ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2208      	movs	r2, #8
 80047d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f870 	bl	80048ca <HAL_TIM_IC_CaptureCallback>
 80047ea:	e005      	b.n	80047f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f862 	bl	80048b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f873 	bl	80048de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10e      	bne.n	800482a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f06f 0201 	mvn.w	r2, #1
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc f8e9 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d10e      	bne.n	8004856 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d107      	bne.n	8004856 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800484e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8e3 	bl	8004a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d10e      	bne.n	8004882 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d107      	bne.n	8004882 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800487a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f838 	bl	80048f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d10e      	bne.n	80048ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b20      	cmp	r3, #32
 800489c:	d107      	bne.n	80048ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f06f 0220 	mvn.w	r2, #32
 80048a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8ad 	bl	8004a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <TIM_Base_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00f      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d00b      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a31      	ldr	r2, [pc, #196]	; (80049f0 <TIM_Base_SetConfig+0xe8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a30      	ldr	r2, [pc, #192]	; (80049f4 <TIM_Base_SetConfig+0xec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <TIM_Base_SetConfig+0xf0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d108      	bne.n	8004952 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a25      	ldr	r2, [pc, #148]	; (80049ec <TIM_Base_SetConfig+0xe4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01b      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d017      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <TIM_Base_SetConfig+0xe8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <TIM_Base_SetConfig+0xec>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00f      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <TIM_Base_SetConfig+0xf0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <TIM_Base_SetConfig+0xf4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <TIM_Base_SetConfig+0xf8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <TIM_Base_SetConfig+0xfc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <TIM_Base_SetConfig+0xe4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d103      	bne.n	80049d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	615a      	str	r2, [r3, #20]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	40000c00 	.word	0x40000c00
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a30:	b084      	sub	sp, #16
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	f107 001c 	add.w	r0, r7, #28
 8004a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d122      	bne.n	8004a8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f94a 	bl	8004d1c <USB_CoreReset>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e01a      	b.n	8004ac4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f93e 	bl	8004d1c <USB_CoreReset>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ab6:	e005      	b.n	8004ac4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10b      	bne.n	8004ae2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f043 0206 	orr.w	r2, r3, #6
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aee:	b004      	add	sp, #16
 8004af0:	4770      	bx	lr

08004af2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f043 0201 	orr.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 0201 	bic.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60da      	str	r2, [r3, #12]
 8004b60:	e00b      	b.n	8004b7a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]
 8004b74:	e001      	b.n	8004b7a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e003      	b.n	8004b82 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b7a:	2032      	movs	r0, #50	; 0x32
 8004b7c:	f7fc fa16 	bl	8000fac <HAL_Delay>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <USB_FlushTxFifo+0x48>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e006      	b.n	8004bc6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d0f0      	beq.n	8004ba6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	00030d40 	.word	0x00030d40

08004bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2210      	movs	r2, #16
 8004be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <USB_FlushRxFifo+0x40>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d0f0      	beq.n	8004bea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	00030d40 	.word	0x00030d40

08004c1c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	71fb      	strb	r3, [r7, #7]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11a      	bne.n	8004c78 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c42:	88bb      	ldrh	r3, [r7, #4]
 8004c44:	3303      	adds	r3, #3
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e00f      	b.n	8004c70 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	031a      	lsls	r2, r3, #12
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3304      	adds	r3, #4
 8004c68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3eb      	bcc.n	8004c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	; 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b089      	sub	sp, #36	; 0x24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	4613      	mov	r3, r2
 8004c92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	3303      	adds	r3, #3
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	e00b      	b.n	8004cc2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d3ef      	bcc.n	8004caa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004cca:	69fb      	ldr	r3, [r7, #28]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3724      	adds	r7, #36	; 0x24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <USB_CoreReset+0x64>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e01b      	b.n	8004d72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	daf2      	bge.n	8004d28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <USB_CoreReset+0x64>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d0f0      	beq.n	8004d52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	00030d40 	.word	0x00030d40

08004d84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d84:	b084      	sub	sp, #16
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	f107 001c 	add.w	r0, r7, #28
 8004d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d10a      	bne.n	8004df2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e014      	b.n	8004e1c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e00:	f023 0304 	bic.w	r3, r3, #4
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e009      	b.n	8004e1c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e16:	f023 0304 	bic.w	r3, r3, #4
 8004e1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff feb4 	bl	8004b8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fed7 	bl	8004bd8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e015      	b.n	8004e5c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3e5      	bcc.n	8004e30 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004e64:	2101      	movs	r1, #1
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8ac 	bl	8004fc4 <USB_DriveVbus>

  HAL_Delay(200U);
 8004e6c:	20c8      	movs	r0, #200	; 0xc8
 8004e6e:	f7fc f89d 	bl	8000fac <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <USB_HostInit+0x164>)
 8004e98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <USB_HostInit+0x168>)
 8004e9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ea2:	e009      	b.n	8004eb8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a10      	ldr	r2, [pc, #64]	; (8004ef0 <USB_HostInit+0x16c>)
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <USB_HostInit+0x170>)
 8004eb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <USB_HostInit+0x174>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee2:	b004      	add	sp, #16
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	01000200 	.word	0x01000200
 8004eec:	00e00300 	.word	0x00e00300
 8004ef0:	00600080 	.word	0x00600080
 8004ef4:	004000e0 	.word	0x004000e0
 8004ef8:	a3200008 	.word	0xa3200008

08004efc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d107      	bne.n	8004f4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f44:	461a      	mov	r2, r3
 8004f46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f4a:	6053      	str	r3, [r2, #4]
 8004f4c:	e009      	b.n	8004f62 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d106      	bne.n	8004f62 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f60:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004fa0:	2064      	movs	r0, #100	; 0x64
 8004fa2:	f7fc f803 	bl	8000fac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004fb4:	200a      	movs	r0, #10
 8004fb6:	f7fb fff9 	bl	8000fac <HAL_Delay>

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fe8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <USB_DriveVbus+0x44>
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005006:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	d109      	bne.n	8005028 <USB_DriveVbus+0x64>
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005026:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	0c5b      	lsrs	r3, r3, #17
 8005054:	f003 0303 	and.w	r3, r3, #3
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	b29b      	uxth	r3, r3
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	4603      	mov	r3, r0
 8005098:	70fb      	strb	r3, [r7, #3]
 800509a:	460b      	mov	r3, r1
 800509c:	70bb      	strb	r3, [r7, #2]
 800509e:	4613      	mov	r3, r2
 80050a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	461a      	mov	r2, r3
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
 80050bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80050be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d87e      	bhi.n	80051c4 <USB_HC_Init+0x13c>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <USB_HC_Init+0x44>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	08005187 	.word	0x08005187
 80050d4:	080050dd 	.word	0x080050dd
 80050d8:	08005149 	.word	0x08005149
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80050ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80050f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	da10      	bge.n	800511a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	440a      	add	r2, r1
 800510e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005116:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005118:	e057      	b.n	80051ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d051      	beq.n	80051ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	440a      	add	r2, r1
 800513c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005140:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005144:	60d3      	str	r3, [r2, #12]
      break;
 8005146:	e040      	b.n	80051ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	461a      	mov	r2, r3
 8005156:	f240 639d 	movw	r3, #1693	; 0x69d
 800515a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800515c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005160:	2b00      	cmp	r3, #0
 8005162:	da34      	bge.n	80051ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	440a      	add	r2, r1
 800517a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005182:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005184:	e023      	b.n	80051ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	461a      	mov	r2, r3
 8005194:	f240 2325 	movw	r3, #549	; 0x225
 8005198:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800519a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da17      	bge.n	80051d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80051c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80051c2:	e006      	b.n	80051d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      break;
 80051c8:	e004      	b.n	80051d4 <USB_HC_Init+0x14c>
      break;
 80051ca:	bf00      	nop
 80051cc:	e002      	b.n	80051d4 <USB_HC_Init+0x14c>
      break;
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <USB_HC_Init+0x14c>
      break;
 80051d2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	2101      	movs	r1, #1
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051ee:	4313      	orrs	r3, r2
 80051f0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80051fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da03      	bge.n	800520e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	e001      	b.n	8005212 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d103      	bne.n	8005222 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800521a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e001      	b.n	8005226 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005226:	787b      	ldrb	r3, [r7, #1]
 8005228:	059b      	lsls	r3, r3, #22
 800522a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800522e:	78bb      	ldrb	r3, [r7, #2]
 8005230:	02db      	lsls	r3, r3, #11
 8005232:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005236:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800523c:	049b      	lsls	r3, r3, #18
 800523e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005242:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005244:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005246:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800524a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	0159      	lsls	r1, r3, #5
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	440b      	add	r3, r1
 8005258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005262:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005268:	2b03      	cmp	r3, #3
 800526a:	d10f      	bne.n	800528c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
}
 800528e:	4618      	mov	r0, r3
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop

0800529c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80052b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d028      	beq.n	8005318 <USB_HC_StartXfer+0x7c>
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	791b      	ldrb	r3, [r3, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d124      	bne.n	8005318 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <USB_HC_StartXfer+0x50>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	795b      	ldrb	r3, [r3, #5]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d107      	bne.n	80052ec <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	4619      	mov	r1, r3
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fa2e 	bl	8005744 <USB_DoPing>
      return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e112      	b.n	8005512 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d112      	bne.n	8005318 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005310:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2200      	movs	r2, #0
 8005316:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d018      	beq.n	8005352 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	8912      	ldrh	r2, [r2, #8]
 8005328:	4413      	add	r3, r2
 800532a:	3b01      	subs	r3, #1
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	8912      	ldrh	r2, [r2, #8]
 8005330:	fbb3 f3f2 	udiv	r3, r3, r2
 8005334:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005336:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005338:	8b7b      	ldrh	r3, [r7, #26]
 800533a:	429a      	cmp	r2, r3
 800533c:	d90b      	bls.n	8005356 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800533e:	8b7b      	ldrh	r3, [r7, #26]
 8005340:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	8912      	ldrh	r2, [r2, #8]
 8005348:	fb02 f203 	mul.w	r2, r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	611a      	str	r2, [r3, #16]
 8005350:	e001      	b.n	8005356 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005352:	2301      	movs	r3, #1
 8005354:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800535e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	8912      	ldrh	r2, [r2, #8]
 8005364:	fb02 f203 	mul.w	r2, r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005376:	04d9      	lsls	r1, r3, #19
 8005378:	4b68      	ldr	r3, [pc, #416]	; (800551c <USB_HC_StartXfer+0x280>)
 800537a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800537c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	7a9b      	ldrb	r3, [r3, #10]
 8005382:	075b      	lsls	r3, r3, #29
 8005384:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005388:	69f9      	ldr	r1, [r7, #28]
 800538a:	0148      	lsls	r0, r1, #5
 800538c:	6a39      	ldr	r1, [r7, #32]
 800538e:	4401      	add	r1, r0
 8005390:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005394:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005396:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	460a      	mov	r2, r1
 80053b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	6a3a      	ldr	r2, [r7, #32]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	7e7b      	ldrb	r3, [r7, #25]
 80053fa:	075b      	lsls	r3, r3, #29
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	0148      	lsls	r0, r1, #5
 8005400:	6a39      	ldr	r1, [r7, #32]
 8005402:	4401      	add	r1, r0
 8005404:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a41      	ldr	r2, [pc, #260]	; (8005520 <USB_HC_StartXfer+0x284>)
 800541c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800541e:	4b40      	ldr	r3, [pc, #256]	; (8005520 <USB_HC_StartXfer+0x284>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005426:	4a3e      	ldr	r2, [pc, #248]	; (8005520 <USB_HC_StartXfer+0x284>)
 8005428:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	78db      	ldrb	r3, [r3, #3]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005432:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <USB_HC_StartXfer+0x284>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	4a39      	ldr	r2, [pc, #228]	; (8005520 <USB_HC_StartXfer+0x284>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e005      	b.n	800544c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005440:	4b37      	ldr	r3, [pc, #220]	; (8005520 <USB_HC_StartXfer+0x284>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005448:	4a35      	ldr	r2, [pc, #212]	; (8005520 <USB_HC_StartXfer+0x284>)
 800544a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <USB_HC_StartXfer+0x284>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005454:	4a32      	ldr	r2, [pc, #200]	; (8005520 <USB_HC_StartXfer+0x284>)
 8005456:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005464:	461a      	mov	r2, r3
 8005466:	4b2e      	ldr	r3, [pc, #184]	; (8005520 <USB_HC_StartXfer+0x284>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d14e      	bne.n	8005510 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	78db      	ldrb	r3, [r3, #3]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d14a      	bne.n	8005510 <USB_HC_StartXfer+0x274>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d046      	beq.n	8005510 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	79db      	ldrb	r3, [r3, #7]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d830      	bhi.n	80054ec <USB_HC_StartXfer+0x250>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <USB_HC_StartXfer+0x1f4>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054a1 	.word	0x080054a1
 800549c:	080054c5 	.word	0x080054c5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	3303      	adds	r3, #3
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054aa:	8afa      	ldrh	r2, [r7, #22]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d91c      	bls.n	80054f0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	619a      	str	r2, [r3, #24]
          }
          break;
 80054c2:	e015      	b.n	80054f0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	3303      	adds	r3, #3
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054ce:	8afa      	ldrh	r2, [r7, #22]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90a      	bls.n	80054f4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	619a      	str	r2, [r3, #24]
          }
          break;
 80054ea:	e003      	b.n	80054f4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <USB_HC_StartXfer+0x25a>
          break;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <USB_HC_StartXfer+0x25a>
          break;
 80054f4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	68d9      	ldr	r1, [r3, #12]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	785a      	ldrb	r2, [r3, #1]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	b298      	uxth	r0, r3
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4603      	mov	r3, r0
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff fb86 	bl	8004c1c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	1ff80000 	.word	0x1ff80000
 8005520:	20000308 	.word	0x20000308

08005524 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	b29b      	uxth	r3, r3
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005546:	b480      	push	{r7}
 8005548:	b087      	sub	sp, #28
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0c9b      	lsrs	r3, r3, #18
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <USB_HC_Halt+0x3a>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d16c      	bne.n	800565a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	440a      	add	r2, r1
 8005596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800559e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d143      	bne.n	8005634 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	440a      	add	r2, r1
 8005602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005606:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800560a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	3301      	adds	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005618:	d81d      	bhi.n	8005656 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005630:	d0ec      	beq.n	800560c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005632:	e080      	b.n	8005736 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	440a      	add	r2, r1
 800564a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800564e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005652:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005654:	e06f      	b.n	8005736 <USB_HC_Halt+0x1f0>
          break;
 8005656:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005658:	e06d      	b.n	8005736 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	440a      	add	r2, r1
 8005670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005678:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d143      	bne.n	8005712 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f6:	d81d      	bhi.n	8005734 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800570a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800570e:	d0ec      	beq.n	80056ea <USB_HC_Halt+0x1a4>
 8005710:	e011      	b.n	8005736 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	440a      	add	r2, r1
 8005728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e000      	b.n	8005736 <USB_HC_Halt+0x1f0>
          break;
 8005734:	bf00      	nop
    }
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005758:	2301      	movs	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	04da      	lsls	r2, r3, #19
 8005760:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <USB_DoPing+0x74>)
 8005762:	4013      	ands	r3, r2
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	440a      	add	r2, r1
 800576c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005774:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800578c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005794:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4413      	add	r3, r2
 800579e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a2:	461a      	mov	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	1ff80000 	.word	0x1ff80000

080057bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff f9a1 	bl	8004b14 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80057d2:	2110      	movs	r1, #16
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff f9d9 	bl	8004b8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff f9fc 	bl	8004bd8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e01f      	b.n	8005826 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005804:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800580c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	461a      	mov	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	3301      	adds	r3, #1
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b0f      	cmp	r3, #15
 800582a:	d9dc      	bls.n	80057e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	e034      	b.n	800589c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005848:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005850:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005858:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	3301      	adds	r3, #1
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005878:	d80c      	bhi.n	8005894 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800588c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005890:	d0ec      	beq.n	800586c <USB_StopHost+0xb0>
 8005892:	e000      	b.n	8005896 <USB_StopHost+0xda>
        break;
 8005894:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3301      	adds	r3, #1
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d9c7      	bls.n	8005832 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 33ff 	mov.w	r3, #4294967295
 80058ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff f91a 	bl	8004af2 <USB_EnableGlobalInt>

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af04      	add	r7, sp, #16
 80058ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80058d0:	2302      	movs	r3, #2
 80058d2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80058d4:	2301      	movs	r3, #1
 80058d6:	2202      	movs	r2, #2
 80058d8:	2102      	movs	r1, #2
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fc8c 	bl	80061f8 <USBH_FindInterface>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	2bff      	cmp	r3, #255	; 0xff
 80058e8:	f000 812a 	beq.w	8005b40 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc65 	bl	80061c0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80058fc:	2050      	movs	r0, #80	; 0x50
 80058fe:	f004 fd11 	bl	800a324 <malloc>
 8005902:	4603      	mov	r3, r0
 8005904:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	211a      	movs	r1, #26
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	4413      	add	r3, r2
 800591c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b25b      	sxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	da15      	bge.n	8005954 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	211a      	movs	r1, #26
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	4413      	add	r3, r2
 8005934:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	211a      	movs	r1, #26
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	4413      	add	r3, r2
 800594a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 ff2f 	bl	80077be <USBH_AllocPipe>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	7819      	ldrb	r1, [r3, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	7858      	ldrb	r0, [r3, #1]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	8952      	ldrh	r2, [r2, #10]
 8005980:	9202      	str	r2, [sp, #8]
 8005982:	2203      	movs	r2, #3
 8005984:	9201      	str	r2, [sp, #4]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4623      	mov	r3, r4
 800598a:	4602      	mov	r2, r0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fee7 	bl	8007760 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f004 fc12 	bl	800a1c4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80059a0:	2300      	movs	r3, #0
 80059a2:	2200      	movs	r2, #0
 80059a4:	210a      	movs	r1, #10
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fc26 	bl	80061f8 <USBH_FindInterface>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2bff      	cmp	r3, #255	; 0xff
 80059b4:	f000 80c4 	beq.w	8005b40 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	211a      	movs	r1, #26
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b25b      	sxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da16      	bge.n	80059fe <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	211a      	movs	r1, #26
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	211a      	movs	r1, #26
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	835a      	strh	r2, [r3, #26]
 80059fc:	e015      	b.n	8005a2a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	211a      	movs	r1, #26
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	211a      	movs	r1, #26
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005a24:	881a      	ldrh	r2, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	211a      	movs	r1, #26
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da16      	bge.n	8005a70 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	211a      	movs	r1, #26
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	211a      	movs	r1, #26
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	835a      	strh	r2, [r3, #26]
 8005a6e:	e015      	b.n	8005a9c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	211a      	movs	r1, #26
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	211a      	movs	r1, #26
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005a96:	881a      	ldrh	r2, [r3, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	7b9b      	ldrb	r3, [r3, #14]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fe8b 	bl	80077be <USBH_AllocPipe>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	7bdb      	ldrb	r3, [r3, #15]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fe81 	bl	80077be <USBH_AllocPipe>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	7b59      	ldrb	r1, [r3, #13]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	7b98      	ldrb	r0, [r3, #14]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	8b12      	ldrh	r2, [r2, #24]
 8005adc:	9202      	str	r2, [sp, #8]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	9201      	str	r2, [sp, #4]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 fe39 	bl	8007760 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	7b19      	ldrb	r1, [r3, #12]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	7bd8      	ldrb	r0, [r3, #15]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	8b52      	ldrh	r2, [r2, #26]
 8005b06:	9202      	str	r2, [sp, #8]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	9201      	str	r2, [sp, #4]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	4623      	mov	r3, r4
 8005b10:	4602      	mov	r2, r0
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f001 fe24 	bl	8007760 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	7b5b      	ldrb	r3, [r3, #13]
 8005b24:	2200      	movs	r2, #0
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f004 fb4b 	bl	800a1c4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	7b1b      	ldrb	r3, [r3, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f004 fb44 	bl	800a1c4 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}

08005b4a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00e      	beq.n	8005b82 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 fe17 	bl	800779e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fe3f 	bl	80077fa <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	7b1b      	ldrb	r3, [r3, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	7b1b      	ldrb	r3, [r3, #12]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fe04 	bl	800779e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	7b1b      	ldrb	r3, [r3, #12]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 fe2c 	bl	80077fa <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	7b5b      	ldrb	r3, [r3, #13]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	7b5b      	ldrb	r3, [r3, #13]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 fdf1 	bl	800779e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	7b5b      	ldrb	r3, [r3, #13]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 fe19 	bl	80077fa <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00b      	beq.n	8005bf2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f004 fba6 	bl	800a334 <free>
    phost->pActiveClass->pData = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bee:	2200      	movs	r2, #0
 8005bf0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005c04:	2302      	movs	r3, #2
 8005c06:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3340      	adds	r3, #64	; 0x40
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8b2 	bl	8005d82 <GetLineCoding>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c2e:	2102      	movs	r1, #2
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4798      	blx	r3
  }
  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d877      	bhi.n	8005d54 <USBH_CDC_Process+0x114>
 8005c64:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USBH_CDC_Process+0x2c>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005c81 	.word	0x08005c81
 8005c70:	08005c87 	.word	0x08005c87
 8005c74:	08005cb7 	.word	0x08005cb7
 8005c78:	08005d2b 	.word	0x08005d2b
 8005c7c:	08005d39 	.word	0x08005d39
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	73fb      	strb	r3, [r7, #15]
    break;
 8005c84:	e06d      	b.n	8005d62 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f897 	bl	8005dc0 <SetLineCoding>
 8005c92:	4603      	mov	r3, r0
 8005c94:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005ca4:	e058      	b.n	8005d58 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d055      	beq.n	8005d58 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005cb4:	e050      	b.n	8005d58 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3340      	adds	r3, #64	; 0x40
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f860 	bl	8005d82 <GetLineCoding>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d126      	bne.n	8005d1a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cde:	791b      	ldrb	r3, [r3, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d13b      	bne.n	8005d5c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cee:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d133      	bne.n	8005d5c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d12b      	bne.n	8005d5c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d124      	bne.n	8005d5c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f984 	bl	8006020 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005d18:	e020      	b.n	8005d5c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d01d      	beq.n	8005d5c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2204      	movs	r2, #4
 8005d24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005d28:	e018      	b.n	8005d5c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f867 	bl	8005dfe <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8f8 	bl	8005f26 <CDC_ProcessReception>
    break;
 8005d36:	e014      	b.n	8005d62 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005d38:	2100      	movs	r1, #0
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fffa 	bl	8006d34 <USBH_ClrFeature>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005d52:	e005      	b.n	8005d60 <USBH_CDC_Process+0x120>

  default:
    break;
 8005d54:	bf00      	nop
 8005d56:	e004      	b.n	8005d62 <USBH_CDC_Process+0x122>
    break;
 8005d58:	bf00      	nop
 8005d5a:	e002      	b.n	8005d62 <USBH_CDC_Process+0x122>
    break;
 8005d5c:	bf00      	nop
 8005d5e:	e000      	b.n	8005d62 <USBH_CDC_Process+0x122>
    break;
 8005d60:	bf00      	nop

  }

  return status;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	22a1      	movs	r2, #161	; 0xa1
 8005d90:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2221      	movs	r2, #33	; 0x21
 8005d96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2207      	movs	r2, #7
 8005da8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2207      	movs	r2, #7
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f99f 	bl	80070f4 <USBH_CtlReq>
 8005db6:	4603      	mov	r3, r0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2221      	movs	r2, #33	; 0x21
 8005dce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2207      	movs	r2, #7
 8005de6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2207      	movs	r2, #7
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 f980 	bl	80070f4 <USBH_CtlReq>
 8005df4:	4603      	mov	r3, r0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d002      	beq.n	8005e24 <CDC_ProcessTransmission+0x26>
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d025      	beq.n	8005e6e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005e22:	e07c      	b.n	8005f1e <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	8b12      	ldrh	r2, [r2, #24]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d90c      	bls.n	8005e4a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	69d9      	ldr	r1, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8b1a      	ldrh	r2, [r3, #24]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	7b58      	ldrb	r0, [r3, #13]
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fc49 	bl	80076da <USBH_BulkSendData>
 8005e48:	e00c      	b.n	8005e64 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	7b58      	ldrb	r0, [r3, #13]
 8005e58:	2301      	movs	r3, #1
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fc3b 	bl	80076da <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005e6c:	e057      	b.n	8005f1e <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	7b5b      	ldrb	r3, [r3, #13]
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f004 f97b 	bl	800a170 <USBH_LL_GetURBState>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d136      	bne.n	8005ef2 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	8b12      	ldrh	r2, [r2, #24]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d90e      	bls.n	8005eae <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	8b12      	ldrh	r2, [r2, #24]
 8005e98:	1a9a      	subs	r2, r3, r2
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	8b12      	ldrh	r2, [r2, #24]
 8005ea6:	441a      	add	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]
 8005eac:	e002      	b.n	8005eb4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005ec4:	e006      	b.n	8005ed4 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f892 	bl	8005ff8 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4619      	mov	r1, r3
 8005eec:	f001 fd7e 	bl	80079ec <osMessagePut>
    break;
 8005ef0:	e014      	b.n	8005f1c <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8005ef2:	7afb      	ldrb	r3, [r7, #11]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d111      	bne.n	8005f1c <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2204      	movs	r2, #4
 8005f04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f14:	2200      	movs	r2, #0
 8005f16:	4619      	mov	r1, r3
 8005f18:	f001 fd68 	bl	80079ec <osMessagePut>
    break;
 8005f1c:	bf00      	nop
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d002      	beq.n	8005f4c <CDC_ProcessReception+0x26>
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d00e      	beq.n	8005f68 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005f4a:	e051      	b.n	8005ff0 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	6a19      	ldr	r1, [r3, #32]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	8b5a      	ldrh	r2, [r3, #26]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	7b1b      	ldrb	r3, [r3, #12]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fbe3 	bl	8007724 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2204      	movs	r2, #4
 8005f62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005f66:	e043      	b.n	8005ff0 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	7b1b      	ldrb	r3, [r3, #12]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f004 f8fe 	bl	800a170 <USBH_LL_GetURBState>
 8005f74:	4603      	mov	r3, r0
 8005f76:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d137      	bne.n	8005fee <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	7b1b      	ldrb	r3, [r3, #12]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f004 f861 	bl	800a04c <USBH_LL_GetLastXferSize>
 8005f8a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d016      	beq.n	8005fc4 <CDC_ProcessReception+0x9e>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	8b5b      	ldrh	r3, [r3, #26]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d910      	bls.n	8005fc4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a1a      	ldr	r2, [r3, #32]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005fc2:	e006      	b.n	8005fd2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f81d 	bl	800600c <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f001 fcff 	bl	80079ec <osMessagePut>
    break;
 8005fee:	bf00      	nop
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006034:	b5b0      	push	{r4, r5, r7, lr}
 8006036:	b090      	sub	sp, #64	; 0x40
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006048:	2302      	movs	r3, #2
 800604a:	e03d      	b.n	80060c8 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	79fa      	ldrb	r2, [r7, #7]
 8006050:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f837 	bl	80060d8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <USBH_Init+0x9c>)
 800607a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800607e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8006084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f001 fc85 	bl	800799a <osMessageCreate>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006098:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <USBH_Init+0xa0>)
 800609a:	f107 0414 	add.w	r4, r7, #20
 800609e:	461d      	mov	r5, r3
 80060a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80060ac:	f107 0314 	add.w	r3, r7, #20
 80060b0:	68f9      	ldr	r1, [r7, #12]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fc11 	bl	80078da <osThreadCreate>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f003 ff11 	bl	8009ee8 <USBH_LL_Init>

  return USBH_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3740      	adds	r7, #64	; 0x40
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bdb0      	pop	{r4, r5, r7, pc}
 80060d0:	0800a524 	.word	0x0800a524
 80060d4:	0800a540 	.word	0x0800a540

080060d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80060e4:	e008      	b.n	80060f8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	32e0      	adds	r2, #224	; 0xe0
 80060ec:	2100      	movs	r1, #0
 80060ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b0e      	cmp	r3, #14
 80060fc:	d9f3      	bls.n	80060e6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e009      	b.n	8006118 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611e:	d3f1      	bcc.n	8006104 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2240      	movs	r2, #64	; 0x40
 8006144:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d017      	beq.n	80061ae <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10f      	bne.n	80061a8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800618e:	1c59      	adds	r1, r3, #1
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	33dc      	adds	r3, #220	; 0xdc
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
 80061a6:	e004      	b.n	80061b2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80061a8:	2302      	movs	r3, #2
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	e001      	b.n	80061b2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80061ae:	2302      	movs	r3, #2
 80061b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d204      	bcs.n	80061e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80061e4:	e001      	b.n	80061ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80061e6:	2302      	movs	r3, #2
 80061e8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4603      	mov	r3, r0
 8006208:	70fb      	strb	r3, [r7, #3]
 800620a:	460b      	mov	r3, r1
 800620c:	70bb      	strb	r3, [r7, #2]
 800620e:	4613      	mov	r3, r2
 8006210:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006220:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006222:	e025      	b.n	8006270 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	221a      	movs	r2, #26
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	3308      	adds	r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	3302      	adds	r3, #2
 8006234:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	795b      	ldrb	r3, [r3, #5]
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <USBH_FindInterface+0x4e>
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	2bff      	cmp	r3, #255	; 0xff
 8006244:	d111      	bne.n	800626a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800624a:	78ba      	ldrb	r2, [r7, #2]
 800624c:	429a      	cmp	r2, r3
 800624e:	d002      	beq.n	8006256 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006250:	78bb      	ldrb	r3, [r7, #2]
 8006252:	2bff      	cmp	r3, #255	; 0xff
 8006254:	d109      	bne.n	800626a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800625a:	787a      	ldrb	r2, [r7, #1]
 800625c:	429a      	cmp	r2, r3
 800625e:	d002      	beq.n	8006266 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006260:	787b      	ldrb	r3, [r7, #1]
 8006262:	2bff      	cmp	r3, #255	; 0xff
 8006264:	d101      	bne.n	800626a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	e006      	b.n	8006278 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	3301      	adds	r3, #1
 800626e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d9d6      	bls.n	8006224 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006276:	23ff      	movs	r3, #255	; 0xff
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f003 fe67 	bl	8009f60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006292:	2101      	movs	r1, #1
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f003 ff7e 	bl	800a196 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80062ac:	2302      	movs	r3, #2
 80062ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fb7e 	bl	80069b6 <USBH_IsPortEnabled>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10c      	bne.n	80062da <USBH_Process+0x36>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d002      	beq.n	80062da <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2203      	movs	r2, #3
 80062d8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b0b      	cmp	r3, #11
 80062e2:	f200 81ab 	bhi.w	800663c <USBH_Process+0x398>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <USBH_Process+0x48>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	0800635b 	.word	0x0800635b
 80062f4:	0800636f 	.word	0x0800636f
 80062f8:	08006617 	.word	0x08006617
 80062fc:	0800663d 	.word	0x0800663d
 8006300:	08006419 	.word	0x08006419
 8006304:	080065b1 	.word	0x080065b1
 8006308:	08006449 	.word	0x08006449
 800630c:	08006485 	.word	0x08006485
 8006310:	080064bf 	.word	0x080064bf
 8006314:	08006507 	.word	0x08006507
 8006318:	080065ff 	.word	0x080065ff
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 818b 	beq.w	8006640 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006330:	20c8      	movs	r0, #200	; 0xc8
 8006332:	f003 ff7a 	bl	800a22a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f003 fe6d 	bl	800a016 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006350:	2200      	movs	r2, #0
 8006352:	4619      	mov	r1, r3
 8006354:	f001 fb4a 	bl	80079ec <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006358:	e172      	b.n	8006640 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006360:	2b01      	cmp	r3, #1
 8006362:	f040 816f 	bne.w	8006644 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800636c:	e16a      	b.n	8006644 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800636e:	2064      	movs	r0, #100	; 0x64
 8006370:	f003 ff5b 	bl	800a22a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f003 fe29 	bl	8009fcc <USBH_LL_GetSpeed>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2205      	movs	r2, #5
 8006388:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800638a:	2100      	movs	r1, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 fa16 	bl	80077be <USBH_AllocPipe>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fa0e 	bl	80077be <USBH_AllocPipe>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461a      	mov	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7919      	ldrb	r1, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80063be:	b292      	uxth	r2, r2
 80063c0:	9202      	str	r2, [sp, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	9201      	str	r2, [sp, #4]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	4603      	mov	r3, r0
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f9c7 	bl	8007760 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7959      	ldrb	r1, [r3, #5]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80063e6:	b292      	uxth	r2, r2
 80063e8:	9202      	str	r2, [sp, #8]
 80063ea:	2200      	movs	r2, #0
 80063ec:	9201      	str	r2, [sp, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	4603      	mov	r3, r0
 80063f2:	2200      	movs	r2, #0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f9b3 	bl	8007760 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800640e:	2200      	movs	r2, #0
 8006410:	4619      	mov	r1, r3
 8006412:	f001 faeb 	bl	80079ec <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006416:	e120      	b.n	800665a <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f923 	bl	8006664 <USBH_HandleEnum>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8111 	bne.w	8006648 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006434:	2b01      	cmp	r3, #1
 8006436:	d103      	bne.n	8006440 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2208      	movs	r2, #8
 800643c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800643e:	e103      	b.n	8006648 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2207      	movs	r2, #7
 8006444:	701a      	strb	r2, [r3, #0]
    break;
 8006446:	e0ff      	b.n	8006648 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80fc 	beq.w	800664c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800645a:	2101      	movs	r1, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2208      	movs	r2, #8
 8006464:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2205      	movs	r2, #5
 800646a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800647a:	2200      	movs	r2, #0
 800647c:	4619      	mov	r1, r3
 800647e:	f001 fab5 	bl	80079ec <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006482:	e0e3      	b.n	800664c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800648a:	b29b      	uxth	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fc09 	bl	8006ca6 <USBH_SetCfg>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2209      	movs	r2, #9
 800649e:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064b4:	2200      	movs	r2, #0
 80064b6:	4619      	mov	r1, r3
 80064b8:	f001 fa98 	bl	80079ec <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80064bc:	e0cd      	b.n	800665a <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80064cc:	2101      	movs	r1, #1
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fc0c 	bl	8006cec <USBH_SetFeature>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	220a      	movs	r2, #10
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e002      	b.n	80064e8 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	220a      	movs	r2, #10
 80064e6:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064fc:	2200      	movs	r2, #0
 80064fe:	4619      	mov	r1, r3
 8006500:	f001 fa74 	bl	80079ec <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006504:	e0a9      	b.n	800665a <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d040      	beq.n	8006592 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e017      	b.n	800654e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	33dc      	adds	r3, #220	; 0xdc
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	791a      	ldrb	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006532:	429a      	cmp	r2, r3
 8006534:	d108      	bne.n	8006548 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	33dc      	adds	r3, #220	; 0xdc
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	3301      	adds	r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0e4      	beq.n	800651e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2206      	movs	r2, #6
 8006574:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800657c:	2103      	movs	r1, #3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
 8006582:	e006      	b.n	8006592 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	220d      	movs	r2, #13
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e002      	b.n	8006592 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	220d      	movs	r2, #13
 8006590:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065a6:	2200      	movs	r2, #0
 80065a8:	4619      	mov	r1, r3
 80065aa:	f001 fa1f 	bl	80079ec <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80065ae:	e054      	b.n	800665a <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00f      	beq.n	80065da <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d13e      	bne.n	8006650 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	220b      	movs	r2, #11
 80065d6:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80065d8:	e03a      	b.n	8006650 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	220d      	movs	r2, #13
 80065de:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2205      	movs	r2, #5
 80065e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065f4:	2200      	movs	r2, #0
 80065f6:	4619      	mov	r1, r3
 80065f8:	f001 f9f8 	bl	80079ec <osMessagePut>
    break;
 80065fc:	e028      	b.n	8006650 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006604:	2b00      	cmp	r3, #0
 8006606:	d025      	beq.n	8006654 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
    }
    break;
 8006614:	e01e      	b.n	8006654 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff fd5e 	bl	80060d8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006622:	2b00      	cmp	r3, #0
 8006624:	d018      	beq.n	8006658 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800663a:	e00d      	b.n	8006658 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800663c:	bf00      	nop
 800663e:	e00c      	b.n	800665a <USBH_Process+0x3b6>
    break;
 8006640:	bf00      	nop
 8006642:	e00a      	b.n	800665a <USBH_Process+0x3b6>
    break;
 8006644:	bf00      	nop
 8006646:	e008      	b.n	800665a <USBH_Process+0x3b6>
    break;
 8006648:	bf00      	nop
 800664a:	e006      	b.n	800665a <USBH_Process+0x3b6>
    break;
 800664c:	bf00      	nop
 800664e:	e004      	b.n	800665a <USBH_Process+0x3b6>
    break;
 8006650:	bf00      	nop
 8006652:	e002      	b.n	800665a <USBH_Process+0x3b6>
    break;
 8006654:	bf00      	nop
 8006656:	e000      	b.n	800665a <USBH_Process+0x3b6>
    break;
 8006658:	bf00      	nop
  }
 return USBH_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af04      	add	r7, sp, #16
 800666a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b07      	cmp	r3, #7
 8006676:	f200 8132 	bhi.w	80068de <USBH_HandleEnum+0x27a>
 800667a:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <USBH_HandleEnum+0x1c>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066a1 	.word	0x080066a1
 8006684:	08006713 	.word	0x08006713
 8006688:	0800672b 	.word	0x0800672b
 800668c:	080067a1 	.word	0x080067a1
 8006690:	080067b9 	.word	0x080067b9
 8006694:	080067d7 	.word	0x080067d7
 8006698:	08006843 	.word	0x08006843
 800669c:	08006893 	.word	0x08006893
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80066a0:	2108      	movs	r1, #8
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa2f 	bl	8006b06 <USBH_Get_DevDesc>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 8119 	bne.w	80068e2 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7919      	ldrb	r1, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80066d4:	b292      	uxth	r2, r2
 80066d6:	9202      	str	r2, [sp, #8]
 80066d8:	2200      	movs	r2, #0
 80066da:	9201      	str	r2, [sp, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4603      	mov	r3, r0
 80066e0:	2280      	movs	r2, #128	; 0x80
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 f83c 	bl	8007760 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7959      	ldrb	r1, [r3, #5]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80066fc:	b292      	uxth	r2, r2
 80066fe:	9202      	str	r2, [sp, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	9201      	str	r2, [sp, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	4603      	mov	r3, r0
 8006708:	2200      	movs	r2, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 f828 	bl	8007760 <USBH_OpenPipe>

    }
    break;
 8006710:	e0e7      	b.n	80068e2 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006712:	2112      	movs	r1, #18
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f9f6 	bl	8006b06 <USBH_Get_DevDesc>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 80e2 	bne.w	80068e6 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2202      	movs	r2, #2
 8006726:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006728:	e0dd      	b.n	80068e6 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800672a:	2101      	movs	r1, #1
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa96 	bl	8006c5e <USBH_SetAddress>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 80d8 	bne.w	80068ea <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800673a:	2002      	movs	r0, #2
 800673c:	f003 fd75 	bl	800a22a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2203      	movs	r2, #3
 800674c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7919      	ldrb	r1, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006762:	b292      	uxth	r2, r2
 8006764:	9202      	str	r2, [sp, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	9201      	str	r2, [sp, #4]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	2280      	movs	r2, #128	; 0x80
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fff5 	bl	8007760 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7959      	ldrb	r1, [r3, #5]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800678a:	b292      	uxth	r2, r2
 800678c:	9202      	str	r2, [sp, #8]
 800678e:	2200      	movs	r2, #0
 8006790:	9201      	str	r2, [sp, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	4603      	mov	r3, r0
 8006796:	2200      	movs	r2, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 ffe1 	bl	8007760 <USBH_OpenPipe>
    }
    break;
 800679e:	e0a4      	b.n	80068ea <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80067a0:	2109      	movs	r1, #9
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9d7 	bl	8006b56 <USBH_Get_CfgDesc>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 809f 	bne.w	80068ee <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2204      	movs	r2, #4
 80067b4:	705a      	strb	r2, [r3, #1]
    }
    break;
 80067b6:	e09a      	b.n	80068ee <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f9c8 	bl	8006b56 <USBH_Get_CfgDesc>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f040 8092 	bne.w	80068f2 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2205      	movs	r2, #5
 80067d2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80067d4:	e08d      	b.n	80068f2 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01e      	beq.n	800681e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80067ec:	23ff      	movs	r3, #255	; 0xff
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f9d5 	bl	8006b9e <USBH_Get_StringDesc>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d17d      	bne.n	80068f6 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2206      	movs	r2, #6
 80067fe:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2205      	movs	r2, #5
 8006804:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006814:	2200      	movs	r2, #0
 8006816:	4619      	mov	r1, r3
 8006818:	f001 f8e8 	bl	80079ec <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800681c:	e06b      	b.n	80068f6 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2206      	movs	r2, #6
 8006822:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2205      	movs	r2, #5
 8006828:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006838:	2200      	movs	r2, #0
 800683a:	4619      	mov	r1, r3
 800683c:	f001 f8d6 	bl	80079ec <osMessagePut>
    break;
 8006840:	e059      	b.n	80068f6 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006858:	23ff      	movs	r3, #255	; 0xff
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f99f 	bl	8006b9e <USBH_Get_StringDesc>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d149      	bne.n	80068fa <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2207      	movs	r2, #7
 800686a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800686c:	e045      	b.n	80068fa <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2207      	movs	r2, #7
 8006872:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2205      	movs	r2, #5
 8006878:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006888:	2200      	movs	r2, #0
 800688a:	4619      	mov	r1, r3
 800688c:	f001 f8ae 	bl	80079ec <osMessagePut>
    break;
 8006890:	e033      	b.n	80068fa <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00f      	beq.n	80068bc <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80068a8:	23ff      	movs	r3, #255	; 0xff
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f977 	bl	8006b9e <USBH_Get_StringDesc>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d123      	bne.n	80068fe <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80068ba:	e020      	b.n	80068fe <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2205      	movs	r2, #5
 80068c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068d4:	2200      	movs	r2, #0
 80068d6:	4619      	mov	r1, r3
 80068d8:	f001 f888 	bl	80079ec <osMessagePut>
    break;
 80068dc:	e00f      	b.n	80068fe <USBH_HandleEnum+0x29a>

  default:
    break;
 80068de:	bf00      	nop
 80068e0:	e00e      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068e2:	bf00      	nop
 80068e4:	e00c      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068e6:	bf00      	nop
 80068e8:	e00a      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068ea:	bf00      	nop
 80068ec:	e008      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068ee:	bf00      	nop
 80068f0:	e006      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068f2:	bf00      	nop
 80068f4:	e004      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068f6:	bf00      	nop
 80068f8:	e002      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <USBH_HandleEnum+0x29c>
    break;
 80068fe:	bf00      	nop
  }
  return Status;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop

0800690c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f804 	bl	800694e <USBH_HandleSof>
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b0b      	cmp	r3, #11
 800695e:	d10a      	bne.n	8006976 <USBH_HandleSof+0x28>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
  }
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800698e:	bf00      	nop
}
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80069aa:	bf00      	nop
}
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069fa:	2104      	movs	r1, #4
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	e007      	b.n	8006a12 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d102      	bne.n	8006a12 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a26:	2200      	movs	r2, #0
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f000 ffdf 	bl	80079ec <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f003 faa8 	bl	8009f96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	791b      	ldrb	r3, [r3, #4]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fed4 	bl	80077fa <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	795b      	ldrb	r3, [r3, #5]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fece 	bl	80077fa <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a76:	2105      	movs	r1, #5
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f003 fa6f 	bl	8009f60 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2203      	movs	r2, #3
 8006a86:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f000 ffa4 	bl	80079ec <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b086      	sub	sp, #24
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 ffd1 	bl	8007a6c <osMessageGet>
    if(event.status == osEventMessage)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d1f2      	bne.n	8006ab6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fbe7 	bl	80062a4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006ad6:	e7ee      	b.n	8006ab6 <USBH_Process_OS+0x8>

08006ad8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006af4:	2200      	movs	r2, #0
 8006af6:	4619      	mov	r1, r3
 8006af8:	f000 ff78 	bl	80079ec <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af02      	add	r7, sp, #8
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b24:	2100      	movs	r1, #0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f864 	bl	8006bf4 <USBH_GetDescriptor>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	b292      	uxth	r2, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	f000 f918 	bl	8006d7c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af02      	add	r7, sp, #8
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	331c      	adds	r3, #28
 8006b66:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006b68:	887b      	ldrh	r3, [r7, #2]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f83d 	bl	8006bf4 <USBH_GetDescriptor>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	72fb      	strb	r3, [r7, #11]
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d107      	bne.n	8006b94 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006b8a:	887a      	ldrh	r2, [r7, #2]
 8006b8c:	68f9      	ldr	r1, [r7, #12]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f964 	bl	8006e5c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b088      	sub	sp, #32
 8006ba2:	af02      	add	r7, sp, #8
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	460b      	mov	r3, r1
 8006bac:	72fb      	strb	r3, [r7, #11]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bba:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006bc2:	893b      	ldrh	r3, [r7, #8]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	2100      	movs	r1, #0
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f812 	bl	8006bf4 <USBH_GetDescriptor>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d107      	bne.n	8006bea <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006be0:	893a      	ldrh	r2, [r7, #8]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fa37 	bl	8007058 <USBH_ParseStringDesc>
  }
  return status;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	72fb      	strb	r3, [r7, #11]
 8006c02:	4613      	mov	r3, r2
 8006c04:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	789b      	ldrb	r3, [r3, #2]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11c      	bne.n	8006c48 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2206      	movs	r2, #6
 8006c1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	893a      	ldrh	r2, [r7, #8]
 8006c24:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006c26:	893b      	ldrh	r3, [r7, #8]
 8006c28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c30:	d104      	bne.n	8006c3c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f240 4209 	movw	r2, #1033	; 0x409
 8006c38:	829a      	strh	r2, [r3, #20]
 8006c3a:	e002      	b.n	8006c42 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8b3a      	ldrh	r2, [r7, #24]
 8006c46:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006c48:	8b3b      	ldrh	r3, [r7, #24]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fa50 	bl	80070f4 <USBH_CtlReq>
 8006c54:	4603      	mov	r3, r0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	789b      	ldrb	r3, [r3, #2]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10f      	bne.n	8006c92 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa2c 	bl	80070f4 <USBH_CtlReq>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	789b      	ldrb	r3, [r3, #2]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10e      	bne.n	8006cd8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2209      	movs	r2, #9
 8006cc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	887a      	ldrh	r2, [r7, #2]
 8006cca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa09 	bl	80070f4 <USBH_CtlReq>
 8006ce2:	4603      	mov	r3, r0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	789b      	ldrb	r3, [r3, #2]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10f      	bne.n	8006d20 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9e5 	bl	80070f4 <USBH_CtlReq>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	789b      	ldrb	r3, [r3, #2]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d10f      	bne.n	8006d68 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006d5a:	78fb      	ldrb	r3, [r7, #3]
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f9c1 	bl	80070f4 <USBH_CtlReq>
 8006d72:	4603      	mov	r3, r0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	781a      	ldrb	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	785a      	ldrb	r2, [r3, #1]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	3303      	adds	r3, #3
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	791a      	ldrb	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	795a      	ldrb	r2, [r3, #5]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	799a      	ldrb	r2, [r3, #6]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	79da      	ldrb	r2, [r3, #7]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d939      	bls.n	8006e50 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	3308      	adds	r3, #8
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	3309      	adds	r3, #9
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	330a      	adds	r3, #10
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	330b      	adds	r3, #11
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	330c      	adds	r3, #12
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	330d      	adds	r3, #13
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	7b9a      	ldrb	r2, [r3, #14]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	7bda      	ldrb	r2, [r3, #15]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	7c1a      	ldrb	r2, [r3, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	7c5a      	ldrb	r2, [r3, #17]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	745a      	strb	r2, [r3, #17]
  }
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	785a      	ldrb	r2, [r3, #1]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	3302      	adds	r3, #2
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3303      	adds	r3, #3
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	791a      	ldrb	r2, [r3, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	795a      	ldrb	r2, [r3, #5]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	799a      	ldrb	r2, [r3, #6]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	79da      	ldrb	r2, [r3, #7]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	7a1a      	ldrb	r2, [r3, #8]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b09      	cmp	r3, #9
 8006ed6:	d95f      	bls.n	8006f98 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006ed8:	2309      	movs	r3, #9
 8006eda:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ee0:	e051      	b.n	8006f86 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ee2:	f107 0316 	add.w	r3, r7, #22
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eea:	f000 f8e8 	bl	80070be <USBH_GetNextDesc>
 8006eee:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d146      	bne.n	8006f86 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006efc:	221a      	movs	r2, #26
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
 8006f02:	3308      	adds	r3, #8
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	3302      	adds	r3, #2
 8006f0a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f0e:	69f8      	ldr	r0, [r7, #28]
 8006f10:	f000 f846 	bl	8006fa0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f1e:	e022      	b.n	8006f66 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006f20:	f107 0316 	add.w	r3, r7, #22
 8006f24:	4619      	mov	r1, r3
 8006f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f28:	f000 f8c9 	bl	80070be <USBH_GetNextDesc>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d117      	bne.n	8006f66 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f3a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006f3e:	3201      	adds	r2, #1
 8006f40:	00d2      	lsls	r2, r2, #3
 8006f42:	211a      	movs	r1, #26
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	4413      	add	r3, r2
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	3304      	adds	r3, #4
 8006f52:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f56:	69b8      	ldr	r0, [r7, #24]
 8006f58:	f000 f851 	bl	8006ffe <USBH_ParseEPDesc>
            ep_ix++;
 8006f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f60:	3301      	adds	r3, #1
 8006f62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d204      	bcs.n	8006f7c <USBH_ParseCfgDesc+0x120>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	885a      	ldrh	r2, [r3, #2]
 8006f76:	8afb      	ldrh	r3, [r7, #22]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d8d1      	bhi.n	8006f20 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f80:	3301      	adds	r3, #1
 8006f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d804      	bhi.n	8006f98 <USBH_ParseCfgDesc+0x13c>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	885a      	ldrh	r2, [r3, #2]
 8006f92:	8afb      	ldrh	r3, [r7, #22]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d8a4      	bhi.n	8006ee2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006f98:	bf00      	nop
 8006f9a:	3728      	adds	r7, #40	; 0x28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785a      	ldrb	r2, [r3, #1]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	789a      	ldrb	r2, [r3, #2]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	78da      	ldrb	r2, [r3, #3]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	791a      	ldrb	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	795a      	ldrb	r2, [r3, #5]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	799a      	ldrb	r2, [r3, #6]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	79da      	ldrb	r2, [r3, #7]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	7a1a      	ldrb	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	721a      	strb	r2, [r3, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	785a      	ldrb	r2, [r3, #1]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	789a      	ldrb	r2, [r3, #2]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	78da      	ldrb	r2, [r3, #3]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	3304      	adds	r3, #4
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b29a      	uxth	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	3305      	adds	r3, #5
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	b29b      	uxth	r3, r3
 800703c:	4313      	orrs	r3, r2
 800703e:	b29a      	uxth	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	799a      	ldrb	r2, [r3, #6]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	719a      	strb	r2, [r3, #6]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b03      	cmp	r3, #3
 800706e:	d120      	bne.n	80070b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	1e9a      	subs	r2, r3, #2
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	4293      	cmp	r3, r2
 800707a:	bf28      	it	cs
 800707c:	4613      	movcs	r3, r2
 800707e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3302      	adds	r3, #2
 8007084:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007086:	2300      	movs	r3, #0
 8007088:	82fb      	strh	r3, [r7, #22]
 800708a:	e00b      	b.n	80070a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800708c:	8afb      	ldrh	r3, [r7, #22]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	3301      	adds	r3, #1
 800709c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800709e:	8afb      	ldrh	r3, [r7, #22]
 80070a0:	3302      	adds	r3, #2
 80070a2:	82fb      	strh	r3, [r7, #22]
 80070a4:	8afa      	ldrh	r2, [r7, #22]
 80070a6:	8abb      	ldrh	r3, [r7, #20]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3ef      	bcc.n	800708c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
  }
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	881a      	ldrh	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	4413      	add	r3, r2
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4413      	add	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007102:	2301      	movs	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	789b      	ldrb	r3, [r3, #2]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d002      	beq.n	8007114 <USBH_CtlReq+0x20>
 800710e:	2b02      	cmp	r3, #2
 8007110:	d01d      	beq.n	800714e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8007112:	e042      	b.n	800719a <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	88fa      	ldrh	r2, [r7, #6]
 800711e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2202      	movs	r2, #2
 800712a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2203      	movs	r2, #3
 8007134:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007144:	2200      	movs	r2, #0
 8007146:	4619      	mov	r1, r3
 8007148:	f000 fc50 	bl	80079ec <osMessagePut>
    break;
 800714c:	e025      	b.n	800719a <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f828 	bl	80071a4 <USBH_HandleControl>
 8007154:	4603      	mov	r3, r0
 8007156:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d108      	bne.n	8007170 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	75fb      	strb	r3, [r7, #23]
    break;
 800716e:	e013      	b.n	8007198 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d108      	bne.n	8007188 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007182:	2303      	movs	r3, #3
 8007184:	75fb      	strb	r3, [r7, #23]
    break;
 8007186:	e007      	b.n	8007198 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d104      	bne.n	8007198 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007194:	2302      	movs	r3, #2
 8007196:	75fb      	strb	r3, [r7, #23]
    break;
 8007198:	bf00      	nop
  }
  return status;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7e1b      	ldrb	r3, [r3, #24]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	f200 821f 	bhi.w	80075fe <USBH_HandleControl+0x45a>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <USBH_HandleControl+0x24>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	0800720f 	.word	0x0800720f
 80071d0:	080072b1 	.word	0x080072b1
 80071d4:	080072d7 	.word	0x080072d7
 80071d8:	08007363 	.word	0x08007363
 80071dc:	0800738f 	.word	0x0800738f
 80071e0:	08007451 	.word	0x08007451
 80071e4:	08007473 	.word	0x08007473
 80071e8:	08007505 	.word	0x08007505
 80071ec:	0800752d 	.word	0x0800752d
 80071f0:	080075bf 	.word	0x080075bf
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f103 0110 	add.w	r1, r3, #16
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	795b      	ldrb	r3, [r3, #5]
 80071fe:	461a      	mov	r2, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa0d 	bl	8007620 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	761a      	strb	r2, [r3, #24]
    break;
 800720c:	e202      	b.n	8007614 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	795b      	ldrb	r3, [r3, #5]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f002 ffab 	bl	800a170 <USBH_LL_GetURBState>
 800721a:	4603      	mov	r3, r0
 800721c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d12c      	bne.n	800727e <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7c1b      	ldrb	r3, [r3, #16]
 8007228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800722c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	8adb      	ldrh	r3, [r3, #22]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007236:	7b7b      	ldrb	r3, [r7, #13]
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d103      	bne.n	8007244 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2203      	movs	r2, #3
 8007240:	761a      	strb	r2, [r3, #24]
 8007242:	e00d      	b.n	8007260 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2205      	movs	r2, #5
 8007248:	761a      	strb	r2, [r3, #24]
 800724a:	e009      	b.n	8007260 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800724c:	7b7b      	ldrb	r3, [r7, #13]
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d103      	bne.n	800725a <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2209      	movs	r2, #9
 8007256:	761a      	strb	r2, [r3, #24]
 8007258:	e002      	b.n	8007260 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2207      	movs	r2, #7
 800725e:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2203      	movs	r2, #3
 8007264:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007274:	2200      	movs	r2, #0
 8007276:	4619      	mov	r1, r3
 8007278:	f000 fbb8 	bl	80079ec <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800727c:	e1c1      	b.n	8007602 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b04      	cmp	r3, #4
 8007282:	d003      	beq.n	800728c <USBH_HandleControl+0xe8>
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b02      	cmp	r3, #2
 8007288:	f040 81bb 	bne.w	8007602 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	220b      	movs	r2, #11
 8007290:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2203      	movs	r2, #3
 8007296:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a6:	2200      	movs	r2, #0
 80072a8:	4619      	mov	r1, r3
 80072aa:	f000 fb9f 	bl	80079ec <osMessagePut>
    break;
 80072ae:	e1a8      	b.n	8007602 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6899      	ldr	r1, [r3, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	899a      	ldrh	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9e8 	bl	800769e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2204      	movs	r2, #4
 80072d2:	761a      	strb	r2, [r3, #24]
    break;
 80072d4:	e19e      	b.n	8007614 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 ff47 	bl	800a170 <USBH_LL_GetURBState>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d110      	bne.n	800730e <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2209      	movs	r2, #9
 80072f0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2203      	movs	r2, #3
 80072f6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007306:	2200      	movs	r2, #0
 8007308:	4619      	mov	r1, r3
 800730a:	f000 fb6f 	bl	80079ec <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b05      	cmp	r3, #5
 8007312:	d110      	bne.n	8007336 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007314:	2303      	movs	r3, #3
 8007316:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2203      	movs	r2, #3
 800731c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800732c:	2200      	movs	r2, #0
 800732e:	4619      	mov	r1, r3
 8007330:	f000 fb5c 	bl	80079ec <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007334:	e167      	b.n	8007606 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b04      	cmp	r3, #4
 800733a:	f040 8164 	bne.w	8007606 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	220b      	movs	r2, #11
 8007342:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2203      	movs	r2, #3
 8007348:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007358:	2200      	movs	r2, #0
 800735a:	4619      	mov	r1, r3
 800735c:	f000 fb46 	bl	80079ec <osMessagePut>
    break;
 8007360:	e151      	b.n	8007606 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6899      	ldr	r1, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	899a      	ldrh	r2, [r3, #12]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7958      	ldrb	r0, [r3, #5]
 800736e:	2301      	movs	r3, #1
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4603      	mov	r3, r0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f96d 	bl	8007654 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007380:	b29a      	uxth	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2206      	movs	r2, #6
 800738a:	761a      	strb	r2, [r3, #24]
    break;
 800738c:	e142      	b.n	8007614 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	795b      	ldrb	r3, [r3, #5]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f002 feeb 	bl	800a170 <USBH_LL_GetURBState>
 800739a:	4603      	mov	r3, r0
 800739c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d111      	bne.n	80073c8 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2207      	movs	r2, #7
 80073a8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2203      	movs	r2, #3
 80073ae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073be:	2200      	movs	r2, #0
 80073c0:	4619      	mov	r1, r3
 80073c2:	f000 fb13 	bl	80079ec <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073c6:	e120      	b.n	800760a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	d113      	bne.n	80073f6 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	220c      	movs	r2, #12
 80073d2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80073d4:	2303      	movs	r3, #3
 80073d6:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2203      	movs	r2, #3
 80073dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ec:	2200      	movs	r2, #0
 80073ee:	4619      	mov	r1, r3
 80073f0:	f000 fafc 	bl	80079ec <osMessagePut>
    break;
 80073f4:	e109      	b.n	800760a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d111      	bne.n	8007420 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2205      	movs	r2, #5
 8007400:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007416:	2200      	movs	r2, #0
 8007418:	4619      	mov	r1, r3
 800741a:	f000 fae7 	bl	80079ec <osMessagePut>
    break;
 800741e:	e0f4      	b.n	800760a <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b04      	cmp	r3, #4
 8007424:	f040 80f1 	bne.w	800760a <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220b      	movs	r2, #11
 800742c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800742e:	2302      	movs	r3, #2
 8007430:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2203      	movs	r2, #3
 8007436:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007446:	2200      	movs	r2, #0
 8007448:	4619      	mov	r1, r3
 800744a:	f000 facf 	bl	80079ec <osMessagePut>
    break;
 800744e:	e0dc      	b.n	800760a <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	791b      	ldrb	r3, [r3, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f920 	bl	800769e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2208      	movs	r2, #8
 800746e:	761a      	strb	r2, [r3, #24]

    break;
 8007470:	e0d0      	b.n	8007614 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	791b      	ldrb	r3, [r3, #4]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f002 fe79 	bl	800a170 <USBH_LL_GetURBState>
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d113      	bne.n	80074b0 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	220d      	movs	r2, #13
 800748c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2203      	movs	r2, #3
 8007496:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074a6:	2200      	movs	r2, #0
 80074a8:	4619      	mov	r1, r3
 80074aa:	f000 fa9f 	bl	80079ec <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80074ae:	e0ae      	b.n	800760e <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d111      	bne.n	80074da <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	220b      	movs	r2, #11
 80074ba:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2203      	movs	r2, #3
 80074c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d0:	2200      	movs	r2, #0
 80074d2:	4619      	mov	r1, r3
 80074d4:	f000 fa8a 	bl	80079ec <osMessagePut>
    break;
 80074d8:	e099      	b.n	800760e <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b05      	cmp	r3, #5
 80074de:	f040 8096 	bne.w	800760e <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 80074e2:	2303      	movs	r3, #3
 80074e4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074fa:	2200      	movs	r2, #0
 80074fc:	4619      	mov	r1, r3
 80074fe:	f000 fa75 	bl	80079ec <osMessagePut>
    break;
 8007502:	e084      	b.n	800760e <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	795a      	ldrb	r2, [r3, #5]
 8007508:	2301      	movs	r3, #1
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f89e 	bl	8007654 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220a      	movs	r2, #10
 8007528:	761a      	strb	r2, [r3, #24]
    break;
 800752a:	e073      	b.n	8007614 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	795b      	ldrb	r3, [r3, #5]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f002 fe1c 	bl	800a170 <USBH_LL_GetURBState>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d113      	bne.n	800756a <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	220d      	movs	r2, #13
 800754a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2203      	movs	r2, #3
 8007550:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007560:	2200      	movs	r2, #0
 8007562:	4619      	mov	r1, r3
 8007564:	f000 fa42 	bl	80079ec <osMessagePut>
#endif
#endif
      }

    }
    break;
 8007568:	e053      	b.n	8007612 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d111      	bne.n	8007594 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2209      	movs	r2, #9
 8007574:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2203      	movs	r2, #3
 800757a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800758a:	2200      	movs	r2, #0
 800758c:	4619      	mov	r1, r3
 800758e:	f000 fa2d 	bl	80079ec <osMessagePut>
    break;
 8007592:	e03e      	b.n	8007612 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b04      	cmp	r3, #4
 8007598:	d13b      	bne.n	8007612 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	220b      	movs	r2, #11
 800759e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075b4:	2200      	movs	r2, #0
 80075b6:	4619      	mov	r1, r3
 80075b8:	f000 fa18 	bl	80079ec <osMessagePut>
    break;
 80075bc:	e029      	b.n	8007612 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7e5b      	ldrb	r3, [r3, #25]
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	765a      	strb	r2, [r3, #25]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7e5b      	ldrb	r3, [r3, #25]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d809      	bhi.n	80075e6 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f002 fcdf 	bl	8009f96 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80075e4:	e016      	b.n	8007614 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075ec:	2106      	movs	r1, #6
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80075f8:	2302      	movs	r3, #2
 80075fa:	73fb      	strb	r3, [r7, #15]
    break;
 80075fc:	e00a      	b.n	8007614 <USBH_HandleControl+0x470>

  default:
    break;
 80075fe:	bf00      	nop
 8007600:	e008      	b.n	8007614 <USBH_HandleControl+0x470>
    break;
 8007602:	bf00      	nop
 8007604:	e006      	b.n	8007614 <USBH_HandleControl+0x470>
    break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <USBH_HandleControl+0x470>
    break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <USBH_HandleControl+0x470>
    break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <USBH_HandleControl+0x470>
    break;
 8007612:	bf00      	nop
  }
  return status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop

08007620 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af04      	add	r7, sp, #16
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800762e:	79f9      	ldrb	r1, [r7, #7]
 8007630:	2300      	movs	r3, #0
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	2308      	movs	r3, #8
 8007636:	9302      	str	r3, [sp, #8]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	2300      	movs	r3, #0
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	2300      	movs	r3, #0
 8007642:	2200      	movs	r2, #0
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f002 fd62 	bl	800a10e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af04      	add	r7, sp, #16
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4611      	mov	r1, r2
 8007660:	461a      	mov	r2, r3
 8007662:	460b      	mov	r3, r1
 8007664:	80fb      	strh	r3, [r7, #6]
 8007666:	4613      	mov	r3, r2
 8007668:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007678:	7979      	ldrb	r1, [r7, #5]
 800767a:	7e3b      	ldrb	r3, [r7, #24]
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	9302      	str	r3, [sp, #8]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	2301      	movs	r3, #1
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	2200      	movs	r2, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f002 fd3d 	bl	800a10e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b088      	sub	sp, #32
 80076a2:	af04      	add	r7, sp, #16
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	4611      	mov	r1, r2
 80076aa:	461a      	mov	r2, r3
 80076ac:	460b      	mov	r3, r1
 80076ae:	80fb      	strh	r3, [r7, #6]
 80076b0:	4613      	mov	r3, r2
 80076b2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80076b4:	7979      	ldrb	r1, [r7, #5]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	2301      	movs	r3, #1
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	2300      	movs	r3, #0
 80076c8:	2201      	movs	r2, #1
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f002 fd1f 	bl	800a10e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076d0:	2300      	movs	r3, #0

}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b088      	sub	sp, #32
 80076de:	af04      	add	r7, sp, #16
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	4611      	mov	r1, r2
 80076e6:	461a      	mov	r2, r3
 80076e8:	460b      	mov	r3, r1
 80076ea:	80fb      	strh	r3, [r7, #6]
 80076ec:	4613      	mov	r3, r2
 80076ee:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80076fe:	7979      	ldrb	r1, [r7, #5]
 8007700:	7e3b      	ldrb	r3, [r7, #24]
 8007702:	9303      	str	r3, [sp, #12]
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	9302      	str	r3, [sp, #8]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	2301      	movs	r3, #1
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	2302      	movs	r3, #2
 8007712:	2200      	movs	r2, #0
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f002 fcfa 	bl	800a10e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af04      	add	r7, sp, #16
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4611      	mov	r1, r2
 8007730:	461a      	mov	r2, r3
 8007732:	460b      	mov	r3, r1
 8007734:	80fb      	strh	r3, [r7, #6]
 8007736:	4613      	mov	r3, r2
 8007738:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800773a:	7979      	ldrb	r1, [r7, #5]
 800773c:	2300      	movs	r3, #0
 800773e:	9303      	str	r3, [sp, #12]
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	9302      	str	r3, [sp, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	2301      	movs	r3, #1
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2302      	movs	r3, #2
 800774e:	2201      	movs	r2, #1
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f002 fcdc 	bl	800a10e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af04      	add	r7, sp, #16
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4603      	mov	r3, r0
 8007770:	70fb      	strb	r3, [r7, #3]
 8007772:	460b      	mov	r3, r1
 8007774:	70bb      	strb	r3, [r7, #2]
 8007776:	4613      	mov	r3, r2
 8007778:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800777a:	7878      	ldrb	r0, [r7, #1]
 800777c:	78ba      	ldrb	r2, [r7, #2]
 800777e:	78f9      	ldrb	r1, [r7, #3]
 8007780:	8b3b      	ldrh	r3, [r7, #24]
 8007782:	9302      	str	r3, [sp, #8]
 8007784:	7d3b      	ldrb	r3, [r7, #20]
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	7c3b      	ldrb	r3, [r7, #16]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	4603      	mov	r3, r0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f002 fc6f 	bl	800a072 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007794:	2300      	movs	r3, #0

}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f002 fc8e 	bl	800a0d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80077b4:	2300      	movs	r3, #0

}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f831 	bl	8007832 <USBH_GetFreePipe>
 80077d0:	4603      	mov	r3, r0
 80077d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80077d4:	89fb      	ldrh	r3, [r7, #14]
 80077d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077da:	4293      	cmp	r3, r2
 80077dc:	d007      	beq.n	80077ee <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	89fa      	ldrh	r2, [r7, #14]
 80077e2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32e0      	adds	r2, #224	; 0xe0
 80077ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80077ee:	89fb      	ldrh	r3, [r7, #14]
 80077f0:	b2db      	uxtb	r3, r3
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	2b0a      	cmp	r3, #10
 800780a:	d80b      	bhi.n	8007824 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800780c:	78fa      	ldrb	r2, [r7, #3]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32e0      	adds	r2, #224	; 0xe0
 8007812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	32e0      	adds	r2, #224	; 0xe0
 8007820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	e00e      	b.n	8007862 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007844:	7bfa      	ldrb	r2, [r7, #15]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32e0      	adds	r2, #224	; 0xe0
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	b29b      	uxth	r3, r3
 800785a:	e007      	b.n	800786c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	3301      	adds	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b0a      	cmp	r3, #10
 8007866:	d9ed      	bls.n	8007844 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007868:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800788a:	2b84      	cmp	r3, #132	; 0x84
 800788c:	d005      	beq.n	800789a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800788e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	3303      	adds	r3, #3
 8007898:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800789a:	68fb      	ldr	r3, [r7, #12]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ae:	f3ef 8305 	mrs	r3, IPSR
 80078b2:	607b      	str	r3, [r7, #4]
  return(result);
 80078b4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078d0:	f001 f8dc 	bl	8008a8c <vTaskStartScheduler>
  
  return osOK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	bd80      	pop	{r7, pc}

080078da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078dc:	b089      	sub	sp, #36	; 0x24
 80078de:	af04      	add	r7, sp, #16
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d020      	beq.n	800792e <osThreadCreate+0x54>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01c      	beq.n	800792e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685c      	ldr	r4, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681d      	ldr	r5, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691e      	ldr	r6, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ffb6 	bl	8007878 <makeFreeRtosPriority>
 800790c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007916:	9202      	str	r2, [sp, #8]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	9100      	str	r1, [sp, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	4632      	mov	r2, r6
 8007920:	4629      	mov	r1, r5
 8007922:	4620      	mov	r0, r4
 8007924:	f000 fef7 	bl	8008716 <xTaskCreateStatic>
 8007928:	4603      	mov	r3, r0
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e01c      	b.n	8007968 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685c      	ldr	r4, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800793a:	b29e      	uxth	r6, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff ff98 	bl	8007878 <makeFreeRtosPriority>
 8007948:	4602      	mov	r2, r0
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	9200      	str	r2, [sp, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	4632      	mov	r2, r6
 8007956:	4629      	mov	r1, r5
 8007958:	4620      	mov	r0, r4
 800795a:	f000 ff35 	bl	80087c8 <xTaskCreate>
 800795e:	4603      	mov	r3, r0
 8007960:	2b01      	cmp	r3, #1
 8007962:	d001      	beq.n	8007968 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007972 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <osDelay+0x16>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	e000      	b.n	800798a <osDelay+0x18>
 8007988:	2301      	movs	r3, #1
 800798a:	4618      	mov	r0, r3
 800798c:	f001 f84a 	bl	8008a24 <vTaskDelay>
  
  return osOK;
 8007990:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800799a:	b590      	push	{r4, r7, lr}
 800799c:	b085      	sub	sp, #20
 800799e:	af02      	add	r7, sp, #8
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d012      	beq.n	80079d2 <osMessageCreate+0x38>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68dc      	ldr	r4, [r3, #12]
 80079c4:	2300      	movs	r3, #0
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	4623      	mov	r3, r4
 80079ca:	f000 f9df 	bl	8007d8c <xQueueGenericCreateStatic>
 80079ce:	4603      	mov	r3, r0
 80079d0:	e008      	b.n	80079e4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	4619      	mov	r1, r3
 80079de:	f000 fa47 	bl	8007e70 <xQueueGenericCreate>
 80079e2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd90      	pop	{r4, r7, pc}

080079ec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <osMessagePut+0x1e>
    ticks = 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007a0a:	f7ff ff4d 	bl	80078a8 <inHandlerMode>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d018      	beq.n	8007a46 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007a14:	f107 0210 	add.w	r2, r7, #16
 8007a18:	f107 0108 	add.w	r1, r7, #8
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fb7c 	bl	800811c <xQueueGenericSendFromISR>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d001      	beq.n	8007a2e <osMessagePut+0x42>
      return osErrorOS;
 8007a2a:	23ff      	movs	r3, #255	; 0xff
 8007a2c:	e018      	b.n	8007a60 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d014      	beq.n	8007a5e <osMessagePut+0x72>
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <osMessagePut+0x7c>)
 8007a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	e00b      	b.n	8007a5e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007a46:	f107 0108 	add.w	r1, r7, #8
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fa6a 	bl	8007f28 <xQueueGenericSend>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d001      	beq.n	8007a5e <osMessagePut+0x72>
      return osErrorOS;
 8007a5a:	23ff      	movs	r3, #255	; 0xff
 8007a5c:	e000      	b.n	8007a60 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007a6c:	b590      	push	{r4, r7, lr}
 8007a6e:	b08b      	sub	sp, #44	; 0x2c
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007a86:	2380      	movs	r3, #128	; 0x80
 8007a88:	617b      	str	r3, [r7, #20]
    return event;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	461c      	mov	r4, r3
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a9a:	e054      	b.n	8007b46 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d103      	bne.n	8007ab4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab2:	e009      	b.n	8007ac8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d006      	beq.n	8007ac8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <osMessageGet+0x5c>
      ticks = 1;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007ac8:	f7ff feee 	bl	80078a8 <inHandlerMode>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01c      	beq.n	8007b0c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007ad2:	f107 0220 	add.w	r2, r7, #32
 8007ad6:	f107 0314 	add.w	r3, r7, #20
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	68b8      	ldr	r0, [r7, #8]
 8007ae0:	f000 fc8c 	bl	80083fc <xQueueReceiveFromISR>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d102      	bne.n	8007af0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007aea:	2310      	movs	r3, #16
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e001      	b.n	8007af4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01d      	beq.n	8007b36 <osMessageGet+0xca>
 8007afa:	4b15      	ldr	r3, [pc, #84]	; (8007b50 <osMessageGet+0xe4>)
 8007afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	e014      	b.n	8007b36 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007b0c:	f107 0314 	add.w	r3, r7, #20
 8007b10:	3304      	adds	r3, #4
 8007b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b14:	4619      	mov	r1, r3
 8007b16:	68b8      	ldr	r0, [r7, #8]
 8007b18:	f000 fb94 	bl	8008244 <xQueueReceive>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d102      	bne.n	8007b28 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007b22:	2310      	movs	r3, #16
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	e006      	b.n	8007b36 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <osMessageGet+0xc6>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <osMessageGet+0xc8>
 8007b32:	2340      	movs	r3, #64	; 0x40
 8007b34:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	461c      	mov	r4, r3
 8007b3a:	f107 0314 	add.w	r3, r7, #20
 8007b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	372c      	adds	r7, #44	; 0x2c
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd90      	pop	{r4, r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f103 0208 	add.w	r2, r3, #8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f103 0208 	add.w	r2, r3, #8
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f103 0208 	add.w	r2, r3, #8
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b085      	sub	sp, #20
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d103      	bne.n	8007c16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e00c      	b.n	8007c30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e002      	b.n	8007c24 <vListInsert+0x2e>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d2f6      	bcs.n	8007c1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6892      	ldr	r2, [r2, #8]
 8007c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6852      	ldr	r2, [r2, #4]
 8007c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d103      	bne.n	8007c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	1e5a      	subs	r2, r3, #1
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d109      	bne.n	8007ce4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	60bb      	str	r3, [r7, #8]
 8007ce2:	e7fe      	b.n	8007ce2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007ce4:	f001 fd02 	bl	80096ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf0:	68f9      	ldr	r1, [r7, #12]
 8007cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	441a      	add	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	3b01      	subs	r3, #1
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d1a:	fb01 f303 	mul.w	r3, r1, r3
 8007d1e:	441a      	add	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	22ff      	movs	r2, #255	; 0xff
 8007d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	22ff      	movs	r2, #255	; 0xff
 8007d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d114      	bne.n	8007d64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d01a      	beq.n	8007d78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3310      	adds	r3, #16
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 f8e2 	bl	8008f10 <xTaskRemoveFromEventList>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d012      	beq.n	8007d78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d52:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <xQueueGenericReset+0xcc>)
 8007d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	e009      	b.n	8007d78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3310      	adds	r3, #16
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fef3 	bl	8007b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3324      	adds	r3, #36	; 0x24
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff feee 	bl	8007b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d78:	f001 fce6 	bl	8009748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d7c:	2301      	movs	r3, #1
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08e      	sub	sp, #56	; 0x38
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <xQueueGenericCreateStatic+0x28>
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007db2:	e7fe      	b.n	8007db2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <xQueueGenericCreateStatic+0x42>
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <xQueueGenericCreateStatic+0x4e>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <xQueueGenericCreateStatic+0x52>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericCreateStatic+0x54>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <xQueueGenericCreateStatic+0x6c>
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	623b      	str	r3, [r7, #32]
 8007df6:	e7fe      	b.n	8007df6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <xQueueGenericCreateStatic+0x78>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <xQueueGenericCreateStatic+0x7c>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <xQueueGenericCreateStatic+0x7e>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <xQueueGenericCreateStatic+0x96>
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	e7fe      	b.n	8007e20 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e22:	2348      	movs	r3, #72	; 0x48
 8007e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b48      	cmp	r3, #72	; 0x48
 8007e2a:	d009      	beq.n	8007e40 <xQueueGenericCreateStatic+0xb4>
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	e7fe      	b.n	8007e3e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00d      	beq.n	8007e66 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f842 	bl	8007eea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3730      	adds	r7, #48	; 0x30
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	; 0x28
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <xQueueGenericCreate+0x28>
 8007e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	e7fe      	b.n	8007e96 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d102      	bne.n	8007ea4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	e004      	b.n	8007eae <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	fb02 f303 	mul.w	r3, r2, r3
 8007eac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3348      	adds	r3, #72	; 0x48
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fd34 	bl	8009920 <pvPortMalloc>
 8007eb8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00f      	beq.n	8007ee0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	3348      	adds	r3, #72	; 0x48
 8007ec4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ece:	79fa      	ldrb	r2, [r7, #7]
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f805 	bl	8007eea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e002      	b.n	8007f0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f18:	2101      	movs	r1, #1
 8007f1a:	69b8      	ldr	r0, [r7, #24]
 8007f1c:	f7ff fece 	bl	8007cbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	; 0x38
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f36:	2300      	movs	r3, #0
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <xQueueGenericSend+0x30>
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f56:	e7fe      	b.n	8007f56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <xQueueGenericSend+0x3e>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <xQueueGenericSend+0x42>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <xQueueGenericSend+0x44>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d109      	bne.n	8007f84 <xQueueGenericSend+0x5c>
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	e7fe      	b.n	8007f82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d103      	bne.n	8007f92 <xQueueGenericSend+0x6a>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <xQueueGenericSend+0x6e>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <xQueueGenericSend+0x70>
 8007f96:	2300      	movs	r3, #0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <xQueueGenericSend+0x88>
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	623b      	str	r3, [r7, #32]
 8007fae:	e7fe      	b.n	8007fae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fb0:	f001 f96a 	bl	8009288 <xTaskGetSchedulerState>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <xQueueGenericSend+0x98>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <xQueueGenericSend+0x9c>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <xQueueGenericSend+0x9e>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <xQueueGenericSend+0xb6>
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fde:	f001 fb85 	bl	80096ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d302      	bcc.n	8007ff4 <xQueueGenericSend+0xcc>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d129      	bne.n	8008048 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ffa:	f000 fa7c 	bl	80084f6 <prvCopyDataToQueue>
 8007ffe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d010      	beq.n	800802a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	3324      	adds	r3, #36	; 0x24
 800800c:	4618      	mov	r0, r3
 800800e:	f000 ff7f 	bl	8008f10 <xTaskRemoveFromEventList>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d013      	beq.n	8008040 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008018:	4b3f      	ldr	r3, [pc, #252]	; (8008118 <xQueueGenericSend+0x1f0>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	e00a      	b.n	8008040 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <xQueueGenericSend+0x1f0>)
 8008032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008040:	f001 fb82 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 8008044:	2301      	movs	r3, #1
 8008046:	e063      	b.n	8008110 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800804e:	f001 fb7b 	bl	8009748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008052:	2300      	movs	r3, #0
 8008054:	e05c      	b.n	8008110 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	2b00      	cmp	r3, #0
 800805a:	d106      	bne.n	800806a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800805c:	f107 0314 	add.w	r3, r7, #20
 8008060:	4618      	mov	r0, r3
 8008062:	f000 ffb7 	bl	8008fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008066:	2301      	movs	r3, #1
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800806a:	f001 fb6d 	bl	8009748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800806e:	f000 fd6b 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008072:	f001 fb3b 	bl	80096ec <vPortEnterCritical>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800807c:	b25b      	sxtb	r3, r3
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d103      	bne.n	800808c <xQueueGenericSend+0x164>
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008092:	b25b      	sxtb	r3, r3
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d103      	bne.n	80080a2 <xQueueGenericSend+0x17a>
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a2:	f001 fb51 	bl	8009748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080a6:	1d3a      	adds	r2, r7, #4
 80080a8:	f107 0314 	add.w	r3, r7, #20
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 ffa6 	bl	8009000 <xTaskCheckForTimeOut>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d124      	bne.n	8008104 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080bc:	f000 fb13 	bl	80086e6 <prvIsQueueFull>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d018      	beq.n	80080f8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	3310      	adds	r3, #16
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fefa 	bl	8008ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d6:	f000 fa9e 	bl	8008616 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080da:	f000 fd43 	bl	8008b64 <xTaskResumeAll>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f af7c 	bne.w	8007fde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80080e6:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <xQueueGenericSend+0x1f0>)
 80080e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	e772      	b.n	8007fde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080fa:	f000 fa8c 	bl	8008616 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080fe:	f000 fd31 	bl	8008b64 <xTaskResumeAll>
 8008102:	e76c      	b.n	8007fde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008106:	f000 fa86 	bl	8008616 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800810a:	f000 fd2b 	bl	8008b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800810e:	2300      	movs	r3, #0
		}
	}
}
 8008110:	4618      	mov	r0, r3
 8008112:	3738      	adds	r7, #56	; 0x38
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b08e      	sub	sp, #56	; 0x38
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d109      	bne.n	8008148 <xQueueGenericSendFromISR+0x2c>
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
 8008146:	e7fe      	b.n	8008146 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d103      	bne.n	8008156 <xQueueGenericSendFromISR+0x3a>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <xQueueGenericSendFromISR+0x3e>
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <xQueueGenericSendFromISR+0x40>
 800815a:	2300      	movs	r3, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <xQueueGenericSendFromISR+0x58>
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	623b      	str	r3, [r7, #32]
 8008172:	e7fe      	b.n	8008172 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d103      	bne.n	8008182 <xQueueGenericSendFromISR+0x66>
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <xQueueGenericSendFromISR+0x6a>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueGenericSendFromISR+0x6c>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <xQueueGenericSendFromISR+0x84>
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	e7fe      	b.n	800819e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a0:	f001 fb80 	bl	80098a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081a4:	f3ef 8211 	mrs	r2, BASEPRI
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	61ba      	str	r2, [r7, #24]
 80081ba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081bc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d302      	bcc.n	80081d2 <xQueueGenericSendFromISR+0xb6>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d12c      	bne.n	800822c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e2:	f000 f988 	bl	80084f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081e6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d112      	bne.n	8008216 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d016      	beq.n	8008226 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fe87 	bl	8008f10 <xTaskRemoveFromEventList>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00e      	beq.n	8008226 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e007      	b.n	8008226 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800821a:	3301      	adds	r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	b25a      	sxtb	r2, r3
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008226:	2301      	movs	r3, #1
 8008228:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800822a:	e001      	b.n	8008230 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800822c:	2300      	movs	r3, #0
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800823c:	4618      	mov	r0, r3
 800823e:	3738      	adds	r7, #56	; 0x38
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	; 0x30
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008250:	2300      	movs	r3, #0
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <xQueueReceive+0x2e>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	623b      	str	r3, [r7, #32]
 8008270:	e7fe      	b.n	8008270 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <xQueueReceive+0x3c>
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <xQueueReceive+0x40>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <xQueueReceive+0x42>
 8008284:	2300      	movs	r3, #0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <xQueueReceive+0x5a>
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	e7fe      	b.n	800829c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800829e:	f000 fff3 	bl	8009288 <xTaskGetSchedulerState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <xQueueReceive+0x6a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <xQueueReceive+0x6e>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueReceive+0x70>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <xQueueReceive+0x88>
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e7fe      	b.n	80082ca <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80082cc:	f001 fa0e 	bl	80096ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01f      	beq.n	800831c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082e0:	f000 f973 	bl	80085ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	1e5a      	subs	r2, r3, #1
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00f      	beq.n	8008314 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	3310      	adds	r3, #16
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fe09 	bl	8008f10 <xTaskRemoveFromEventList>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008304:	4b3c      	ldr	r3, [pc, #240]	; (80083f8 <xQueueReceive+0x1b4>)
 8008306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008314:	f001 fa18 	bl	8009748 <vPortExitCritical>
				return pdPASS;
 8008318:	2301      	movs	r3, #1
 800831a:	e069      	b.n	80083f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d103      	bne.n	800832a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008322:	f001 fa11 	bl	8009748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008326:	2300      	movs	r3, #0
 8008328:	e062      	b.n	80083f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fe4d 	bl	8008fd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800833e:	f001 fa03 	bl	8009748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008342:	f000 fc01 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008346:	f001 f9d1 	bl	80096ec <vPortEnterCritical>
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008350:	b25b      	sxtb	r3, r3
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d103      	bne.n	8008360 <xQueueReceive+0x11c>
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008366:	b25b      	sxtb	r3, r3
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	d103      	bne.n	8008376 <xQueueReceive+0x132>
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008376:	f001 f9e7 	bl	8009748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800837a:	1d3a      	adds	r2, r7, #4
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f000 fe3c 	bl	8009000 <xTaskCheckForTimeOut>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d123      	bne.n	80083d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800838e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008390:	f000 f993 	bl	80086ba <prvIsQueueEmpty>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d017      	beq.n	80083ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	3324      	adds	r3, #36	; 0x24
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fd90 	bl	8008ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f000 f934 	bl	8008616 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ae:	f000 fbd9 	bl	8008b64 <xTaskResumeAll>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d189      	bne.n	80082cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <xQueueReceive+0x1b4>)
 80083ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	e780      	b.n	80082cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083cc:	f000 f923 	bl	8008616 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083d0:	f000 fbc8 	bl	8008b64 <xTaskResumeAll>
 80083d4:	e77a      	b.n	80082cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d8:	f000 f91d 	bl	8008616 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083dc:	f000 fbc2 	bl	8008b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e2:	f000 f96a 	bl	80086ba <prvIsQueueEmpty>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f43f af6f 	beq.w	80082cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3730      	adds	r7, #48	; 0x30
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	; 0x38
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <xQueueReceiveFromISR+0x2a>
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	623b      	str	r3, [r7, #32]
 8008424:	e7fe      	b.n	8008424 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d103      	bne.n	8008434 <xQueueReceiveFromISR+0x38>
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <xQueueReceiveFromISR+0x3c>
 8008434:	2301      	movs	r3, #1
 8008436:	e000      	b.n	800843a <xQueueReceiveFromISR+0x3e>
 8008438:	2300      	movs	r3, #0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <xQueueReceiveFromISR+0x56>
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	61fb      	str	r3, [r7, #28]
 8008450:	e7fe      	b.n	8008450 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008452:	f001 fa27 	bl	80098a4 <vPortValidateInterruptPriority>
	__asm volatile
 8008456:	f3ef 8211 	mrs	r2, BASEPRI
 800845a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	61ba      	str	r2, [r7, #24]
 800846c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800846e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	2b00      	cmp	r3, #0
 800847c:	d02f      	beq.n	80084de <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800848c:	f000 f89d 	bl	80085ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	1e5a      	subs	r2, r3, #1
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d112      	bne.n	80084c8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d016      	beq.n	80084d8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	3310      	adds	r3, #16
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fd2e 	bl	8008f10 <xTaskRemoveFromEventList>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00e      	beq.n	80084d8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	e007      	b.n	80084d8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084cc:	3301      	adds	r3, #1
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	b25a      	sxtb	r2, r3
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80084d8:	2301      	movs	r3, #1
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
 80084dc:	e001      	b.n	80084e2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80084de:	2300      	movs	r3, #0
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3738      	adds	r7, #56	; 0x38
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d14d      	bne.n	80085b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fecf 	bl	80092c4 <xTaskPriorityDisinherit>
 8008526:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	e043      	b.n	80085b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d119      	bne.n	800856a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6898      	ldr	r0, [r3, #8]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	461a      	mov	r2, r3
 8008540:	68b9      	ldr	r1, [r7, #8]
 8008542:	f001 feff 	bl	800a344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	441a      	add	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	429a      	cmp	r2, r3
 800855e:	d32b      	bcc.n	80085b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	e026      	b.n	80085b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68d8      	ldr	r0, [r3, #12]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	461a      	mov	r2, r3
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	f001 fee5 	bl	800a344 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	425b      	negs	r3, r3
 8008584:	441a      	add	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d207      	bcs.n	80085a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	425b      	negs	r3, r3
 80085a0:	441a      	add	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d105      	bne.n	80085b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085c0:	697b      	ldr	r3, [r7, #20]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d018      	beq.n	800860e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	441a      	add	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d303      	bcc.n	80085fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68d9      	ldr	r1, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	461a      	mov	r2, r3
 8008608:	6838      	ldr	r0, [r7, #0]
 800860a:	f001 fe9b 	bl	800a344 <memcpy>
	}
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800861e:	f001 f865 	bl	80096ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008628:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800862a:	e011      	b.n	8008650 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d012      	beq.n	800865a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3324      	adds	r3, #36	; 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fc69 	bl	8008f10 <xTaskRemoveFromEventList>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008644:	f000 fd3c 	bl	80090c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	3b01      	subs	r3, #1
 800864c:	b2db      	uxtb	r3, r3
 800864e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008654:	2b00      	cmp	r3, #0
 8008656:	dce9      	bgt.n	800862c <prvUnlockQueue+0x16>
 8008658:	e000      	b.n	800865c <prvUnlockQueue+0x46>
					break;
 800865a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008664:	f001 f870 	bl	8009748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008668:	f001 f840 	bl	80096ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008672:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008674:	e011      	b.n	800869a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d012      	beq.n	80086a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3310      	adds	r3, #16
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fc44 	bl	8008f10 <xTaskRemoveFromEventList>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800868e:	f000 fd17 	bl	80090c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	3b01      	subs	r3, #1
 8008696:	b2db      	uxtb	r3, r3
 8008698:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800869a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dce9      	bgt.n	8008676 <prvUnlockQueue+0x60>
 80086a2:	e000      	b.n	80086a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086ae:	f001 f84b 	bl	8009748 <vPortExitCritical>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c2:	f001 f813 	bl	80096ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086ce:	2301      	movs	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e001      	b.n	80086d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086d8:	f001 f836 	bl	8009748 <vPortExitCritical>

	return xReturn;
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086ee:	f000 fffd 	bl	80096ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d102      	bne.n	8008704 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086fe:	2301      	movs	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	e001      	b.n	8008708 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008708:	f001 f81e 	bl	8009748 <vPortExitCritical>

	return xReturn;
 800870c:	68fb      	ldr	r3, [r7, #12]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008716:	b580      	push	{r7, lr}
 8008718:	b08e      	sub	sp, #56	; 0x38
 800871a:	af04      	add	r7, sp, #16
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <xTaskCreateStatic+0x28>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	623b      	str	r3, [r7, #32]
 800873c:	e7fe      	b.n	800873c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	2b00      	cmp	r3, #0
 8008742:	d109      	bne.n	8008758 <xTaskCreateStatic+0x42>
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	e7fe      	b.n	8008756 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008758:	2354      	movs	r3, #84	; 0x54
 800875a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b54      	cmp	r3, #84	; 0x54
 8008760:	d009      	beq.n	8008776 <xTaskCreateStatic+0x60>
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	61bb      	str	r3, [r7, #24]
 8008774:	e7fe      	b.n	8008774 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01e      	beq.n	80087ba <xTaskCreateStatic+0xa4>
 800877c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877e:	2b00      	cmp	r3, #0
 8008780:	d01b      	beq.n	80087ba <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800878a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	2202      	movs	r2, #2
 8008790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008794:	2300      	movs	r3, #0
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f850 	bl	8008852 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087b4:	f000 f8cc 	bl	8008950 <prvAddNewTaskToReadyList>
 80087b8:	e001      	b.n	80087be <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087be:	697b      	ldr	r3, [r7, #20]
	}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3728      	adds	r7, #40	; 0x28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08c      	sub	sp, #48	; 0x30
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d8:	88fb      	ldrh	r3, [r7, #6]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 f89f 	bl	8009920 <pvPortMalloc>
 80087e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00e      	beq.n	8008808 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80087ea:	2054      	movs	r0, #84	; 0x54
 80087ec:	f001 f898 	bl	8009920 <pvPortMalloc>
 80087f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
 80087fe:	e005      	b.n	800880c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008800:	6978      	ldr	r0, [r7, #20]
 8008802:	f001 f94f 	bl	8009aa4 <vPortFree>
 8008806:	e001      	b.n	800880c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008808:	2300      	movs	r3, #0
 800880a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d017      	beq.n	8008842 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800881a:	88fa      	ldrh	r2, [r7, #6]
 800881c:	2300      	movs	r3, #0
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	9302      	str	r3, [sp, #8]
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f80e 	bl	8008852 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008836:	69f8      	ldr	r0, [r7, #28]
 8008838:	f000 f88a 	bl	8008950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800883c:	2301      	movs	r3, #1
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	e002      	b.n	8008848 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008842:	f04f 33ff 	mov.w	r3, #4294967295
 8008846:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008848:	69bb      	ldr	r3, [r7, #24]
	}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b088      	sub	sp, #32
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
 800885e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800886a:	3b01      	subs	r3, #1
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	f023 0307 	bic.w	r3, r3, #7
 8008878:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	2b00      	cmp	r3, #0
 8008882:	d009      	beq.n	8008898 <prvInitialiseNewTask+0x46>
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	e7fe      	b.n	8008896 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008898:	2300      	movs	r3, #0
 800889a:	61fb      	str	r3, [r7, #28]
 800889c:	e012      	b.n	80088c4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	7819      	ldrb	r1, [r3, #0]
 80088a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	3334      	adds	r3, #52	; 0x34
 80088ae:	460a      	mov	r2, r1
 80088b0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	4413      	add	r3, r2
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3301      	adds	r3, #1
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2b0f      	cmp	r3, #15
 80088c8:	d9e9      	bls.n	800889e <prvInitialiseNewTask+0x4c>
 80088ca:	e000      	b.n	80088ce <prvInitialiseNewTask+0x7c>
		{
			break;
 80088cc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	2b06      	cmp	r3, #6
 80088da:	d901      	bls.n	80088e0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088dc:	2306      	movs	r3, #6
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	2200      	movs	r2, #0
 80088f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f94c 	bl	8007b94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	3318      	adds	r3, #24
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff f947 	bl	8007b94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	f1c3 0207 	rsb	r2, r3, #7
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	2200      	movs	r2, #0
 8008920:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	68f9      	ldr	r1, [r7, #12]
 800892e:	69b8      	ldr	r0, [r7, #24]
 8008930:	f000 fdb2 	bl	8009498 <pxPortInitialiseStack>
 8008934:	4602      	mov	r2, r0
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3720      	adds	r7, #32
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008958:	f000 fec8 	bl	80096ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <prvAddNewTaskToReadyList+0xb8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	4a29      	ldr	r2, [pc, #164]	; (8008a08 <prvAddNewTaskToReadyList+0xb8>)
 8008964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800896e:	4a27      	ldr	r2, [pc, #156]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008974:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <prvAddNewTaskToReadyList+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d110      	bne.n	800899e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800897c:	f000 fbc4 	bl	8009108 <prvInitialiseTaskLists>
 8008980:	e00d      	b.n	800899e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008982:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <prvAddNewTaskToReadyList+0xc0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800898a:	4b20      	ldr	r3, [pc, #128]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	429a      	cmp	r2, r3
 8008996:	d802      	bhi.n	800899e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008998:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800899e:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <prvAddNewTaskToReadyList+0xc4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	4a1b      	ldr	r2, [pc, #108]	; (8008a14 <prvAddNewTaskToReadyList+0xc4>)
 80089a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	2201      	movs	r2, #1
 80089ae:	409a      	lsls	r2, r3
 80089b0:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <prvAddNewTaskToReadyList+0xc8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <prvAddNewTaskToReadyList+0xc8>)
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4a15      	ldr	r2, [pc, #84]	; (8008a1c <prvAddNewTaskToReadyList+0xcc>)
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7ff f8ec 	bl	8007bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089d6:	f000 feb7 	bl	8009748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <prvAddNewTaskToReadyList+0xc0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00e      	beq.n	8008a00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d207      	bcs.n	8008a00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <prvAddNewTaskToReadyList+0xd0>)
 80089f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000040c 	.word	0x2000040c
 8008a0c:	2000030c 	.word	0x2000030c
 8008a10:	20000418 	.word	0x20000418
 8008a14:	20000428 	.word	0x20000428
 8008a18:	20000414 	.word	0x20000414
 8008a1c:	20000310 	.word	0x20000310
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d016      	beq.n	8008a64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a36:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <vTaskDelay+0x60>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <vTaskDelay+0x2e>
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	e7fe      	b.n	8008a50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008a52:	f000 f879 	bl	8008b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a56:	2100      	movs	r1, #0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fcb7 	bl	80093cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a5e:	f000 f881 	bl	8008b64 <xTaskResumeAll>
 8008a62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d107      	bne.n	8008a7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <vTaskDelay+0x64>)
 8008a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000434 	.word	0x20000434
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	; 0x28
 8008a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	1d39      	adds	r1, r7, #4
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd1c 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	9202      	str	r2, [sp, #8]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	460a      	mov	r2, r1
 8008aba:	491d      	ldr	r1, [pc, #116]	; (8008b30 <vTaskStartScheduler+0xa4>)
 8008abc:	481d      	ldr	r0, [pc, #116]	; (8008b34 <vTaskStartScheduler+0xa8>)
 8008abe:	f7ff fe2a 	bl	8008716 <xTaskCreateStatic>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <vTaskStartScheduler+0xac>)
 8008ac6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <vTaskStartScheduler+0xac>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e001      	b.n	8008ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d115      	bne.n	8008b0c <vTaskStartScheduler+0x80>
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008af2:	4b12      	ldr	r3, [pc, #72]	; (8008b3c <vTaskStartScheduler+0xb0>)
 8008af4:	f04f 32ff 	mov.w	r2, #4294967295
 8008af8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008afa:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <vTaskStartScheduler+0xb4>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008b00:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <vTaskStartScheduler+0xb8>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b06:	f000 fd53 	bl	80095b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b0a:	e00d      	b.n	8008b28 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b12:	d109      	bne.n	8008b28 <vTaskStartScheduler+0x9c>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e7fe      	b.n	8008b26 <vTaskStartScheduler+0x9a>
}
 8008b28:	bf00      	nop
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0800a55c 	.word	0x0800a55c
 8008b34:	080090d9 	.word	0x080090d9
 8008b38:	20000430 	.word	0x20000430
 8008b3c:	2000042c 	.word	0x2000042c
 8008b40:	20000418 	.word	0x20000418
 8008b44:	20000410 	.word	0x20000410

08008b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	4a03      	ldr	r2, [pc, #12]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b54:	6013      	str	r3, [r2, #0]
}
 8008b56:	bf00      	nop
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20000434 	.word	0x20000434

08008b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b72:	4b41      	ldr	r3, [pc, #260]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <xTaskResumeAll+0x2a>
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	e7fe      	b.n	8008b8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b8e:	f000 fdad 	bl	80096ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b92:	4b39      	ldr	r3, [pc, #228]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	4a37      	ldr	r2, [pc, #220]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9c:	4b36      	ldr	r3, [pc, #216]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d161      	bne.n	8008c68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ba4:	4b35      	ldr	r3, [pc, #212]	; (8008c7c <xTaskResumeAll+0x118>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d05d      	beq.n	8008c68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bac:	e02e      	b.n	8008c0c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008bae:	4b34      	ldr	r3, [pc, #208]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3318      	adds	r3, #24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff f854 	bl	8007c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff f84f 	bl	8007c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	2201      	movs	r2, #1
 8008bd0:	409a      	lsls	r2, r3
 8008bd2:	4b2c      	ldr	r3, [pc, #176]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4a27      	ldr	r2, [pc, #156]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bea:	441a      	add	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fe ffdb 	bl	8007bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4b23      	ldr	r3, [pc, #140]	; (8008c8c <xTaskResumeAll+0x128>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d302      	bcc.n	8008c0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008c06:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1cc      	bne.n	8008bae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c1a:	f000 fb0f 	bl	800923c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c1e:	4b1d      	ldr	r3, [pc, #116]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c2a:	f000 f837 	bl	8008c9c <xTaskIncrementTick>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008c34:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f1      	bne.n	8008c2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008c46:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c4c:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c54:	2301      	movs	r3, #1
 8008c56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c68:	f000 fd6e 	bl	8009748 <vPortExitCritical>

	return xAlreadyYielded;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000434 	.word	0x20000434
 8008c7c:	2000040c 	.word	0x2000040c
 8008c80:	200003cc 	.word	0x200003cc
 8008c84:	20000414 	.word	0x20000414
 8008c88:	20000310 	.word	0x20000310
 8008c8c:	2000030c 	.word	0x2000030c
 8008c90:	20000420 	.word	0x20000420
 8008c94:	2000041c 	.word	0x2000041c
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca6:	4b50      	ldr	r3, [pc, #320]	; (8008de8 <xTaskIncrementTick+0x14c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f040 808c 	bne.w	8008dc8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb0:	4b4e      	ldr	r3, [pc, #312]	; (8008dec <xTaskIncrementTick+0x150>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cb8:	4a4c      	ldr	r2, [pc, #304]	; (8008dec <xTaskIncrementTick+0x150>)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d11f      	bne.n	8008d04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cc4:	4b4a      	ldr	r3, [pc, #296]	; (8008df0 <xTaskIncrementTick+0x154>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <xTaskIncrementTick+0x46>
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskIncrementTick+0x44>
 8008ce2:	4b43      	ldr	r3, [pc, #268]	; (8008df0 <xTaskIncrementTick+0x154>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <xTaskIncrementTick+0x158>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a40      	ldr	r2, [pc, #256]	; (8008df0 <xTaskIncrementTick+0x154>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	4a40      	ldr	r2, [pc, #256]	; (8008df4 <xTaskIncrementTick+0x158>)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	4b40      	ldr	r3, [pc, #256]	; (8008df8 <xTaskIncrementTick+0x15c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	4a3e      	ldr	r2, [pc, #248]	; (8008df8 <xTaskIncrementTick+0x15c>)
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	f000 fa9c 	bl	800923c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d04:	4b3d      	ldr	r3, [pc, #244]	; (8008dfc <xTaskIncrementTick+0x160>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d34d      	bcc.n	8008daa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d0e:	4b38      	ldr	r3, [pc, #224]	; (8008df0 <xTaskIncrementTick+0x154>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <xTaskIncrementTick+0x80>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <xTaskIncrementTick+0x82>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d004      	beq.n	8008d2c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d22:	4b36      	ldr	r3, [pc, #216]	; (8008dfc <xTaskIncrementTick+0x160>)
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295
 8008d28:	601a      	str	r2, [r3, #0]
					break;
 8008d2a:	e03e      	b.n	8008daa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d2c:	4b30      	ldr	r3, [pc, #192]	; (8008df0 <xTaskIncrementTick+0x154>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d203      	bcs.n	8008d4c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d44:	4a2d      	ldr	r2, [pc, #180]	; (8008dfc <xTaskIncrementTick+0x160>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6013      	str	r3, [r2, #0]
						break;
 8008d4a:	e02e      	b.n	8008daa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe ff89 	bl	8007c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d004      	beq.n	8008d68 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	3318      	adds	r3, #24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe ff80 	bl	8007c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	409a      	lsls	r2, r3
 8008d70:	4b23      	ldr	r3, [pc, #140]	; (8008e00 <xTaskIncrementTick+0x164>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <xTaskIncrementTick+0x164>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <xTaskIncrementTick+0x168>)
 8008d88:	441a      	add	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fe ff0c 	bl	8007bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <xTaskIncrementTick+0x16c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d3b4      	bcc.n	8008d0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008da4:	2301      	movs	r3, #1
 8008da6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da8:	e7b1      	b.n	8008d0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008daa:	4b17      	ldr	r3, [pc, #92]	; (8008e08 <xTaskIncrementTick+0x16c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4914      	ldr	r1, [pc, #80]	; (8008e04 <xTaskIncrementTick+0x168>)
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d907      	bls.n	8008dd2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e004      	b.n	8008dd2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008dc8:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <xTaskIncrementTick+0x170>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	4a0f      	ldr	r2, [pc, #60]	; (8008e0c <xTaskIncrementTick+0x170>)
 8008dd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008dd2:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <xTaskIncrementTick+0x174>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008dde:	697b      	ldr	r3, [r7, #20]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000434 	.word	0x20000434
 8008dec:	20000410 	.word	0x20000410
 8008df0:	200003c4 	.word	0x200003c4
 8008df4:	200003c8 	.word	0x200003c8
 8008df8:	20000424 	.word	0x20000424
 8008dfc:	2000042c 	.word	0x2000042c
 8008e00:	20000414 	.word	0x20000414
 8008e04:	20000310 	.word	0x20000310
 8008e08:	2000030c 	.word	0x2000030c
 8008e0c:	2000041c 	.word	0x2000041c
 8008e10:	20000420 	.word	0x20000420

08008e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e1a:	4b26      	ldr	r3, [pc, #152]	; (8008eb4 <vTaskSwitchContext+0xa0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e22:	4b25      	ldr	r3, [pc, #148]	; (8008eb8 <vTaskSwitchContext+0xa4>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e28:	e03e      	b.n	8008ea8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008e2a:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <vTaskSwitchContext+0xa4>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <vTaskSwitchContext+0xa8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	fab3 f383 	clz	r3, r3
 8008e3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	f1c3 031f 	rsb	r3, r3, #31
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	491e      	ldr	r1, [pc, #120]	; (8008ec0 <vTaskSwitchContext+0xac>)
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	440b      	add	r3, r1
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <vTaskSwitchContext+0x5a>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	e7fe      	b.n	8008e6c <vTaskSwitchContext+0x58>
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4a11      	ldr	r2, [pc, #68]	; (8008ec0 <vTaskSwitchContext+0xac>)
 8008e7a:	4413      	add	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d104      	bne.n	8008e9e <vTaskSwitchContext+0x8a>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a07      	ldr	r2, [pc, #28]	; (8008ec4 <vTaskSwitchContext+0xb0>)
 8008ea6:	6013      	str	r3, [r2, #0]
}
 8008ea8:	bf00      	nop
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	20000434 	.word	0x20000434
 8008eb8:	20000420 	.word	0x20000420
 8008ebc:	20000414 	.word	0x20000414
 8008ec0:	20000310 	.word	0x20000310
 8008ec4:	2000030c 	.word	0x2000030c

08008ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d109      	bne.n	8008eec <vTaskPlaceOnEventList+0x24>
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	e7fe      	b.n	8008eea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <vTaskPlaceOnEventList+0x44>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3318      	adds	r3, #24
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7fe fe7e 	bl	8007bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008efa:	2101      	movs	r1, #1
 8008efc:	6838      	ldr	r0, [r7, #0]
 8008efe:	f000 fa65 	bl	80093cc <prvAddCurrentTaskToDelayedList>
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	2000030c 	.word	0x2000030c

08008f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <xTaskRemoveFromEventList+0x2a>
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	e7fe      	b.n	8008f38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	3318      	adds	r3, #24
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fe92 	bl	8007c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f44:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <xTaskRemoveFromEventList+0xac>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d11c      	bne.n	8008f86 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fe89 	bl	8007c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	409a      	lsls	r2, r3
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <xTaskRemoveFromEventList+0xb0>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <xTaskRemoveFromEventList+0xb0>)
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <xTaskRemoveFromEventList+0xb4>)
 8008f76:	441a      	add	r2, r3
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	f7fe fe15 	bl	8007bae <vListInsertEnd>
 8008f84:	e005      	b.n	8008f92 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3318      	adds	r3, #24
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	480e      	ldr	r0, [pc, #56]	; (8008fc8 <xTaskRemoveFromEventList+0xb8>)
 8008f8e:	f7fe fe0e 	bl	8007bae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f96:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <xTaskRemoveFromEventList+0xbc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d905      	bls.n	8008fac <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <xTaskRemoveFromEventList+0xc0>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	e001      	b.n	8008fb0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000434 	.word	0x20000434
 8008fc0:	20000414 	.word	0x20000414
 8008fc4:	20000310 	.word	0x20000310
 8008fc8:	200003cc 	.word	0x200003cc
 8008fcc:	2000030c 	.word	0x2000030c
 8008fd0:	20000420 	.word	0x20000420

08008fd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <vTaskInternalSetTimeOutState+0x24>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fe4:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <vTaskInternalSetTimeOutState+0x28>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	605a      	str	r2, [r3, #4]
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	20000424 	.word	0x20000424
 8008ffc:	20000410 	.word	0x20000410

08009000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <xTaskCheckForTimeOut+0x24>
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	613b      	str	r3, [r7, #16]
 8009022:	e7fe      	b.n	8009022 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <xTaskCheckForTimeOut+0x3e>
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	e7fe      	b.n	800903c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800903e:	f000 fb55 	bl	80096ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009042:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <xTaskCheckForTimeOut+0xb8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905a:	d102      	bne.n	8009062 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	e023      	b.n	80090aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <xTaskCheckForTimeOut+0xbc>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d007      	beq.n	800907e <xTaskCheckForTimeOut+0x7e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	429a      	cmp	r2, r3
 8009076:	d302      	bcc.n	800907e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	e015      	b.n	80090aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	429a      	cmp	r2, r3
 8009086:	d20b      	bcs.n	80090a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ff9d 	bl	8008fd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
 800909e:	e004      	b.n	80090aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090aa:	f000 fb4d 	bl	8009748 <vPortExitCritical>

	return xReturn;
 80090ae:	69fb      	ldr	r3, [r7, #28]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3720      	adds	r7, #32
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20000410 	.word	0x20000410
 80090bc:	20000424 	.word	0x20000424

080090c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <vTaskMissedYield+0x14>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
}
 80090ca:	bf00      	nop
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20000420 	.word	0x20000420

080090d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090e0:	f000 f852 	bl	8009188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <prvIdleTask+0x28>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d9f9      	bls.n	80090e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <prvIdleTask+0x2c>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090fc:	e7f0      	b.n	80090e0 <prvIdleTask+0x8>
 80090fe:	bf00      	nop
 8009100:	20000310 	.word	0x20000310
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800910e:	2300      	movs	r3, #0
 8009110:	607b      	str	r3, [r7, #4]
 8009112:	e00c      	b.n	800912e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a12      	ldr	r2, [pc, #72]	; (8009168 <prvInitialiseTaskLists+0x60>)
 8009120:	4413      	add	r3, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fd16 	bl	8007b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3301      	adds	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b06      	cmp	r3, #6
 8009132:	d9ef      	bls.n	8009114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009134:	480d      	ldr	r0, [pc, #52]	; (800916c <prvInitialiseTaskLists+0x64>)
 8009136:	f7fe fd0d 	bl	8007b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800913a:	480d      	ldr	r0, [pc, #52]	; (8009170 <prvInitialiseTaskLists+0x68>)
 800913c:	f7fe fd0a 	bl	8007b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009140:	480c      	ldr	r0, [pc, #48]	; (8009174 <prvInitialiseTaskLists+0x6c>)
 8009142:	f7fe fd07 	bl	8007b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009146:	480c      	ldr	r0, [pc, #48]	; (8009178 <prvInitialiseTaskLists+0x70>)
 8009148:	f7fe fd04 	bl	8007b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800914c:	480b      	ldr	r0, [pc, #44]	; (800917c <prvInitialiseTaskLists+0x74>)
 800914e:	f7fe fd01 	bl	8007b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009152:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <prvInitialiseTaskLists+0x78>)
 8009154:	4a05      	ldr	r2, [pc, #20]	; (800916c <prvInitialiseTaskLists+0x64>)
 8009156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <prvInitialiseTaskLists+0x7c>)
 800915a:	4a05      	ldr	r2, [pc, #20]	; (8009170 <prvInitialiseTaskLists+0x68>)
 800915c:	601a      	str	r2, [r3, #0]
}
 800915e:	bf00      	nop
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000310 	.word	0x20000310
 800916c:	2000039c 	.word	0x2000039c
 8009170:	200003b0 	.word	0x200003b0
 8009174:	200003cc 	.word	0x200003cc
 8009178:	200003e0 	.word	0x200003e0
 800917c:	200003f8 	.word	0x200003f8
 8009180:	200003c4 	.word	0x200003c4
 8009184:	200003c8 	.word	0x200003c8

08009188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800918e:	e019      	b.n	80091c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009190:	f000 faac 	bl	80096ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009194:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <prvCheckTasksWaitingTermination+0x4c>)
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3304      	adds	r3, #4
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe fd61 	bl	8007c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvCheckTasksWaitingTermination+0x50>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <prvCheckTasksWaitingTermination+0x50>)
 80091ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvCheckTasksWaitingTermination+0x54>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	4a09      	ldr	r2, [pc, #36]	; (80091dc <prvCheckTasksWaitingTermination+0x54>)
 80091b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ba:	f000 fac5 	bl	8009748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f80e 	bl	80091e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <prvCheckTasksWaitingTermination+0x54>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e1      	bne.n	8009190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	200003e0 	.word	0x200003e0
 80091d8:	2000040c 	.word	0x2000040c
 80091dc:	200003f4 	.word	0x200003f4

080091e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d108      	bne.n	8009204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fc54 	bl	8009aa4 <vPortFree>
				vPortFree( pxTCB );
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fc51 	bl	8009aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009202:	e017      	b.n	8009234 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800920a:	2b01      	cmp	r3, #1
 800920c:	d103      	bne.n	8009216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fc48 	bl	8009aa4 <vPortFree>
	}
 8009214:	e00e      	b.n	8009234 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800921c:	2b02      	cmp	r3, #2
 800921e:	d009      	beq.n	8009234 <prvDeleteTCB+0x54>
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e7fe      	b.n	8009232 <prvDeleteTCB+0x52>
	}
 8009234:	bf00      	nop
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009242:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <prvResetNextTaskUnblockTime+0x44>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <prvResetNextTaskUnblockTime+0x14>
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <prvResetNextTaskUnblockTime+0x16>
 8009250:	2300      	movs	r3, #0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d004      	beq.n	8009260 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009256:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <prvResetNextTaskUnblockTime+0x48>)
 8009258:	f04f 32ff 	mov.w	r2, #4294967295
 800925c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800925e:	e008      	b.n	8009272 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <prvResetNextTaskUnblockTime+0x44>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4a05      	ldr	r2, [pc, #20]	; (8009284 <prvResetNextTaskUnblockTime+0x48>)
 8009270:	6013      	str	r3, [r2, #0]
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	200003c4 	.word	0x200003c4
 8009284:	2000042c 	.word	0x2000042c

08009288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800928e:	4b0b      	ldr	r3, [pc, #44]	; (80092bc <xTaskGetSchedulerState+0x34>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009296:	2301      	movs	r3, #1
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	e008      	b.n	80092ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929c:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <xTaskGetSchedulerState+0x38>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092a4:	2302      	movs	r3, #2
 80092a6:	607b      	str	r3, [r7, #4]
 80092a8:	e001      	b.n	80092ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092aa:	2300      	movs	r3, #0
 80092ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092ae:	687b      	ldr	r3, [r7, #4]
	}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	20000418 	.word	0x20000418
 80092c0:	20000434 	.word	0x20000434

080092c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d06c      	beq.n	80093b4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092da:	4b39      	ldr	r3, [pc, #228]	; (80093c0 <xTaskPriorityDisinherit+0xfc>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d009      	beq.n	80092f8 <xTaskPriorityDisinherit+0x34>
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	e7fe      	b.n	80092f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <xTaskPriorityDisinherit+0x50>
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60bb      	str	r3, [r7, #8]
 8009312:	e7fe      	b.n	8009312 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009318:	1e5a      	subs	r2, r3, #1
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009326:	429a      	cmp	r2, r3
 8009328:	d044      	beq.n	80093b4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800932e:	2b00      	cmp	r3, #0
 8009330:	d140      	bne.n	80093b4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	3304      	adds	r3, #4
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fc96 	bl	8007c68 <uxListRemove>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d115      	bne.n	800936e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009346:	491f      	ldr	r1, [pc, #124]	; (80093c4 <xTaskPriorityDisinherit+0x100>)
 8009348:	4613      	mov	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <xTaskPriorityDisinherit+0xaa>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	2201      	movs	r2, #1
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	43da      	mvns	r2, r3
 8009364:	4b18      	ldr	r3, [pc, #96]	; (80093c8 <xTaskPriorityDisinherit+0x104>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4013      	ands	r3, r2
 800936a:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <xTaskPriorityDisinherit+0x104>)
 800936c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	f1c3 0207 	rsb	r2, r3, #7
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	2201      	movs	r2, #1
 8009388:	409a      	lsls	r2, r3
 800938a:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <xTaskPriorityDisinherit+0x104>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4313      	orrs	r3, r2
 8009390:	4a0d      	ldr	r2, [pc, #52]	; (80093c8 <xTaskPriorityDisinherit+0x104>)
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4a08      	ldr	r2, [pc, #32]	; (80093c4 <xTaskPriorityDisinherit+0x100>)
 80093a2:	441a      	add	r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4619      	mov	r1, r3
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7fe fbff 	bl	8007bae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093b4:	697b      	ldr	r3, [r7, #20]
	}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	2000030c 	.word	0x2000030c
 80093c4:	20000310 	.word	0x20000310
 80093c8:	20000414 	.word	0x20000414

080093cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093d6:	4b29      	ldr	r3, [pc, #164]	; (800947c <prvAddCurrentTaskToDelayedList+0xb0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093dc:	4b28      	ldr	r3, [pc, #160]	; (8009480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3304      	adds	r3, #4
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fc40 	bl	8007c68 <uxListRemove>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10b      	bne.n	8009406 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80093ee:	4b24      	ldr	r3, [pc, #144]	; (8009480 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	2201      	movs	r2, #1
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	43da      	mvns	r2, r3
 80093fc:	4b21      	ldr	r3, [pc, #132]	; (8009484 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4013      	ands	r3, r2
 8009402:	4a20      	ldr	r2, [pc, #128]	; (8009484 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009404:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d10a      	bne.n	8009424 <prvAddCurrentTaskToDelayedList+0x58>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d007      	beq.n	8009424 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009414:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	481a      	ldr	r0, [pc, #104]	; (8009488 <prvAddCurrentTaskToDelayedList+0xbc>)
 800941e:	f7fe fbc6 	bl	8007bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009422:	e026      	b.n	8009472 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800942c:	4b14      	ldr	r3, [pc, #80]	; (8009480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	429a      	cmp	r2, r3
 800943a:	d209      	bcs.n	8009450 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800943c:	4b13      	ldr	r3, [pc, #76]	; (800948c <prvAddCurrentTaskToDelayedList+0xc0>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3304      	adds	r3, #4
 8009446:	4619      	mov	r1, r3
 8009448:	4610      	mov	r0, r2
 800944a:	f7fe fbd4 	bl	8007bf6 <vListInsert>
}
 800944e:	e010      	b.n	8009472 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009450:	4b0f      	ldr	r3, [pc, #60]	; (8009490 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7fe fbca 	bl	8007bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d202      	bcs.n	8009472 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800946c:	4a09      	ldr	r2, [pc, #36]	; (8009494 <prvAddCurrentTaskToDelayedList+0xc8>)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	6013      	str	r3, [r2, #0]
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000410 	.word	0x20000410
 8009480:	2000030c 	.word	0x2000030c
 8009484:	20000414 	.word	0x20000414
 8009488:	200003f8 	.word	0x200003f8
 800948c:	200003c8 	.word	0x200003c8
 8009490:	200003c4 	.word	0x200003c4
 8009494:	2000042c 	.word	0x2000042c

08009498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3b04      	subs	r3, #4
 80094a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3b04      	subs	r3, #4
 80094b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094c8:	4a0c      	ldr	r2, [pc, #48]	; (80094fc <pxPortInitialiseStack+0x64>)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3b14      	subs	r3, #20
 80094d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b04      	subs	r3, #4
 80094de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f06f 0202 	mvn.w	r2, #2
 80094e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3b20      	subs	r3, #32
 80094ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094ee:	68fb      	ldr	r3, [r7, #12]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	08009501 	.word	0x08009501

08009500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800950a:	4b11      	ldr	r3, [pc, #68]	; (8009550 <prvTaskExitError+0x50>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d009      	beq.n	8009528 <prvTaskExitError+0x28>
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	e7fe      	b.n	8009526 <prvTaskExitError+0x26>
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800953a:	bf00      	nop
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0fc      	beq.n	800953c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009542:	bf00      	nop
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	2000002c 	.word	0x2000002c
	...

08009560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <pxCurrentTCBConst2>)
 8009562:	6819      	ldr	r1, [r3, #0]
 8009564:	6808      	ldr	r0, [r1, #0]
 8009566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956a:	f380 8809 	msr	PSP, r0
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f04f 0000 	mov.w	r0, #0
 8009576:	f380 8811 	msr	BASEPRI, r0
 800957a:	4770      	bx	lr
 800957c:	f3af 8000 	nop.w

08009580 <pxCurrentTCBConst2>:
 8009580:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop

08009588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009588:	4808      	ldr	r0, [pc, #32]	; (80095ac <prvPortStartFirstTask+0x24>)
 800958a:	6800      	ldr	r0, [r0, #0]
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	f380 8808 	msr	MSP, r0
 8009592:	f04f 0000 	mov.w	r0, #0
 8009596:	f380 8814 	msr	CONTROL, r0
 800959a:	b662      	cpsie	i
 800959c:	b661      	cpsie	f
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	df00      	svc	0
 80095a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095aa:	bf00      	nop
 80095ac:	e000ed08 	.word	0xe000ed08

080095b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095b6:	4b44      	ldr	r3, [pc, #272]	; (80096c8 <xPortStartScheduler+0x118>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a44      	ldr	r2, [pc, #272]	; (80096cc <xPortStartScheduler+0x11c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d109      	bne.n	80095d4 <xPortStartScheduler+0x24>
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	613b      	str	r3, [r7, #16]
 80095d2:	e7fe      	b.n	80095d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095d4:	4b3c      	ldr	r3, [pc, #240]	; (80096c8 <xPortStartScheduler+0x118>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a3d      	ldr	r2, [pc, #244]	; (80096d0 <xPortStartScheduler+0x120>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d109      	bne.n	80095f2 <xPortStartScheduler+0x42>
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	e7fe      	b.n	80095f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095f2:	4b38      	ldr	r3, [pc, #224]	; (80096d4 <xPortStartScheduler+0x124>)
 80095f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	22ff      	movs	r2, #255	; 0xff
 8009602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009614:	b2da      	uxtb	r2, r3
 8009616:	4b30      	ldr	r3, [pc, #192]	; (80096d8 <xPortStartScheduler+0x128>)
 8009618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800961a:	4b30      	ldr	r3, [pc, #192]	; (80096dc <xPortStartScheduler+0x12c>)
 800961c:	2207      	movs	r2, #7
 800961e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009620:	e009      	b.n	8009636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009622:	4b2e      	ldr	r3, [pc, #184]	; (80096dc <xPortStartScheduler+0x12c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3b01      	subs	r3, #1
 8009628:	4a2c      	ldr	r2, [pc, #176]	; (80096dc <xPortStartScheduler+0x12c>)
 800962a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	b2db      	uxtb	r3, r3
 8009634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963e:	2b80      	cmp	r3, #128	; 0x80
 8009640:	d0ef      	beq.n	8009622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009642:	4b26      	ldr	r3, [pc, #152]	; (80096dc <xPortStartScheduler+0x12c>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f1c3 0307 	rsb	r3, r3, #7
 800964a:	2b04      	cmp	r3, #4
 800964c:	d009      	beq.n	8009662 <xPortStartScheduler+0xb2>
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	60bb      	str	r3, [r7, #8]
 8009660:	e7fe      	b.n	8009660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009662:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <xPortStartScheduler+0x12c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	4a1c      	ldr	r2, [pc, #112]	; (80096dc <xPortStartScheduler+0x12c>)
 800966a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <xPortStartScheduler+0x12c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009674:	4a19      	ldr	r2, [pc, #100]	; (80096dc <xPortStartScheduler+0x12c>)
 8009676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	b2da      	uxtb	r2, r3
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009680:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <xPortStartScheduler+0x130>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a16      	ldr	r2, [pc, #88]	; (80096e0 <xPortStartScheduler+0x130>)
 8009686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800968a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800968c:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <xPortStartScheduler+0x130>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a13      	ldr	r2, [pc, #76]	; (80096e0 <xPortStartScheduler+0x130>)
 8009692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009698:	f000 f8d6 	bl	8009848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800969c:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <xPortStartScheduler+0x134>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096a2:	f000 f8f5 	bl	8009890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096a6:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <xPortStartScheduler+0x138>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a0f      	ldr	r2, [pc, #60]	; (80096e8 <xPortStartScheduler+0x138>)
 80096ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096b2:	f7ff ff69 	bl	8009588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096b6:	f7ff fbad 	bl	8008e14 <vTaskSwitchContext>
	prvTaskExitError();
 80096ba:	f7ff ff21 	bl	8009500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	e000ed00 	.word	0xe000ed00
 80096cc:	410fc271 	.word	0x410fc271
 80096d0:	410fc270 	.word	0x410fc270
 80096d4:	e000e400 	.word	0xe000e400
 80096d8:	20000438 	.word	0x20000438
 80096dc:	2000043c 	.word	0x2000043c
 80096e0:	e000ed20 	.word	0xe000ed20
 80096e4:	2000002c 	.word	0x2000002c
 80096e8:	e000ef34 	.word	0xe000ef34

080096ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009704:	4b0e      	ldr	r3, [pc, #56]	; (8009740 <vPortEnterCritical+0x54>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	4a0d      	ldr	r2, [pc, #52]	; (8009740 <vPortEnterCritical+0x54>)
 800970c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800970e:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <vPortEnterCritical+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d10e      	bne.n	8009734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009716:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <vPortEnterCritical+0x58>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <vPortEnterCritical+0x48>
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	e7fe      	b.n	8009732 <vPortEnterCritical+0x46>
	}
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	2000002c 	.word	0x2000002c
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800974e:	4b11      	ldr	r3, [pc, #68]	; (8009794 <vPortExitCritical+0x4c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <vPortExitCritical+0x22>
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	607b      	str	r3, [r7, #4]
 8009768:	e7fe      	b.n	8009768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vPortExitCritical+0x4c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3b01      	subs	r3, #1
 8009770:	4a08      	ldr	r2, [pc, #32]	; (8009794 <vPortExitCritical+0x4c>)
 8009772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009774:	4b07      	ldr	r3, [pc, #28]	; (8009794 <vPortExitCritical+0x4c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <vPortExitCritical+0x3e>
 800977c:	2300      	movs	r3, #0
 800977e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	2000002c 	.word	0x2000002c
	...

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097c4:	f380 8811 	msr	BASEPRI, r0
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f7ff fb20 	bl	8008e14 <vTaskSwitchContext>
 80097d4:	f04f 0000 	mov.w	r0, #0
 80097d8:	f380 8811 	msr	BASEPRI, r0
 80097dc:	bc09      	pop	{r0, r3}
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	f01e 0f10 	tst.w	lr, #16
 80097ea:	bf08      	it	eq
 80097ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f0:	f380 8809 	msr	PSP, r0
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst>:
 8009800:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009820:	f7ff fa3c 	bl	8008c9c <xTaskIncrementTick>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <SysTick_Handler+0x3c>)
 800982c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	2300      	movs	r3, #0
 8009834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800984c:	4b0b      	ldr	r3, [pc, #44]	; (800987c <vPortSetupTimerInterrupt+0x34>)
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009852:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <vPortSetupTimerInterrupt+0x38>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <vPortSetupTimerInterrupt+0x3c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a0a      	ldr	r2, [pc, #40]	; (8009888 <vPortSetupTimerInterrupt+0x40>)
 800985e:	fba2 2303 	umull	r2, r3, r2, r3
 8009862:	099b      	lsrs	r3, r3, #6
 8009864:	4a09      	ldr	r2, [pc, #36]	; (800988c <vPortSetupTimerInterrupt+0x44>)
 8009866:	3b01      	subs	r3, #1
 8009868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800986a:	4b04      	ldr	r3, [pc, #16]	; (800987c <vPortSetupTimerInterrupt+0x34>)
 800986c:	2207      	movs	r2, #7
 800986e:	601a      	str	r2, [r3, #0]
}
 8009870:	bf00      	nop
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	e000e010 	.word	0xe000e010
 8009880:	e000e018 	.word	0xe000e018
 8009884:	20000000 	.word	0x20000000
 8009888:	10624dd3 	.word	0x10624dd3
 800988c:	e000e014 	.word	0xe000e014

08009890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098a0 <vPortEnableVFP+0x10>
 8009894:	6801      	ldr	r1, [r0, #0]
 8009896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800989a:	6001      	str	r1, [r0, #0]
 800989c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800989e:	bf00      	nop
 80098a0:	e000ed88 	.word	0xe000ed88

080098a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098aa:	f3ef 8305 	mrs	r3, IPSR
 80098ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b0f      	cmp	r3, #15
 80098b4:	d913      	bls.n	80098de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098b6:	4a16      	ldr	r2, [pc, #88]	; (8009910 <vPortValidateInterruptPriority+0x6c>)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4413      	add	r3, r2
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c0:	4b14      	ldr	r3, [pc, #80]	; (8009914 <vPortValidateInterruptPriority+0x70>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	7afa      	ldrb	r2, [r7, #11]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d209      	bcs.n	80098de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	607b      	str	r3, [r7, #4]
 80098dc:	e7fe      	b.n	80098dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <vPortValidateInterruptPriority+0x74>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098e6:	4b0d      	ldr	r3, [pc, #52]	; (800991c <vPortValidateInterruptPriority+0x78>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d909      	bls.n	8009902 <vPortValidateInterruptPriority+0x5e>
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	e7fe      	b.n	8009900 <vPortValidateInterruptPriority+0x5c>
	}
 8009902:	bf00      	nop
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	e000e3f0 	.word	0xe000e3f0
 8009914:	20000438 	.word	0x20000438
 8009918:	e000ed0c 	.word	0xe000ed0c
 800991c:	2000043c 	.word	0x2000043c

08009920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800992c:	f7ff f90c 	bl	8008b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009930:	4b57      	ldr	r3, [pc, #348]	; (8009a90 <pvPortMalloc+0x170>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009938:	f000 f90c 	bl	8009b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800993c:	4b55      	ldr	r3, [pc, #340]	; (8009a94 <pvPortMalloc+0x174>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4013      	ands	r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 808c 	bne.w	8009a62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01c      	beq.n	800998a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009950:	2208      	movs	r2, #8
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4413      	add	r3, r2
 8009956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	2b00      	cmp	r3, #0
 8009960:	d013      	beq.n	800998a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f023 0307 	bic.w	r3, r3, #7
 8009968:	3308      	adds	r3, #8
 800996a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	2b00      	cmp	r3, #0
 8009974:	d009      	beq.n	800998a <pvPortMalloc+0x6a>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e7fe      	b.n	8009988 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d068      	beq.n	8009a62 <pvPortMalloc+0x142>
 8009990:	4b41      	ldr	r3, [pc, #260]	; (8009a98 <pvPortMalloc+0x178>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d863      	bhi.n	8009a62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800999a:	4b40      	ldr	r3, [pc, #256]	; (8009a9c <pvPortMalloc+0x17c>)
 800999c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800999e:	4b3f      	ldr	r3, [pc, #252]	; (8009a9c <pvPortMalloc+0x17c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099a4:	e004      	b.n	80099b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d903      	bls.n	80099c2 <pvPortMalloc+0xa2>
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f1      	bne.n	80099a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099c2:	4b33      	ldr	r3, [pc, #204]	; (8009a90 <pvPortMalloc+0x170>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d04a      	beq.n	8009a62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2208      	movs	r2, #8
 80099d2:	4413      	add	r3, r2
 80099d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	1ad2      	subs	r2, r2, r3
 80099e6:	2308      	movs	r3, #8
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d91e      	bls.n	8009a2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <pvPortMalloc+0xf4>
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	e7fe      	b.n	8009a12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	1ad2      	subs	r2, r2, r3
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a26:	69b8      	ldr	r0, [r7, #24]
 8009a28:	f000 f8f6 	bl	8009c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a2c:	4b1a      	ldr	r3, [pc, #104]	; (8009a98 <pvPortMalloc+0x178>)
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	4a18      	ldr	r2, [pc, #96]	; (8009a98 <pvPortMalloc+0x178>)
 8009a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a3a:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <pvPortMalloc+0x178>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <pvPortMalloc+0x180>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d203      	bcs.n	8009a4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <pvPortMalloc+0x178>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a15      	ldr	r2, [pc, #84]	; (8009aa0 <pvPortMalloc+0x180>)
 8009a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <pvPortMalloc+0x174>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a62:	f7ff f87f 	bl	8008b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d009      	beq.n	8009a84 <pvPortMalloc+0x164>
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	e7fe      	b.n	8009a82 <pvPortMalloc+0x162>
	return pvReturn;
 8009a84:	69fb      	ldr	r3, [r7, #28]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3728      	adds	r7, #40	; 0x28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20004048 	.word	0x20004048
 8009a94:	20004054 	.word	0x20004054
 8009a98:	2000404c 	.word	0x2000404c
 8009a9c:	20004040 	.word	0x20004040
 8009aa0:	20004050 	.word	0x20004050

08009aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d046      	beq.n	8009b44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	425b      	negs	r3, r3
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4413      	add	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <vPortFree+0xa8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <vPortFree+0x42>
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e7fe      	b.n	8009ae4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d009      	beq.n	8009b02 <vPortFree+0x5e>
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	e7fe      	b.n	8009b00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <vPortFree+0xa8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d019      	beq.n	8009b44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d115      	bne.n	8009b44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <vPortFree+0xa8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	401a      	ands	r2, r3
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b28:	f7ff f80e 	bl	8008b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <vPortFree+0xac>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4413      	add	r3, r2
 8009b36:	4a06      	ldr	r2, [pc, #24]	; (8009b50 <vPortFree+0xac>)
 8009b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b3a:	6938      	ldr	r0, [r7, #16]
 8009b3c:	f000 f86c 	bl	8009c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009b40:	f7ff f810 	bl	8008b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b44:	bf00      	nop
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20004054 	.word	0x20004054
 8009b50:	2000404c 	.word	0x2000404c

08009b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b60:	4b27      	ldr	r3, [pc, #156]	; (8009c00 <prvHeapInit+0xac>)
 8009b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00c      	beq.n	8009b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3307      	adds	r3, #7
 8009b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0307 	bic.w	r3, r3, #7
 8009b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4a1f      	ldr	r2, [pc, #124]	; (8009c00 <prvHeapInit+0xac>)
 8009b84:	4413      	add	r3, r2
 8009b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b8c:	4a1d      	ldr	r2, [pc, #116]	; (8009c04 <prvHeapInit+0xb0>)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b92:	4b1c      	ldr	r3, [pc, #112]	; (8009c04 <prvHeapInit+0xb0>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4a15      	ldr	r2, [pc, #84]	; (8009c08 <prvHeapInit+0xb4>)
 8009bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <prvHeapInit+0xb4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bbe:	4b12      	ldr	r3, [pc, #72]	; (8009c08 <prvHeapInit+0xb4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <prvHeapInit+0xb4>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <prvHeapInit+0xb8>)
 8009be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4a09      	ldr	r2, [pc, #36]	; (8009c10 <prvHeapInit+0xbc>)
 8009bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <prvHeapInit+0xc0>)
 8009bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009bf2:	601a      	str	r2, [r3, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20000440 	.word	0x20000440
 8009c04:	20004040 	.word	0x20004040
 8009c08:	20004048 	.word	0x20004048
 8009c0c:	20004050 	.word	0x20004050
 8009c10:	2000404c 	.word	0x2000404c
 8009c14:	20004054 	.word	0x20004054

08009c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c20:	4b28      	ldr	r3, [pc, #160]	; (8009cc4 <prvInsertBlockIntoFreeList+0xac>)
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e002      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x14>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d8f7      	bhi.n	8009c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d108      	bne.n	8009c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	441a      	add	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	441a      	add	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d118      	bne.n	8009ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d00d      	beq.n	8009c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	e008      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e003      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d002      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	20004040 	.word	0x20004040
 8009cc8:	20004048 	.word	0x20004048

08009ccc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	490e      	ldr	r1, [pc, #56]	; (8009d0c <MX_USB_HOST_Init+0x40>)
 8009cd4:	480e      	ldr	r0, [pc, #56]	; (8009d10 <MX_USB_HOST_Init+0x44>)
 8009cd6:	f7fc f9ad 	bl	8006034 <USBH_Init>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ce0:	f7f6 fe9e 	bl	8000a20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ce4:	490b      	ldr	r1, [pc, #44]	; (8009d14 <MX_USB_HOST_Init+0x48>)
 8009ce6:	480a      	ldr	r0, [pc, #40]	; (8009d10 <MX_USB_HOST_Init+0x44>)
 8009ce8:	f7fc fa3f 	bl	800616a <USBH_RegisterClass>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009cf2:	f7f6 fe95 	bl	8000a20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009cf6:	4806      	ldr	r0, [pc, #24]	; (8009d10 <MX_USB_HOST_Init+0x44>)
 8009cf8:	f7fc fac4 	bl	8006284 <USBH_Start>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d02:	f7f6 fe8d 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d06:	bf00      	nop
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	08009d19 	.word	0x08009d19
 8009d10:	200041e8 	.word	0x200041e8
 8009d14:	2000000c 	.word	0x2000000c

08009d18 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d819      	bhi.n	8009d60 <USBH_UserProcess+0x48>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <USBH_UserProcess+0x1c>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d61 	.word	0x08009d61
 8009d38:	08009d51 	.word	0x08009d51
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d59 	.word	0x08009d59
 8009d44:	08009d49 	.word	0x08009d49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009d48:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <USBH_UserProcess+0x58>)
 8009d4a:	2203      	movs	r2, #3
 8009d4c:	701a      	strb	r2, [r3, #0]
  break;
 8009d4e:	e008      	b.n	8009d62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <USBH_UserProcess+0x58>)
 8009d52:	2202      	movs	r2, #2
 8009d54:	701a      	strb	r2, [r3, #0]
  break;
 8009d56:	e004      	b.n	8009d62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <USBH_UserProcess+0x58>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	701a      	strb	r2, [r3, #0]
  break;
 8009d5e:	e000      	b.n	8009d62 <USBH_UserProcess+0x4a>

  default:
  break;
 8009d60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	20004058 	.word	0x20004058

08009d74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08a      	sub	sp, #40	; 0x28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d7c:	f107 0314 	add.w	r3, r7, #20
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	605a      	str	r2, [r3, #4]
 8009d86:	609a      	str	r2, [r3, #8]
 8009d88:	60da      	str	r2, [r3, #12]
 8009d8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d94:	d147      	bne.n	8009e26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d96:	2300      	movs	r3, #0
 8009d98:	613b      	str	r3, [r7, #16]
 8009d9a:	4b25      	ldr	r3, [pc, #148]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9e:	4a24      	ldr	r2, [pc, #144]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009da0:	f043 0301 	orr.w	r3, r3, #1
 8009da4:	6313      	str	r3, [r2, #48]	; 0x30
 8009da6:	4b22      	ldr	r3, [pc, #136]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	613b      	str	r3, [r7, #16]
 8009db0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009db8:	2300      	movs	r3, #0
 8009dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	481b      	ldr	r0, [pc, #108]	; (8009e34 <HAL_HCD_MspInit+0xc0>)
 8009dc8:	f7f7 f9f4 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009dcc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009dde:	230a      	movs	r3, #10
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009de2:	f107 0314 	add.w	r3, r7, #20
 8009de6:	4619      	mov	r1, r3
 8009de8:	4812      	ldr	r0, [pc, #72]	; (8009e34 <HAL_HCD_MspInit+0xc0>)
 8009dea:	f7f7 f9e3 	bl	80011b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009dee:	4b10      	ldr	r3, [pc, #64]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df2:	4a0f      	ldr	r2, [pc, #60]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df8:	6353      	str	r3, [r2, #52]	; 0x34
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	4b0c      	ldr	r3, [pc, #48]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e02:	4a0b      	ldr	r2, [pc, #44]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e08:	6453      	str	r3, [r2, #68]	; 0x44
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <HAL_HCD_MspInit+0xbc>)
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009e16:	2200      	movs	r2, #0
 8009e18:	2105      	movs	r1, #5
 8009e1a:	2043      	movs	r0, #67	; 0x43
 8009e1c:	f7f7 f9a0 	bl	8001160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e20:	2043      	movs	r0, #67	; 0x43
 8009e22:	f7f7 f9b9 	bl	8001198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e26:	bf00      	nop
 8009e28:	3728      	adds	r7, #40	; 0x28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	40023800 	.word	0x40023800
 8009e34:	40020000 	.word	0x40020000

08009e38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fc fd6f 	bl	800692a <USBH_LL_IncTimer>
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fc fdb4 	bl	80069d0 <USBH_LL_Connect>
}
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fc fdda 	bl	8006a38 <USBH_LL_Disconnect>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fc fe18 	bl	8006ad8 <USBH_LL_NotifyURBChange>
#endif
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fc fd5d 	bl	800697e <USBH_LL_PortEnabled>
} 
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fc fd5d 	bl	800699a <USBH_LL_PortDisabled>
} 
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d12a      	bne.n	8009f50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009efa:	4a18      	ldr	r2, [pc, #96]	; (8009f5c <USBH_LL_Init+0x74>)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a15      	ldr	r2, [pc, #84]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f0a:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009f12:	4b12      	ldr	r3, [pc, #72]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f14:	2208      	movs	r2, #8
 8009f16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009f18:	4b10      	ldr	r3, [pc, #64]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009f24:	4b0d      	ldr	r3, [pc, #52]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f26:	2202      	movs	r2, #2
 8009f28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009f30:	480a      	ldr	r0, [pc, #40]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f32:	f7f7 fada 	bl	80014ea <HAL_HCD_Init>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009f3c:	f7f6 fd70 	bl	8000a20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009f40:	4806      	ldr	r0, [pc, #24]	; (8009f5c <USBH_LL_Init+0x74>)
 8009f42:	f7f7 fed5 	bl	8001cf0 <HAL_HCD_GetCurrentFrame>
 8009f46:	4603      	mov	r3, r0
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7fc fcde 	bl	800690c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	200045c0 	.word	0x200045c0

08009f60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7f7 fe42 	bl	8001c00 <HAL_HCD_Start>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 f95c 	bl	800a240 <USBH_Get_USB_Status>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7f7 fe4a 	bl	8001c46 <HAL_HCD_Stop>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f941 	bl	800a240 <USBH_Get_USB_Status>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7f7 fe94 	bl	8001d0c <HAL_HCD_GetCurrentSpeed>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d007      	beq.n	8009ffa <USBH_LL_GetSpeed+0x2e>
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d302      	bcc.n	8009ff4 <USBH_LL_GetSpeed+0x28>
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d006      	beq.n	800a000 <USBH_LL_GetSpeed+0x34>
 8009ff2:	e008      	b.n	800a006 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff8:	e008      	b.n	800a00c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffe:	e005      	b.n	800a00c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a000:	2302      	movs	r3, #2
 800a002:	73fb      	strb	r3, [r7, #15]
    break;
 800a004:	e002      	b.n	800a00c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800a006:	2301      	movs	r3, #1
 800a008:	73fb      	strb	r3, [r7, #15]
    break;
 800a00a:	bf00      	nop
  }
  return  speed;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7f7 fe27 	bl	8001c80 <HAL_HCD_ResetPort>
 800a032:	4603      	mov	r3, r0
 800a034:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 f901 	bl	800a240 <USBH_Get_USB_Status>
 800a03e:	4603      	mov	r3, r0
 800a040:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a042:	7bbb      	ldrb	r3, [r7, #14]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f7f7 fe2f 	bl	8001cc6 <HAL_HCD_HC_GetXferCount>
 800a068:	4603      	mov	r3, r0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a072:	b590      	push	{r4, r7, lr}
 800a074:	b089      	sub	sp, #36	; 0x24
 800a076:	af04      	add	r7, sp, #16
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	461a      	mov	r2, r3
 800a080:	4603      	mov	r3, r0
 800a082:	70fb      	strb	r3, [r7, #3]
 800a084:	460b      	mov	r3, r1
 800a086:	70bb      	strb	r3, [r7, #2]
 800a088:	4613      	mov	r3, r2
 800a08a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a09a:	787c      	ldrb	r4, [r7, #1]
 800a09c:	78ba      	ldrb	r2, [r7, #2]
 800a09e:	78f9      	ldrb	r1, [r7, #3]
 800a0a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0a2:	9302      	str	r3, [sp, #8]
 800a0a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	f7f7 fa7c 	bl	80015ae <HAL_HCD_HC_Init>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 f8bf 	bl	800a240 <USBH_Get_USB_Status>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd90      	pop	{r4, r7, pc}

0800a0d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f7 faf5 	bl	80016de <HAL_HCD_HC_Halt>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f8a0 	bl	800a240 <USBH_Get_USB_Status>
 800a100:	4603      	mov	r3, r0
 800a102:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a104:	7bbb      	ldrb	r3, [r7, #14]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a10e:	b590      	push	{r4, r7, lr}
 800a110:	b089      	sub	sp, #36	; 0x24
 800a112:	af04      	add	r7, sp, #16
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	4608      	mov	r0, r1
 800a118:	4611      	mov	r1, r2
 800a11a:	461a      	mov	r2, r3
 800a11c:	4603      	mov	r3, r0
 800a11e:	70fb      	strb	r3, [r7, #3]
 800a120:	460b      	mov	r3, r1
 800a122:	70bb      	strb	r3, [r7, #2]
 800a124:	4613      	mov	r3, r2
 800a126:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800a136:	787c      	ldrb	r4, [r7, #1]
 800a138:	78ba      	ldrb	r2, [r7, #2]
 800a13a:	78f9      	ldrb	r1, [r7, #3]
 800a13c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a144:	9302      	str	r3, [sp, #8]
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4623      	mov	r3, r4
 800a152:	f7f7 fae7 	bl	8001724 <HAL_HCD_HC_SubmitRequest>
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f86f 	bl	800a240 <USBH_Get_USB_Status>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800a166:	7bbb      	ldrb	r3, [r7, #14]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd90      	pop	{r4, r7, pc}

0800a170 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a182:	78fa      	ldrb	r2, [r7, #3]
 800a184:	4611      	mov	r1, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f7f7 fd88 	bl	8001c9c <HAL_HCD_HC_GetURBState>
 800a18c:	4603      	mov	r3, r0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d103      	bne.n	800a1b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f872 	bl	800a298 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a1b4:	20c8      	movs	r0, #200	; 0xc8
 800a1b6:	f7f6 fef9 	bl	8000fac <HAL_Delay>
  return USBH_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	440b      	add	r3, r1
 800a1ea:	333b      	adds	r3, #59	; 0x3b
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00a      	beq.n	800a208 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	68f9      	ldr	r1, [r7, #12]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	440b      	add	r3, r1
 800a200:	3350      	adds	r3, #80	; 0x50
 800a202:	78ba      	ldrb	r2, [r7, #2]
 800a204:	701a      	strb	r2, [r3, #0]
 800a206:	e009      	b.n	800a21c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a208:	78fa      	ldrb	r2, [r7, #3]
 800a20a:	68f9      	ldr	r1, [r7, #12]
 800a20c:	4613      	mov	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	00db      	lsls	r3, r3, #3
 800a214:	440b      	add	r3, r1
 800a216:	3351      	adds	r3, #81	; 0x51
 800a218:	78ba      	ldrb	r2, [r7, #2]
 800a21a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f6 feba 	bl	8000fac <HAL_Delay>
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a24e:	79fb      	ldrb	r3, [r7, #7]
 800a250:	2b03      	cmp	r3, #3
 800a252:	d817      	bhi.n	800a284 <USBH_Get_USB_Status+0x44>
 800a254:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <USBH_Get_USB_Status+0x1c>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a26d 	.word	0x0800a26d
 800a260:	0800a273 	.word	0x0800a273
 800a264:	0800a279 	.word	0x0800a279
 800a268:	0800a27f 	.word	0x0800a27f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]
    break;
 800a270:	e00b      	b.n	800a28a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a272:	2302      	movs	r3, #2
 800a274:	73fb      	strb	r3, [r7, #15]
    break;
 800a276:	e008      	b.n	800a28a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a278:	2301      	movs	r3, #1
 800a27a:	73fb      	strb	r3, [r7, #15]
    break;
 800a27c:	e005      	b.n	800a28a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a27e:	2302      	movs	r3, #2
 800a280:	73fb      	strb	r3, [r7, #15]
    break;
 800a282:	e002      	b.n	800a28a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a284:	2302      	movs	r3, #2
 800a286:	73fb      	strb	r3, [r7, #15]
    break;
 800a288:	bf00      	nop
  }
  return usb_status;
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
 800a2b0:	e001      	b.n	800a2b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4803      	ldr	r0, [pc, #12]	; (800a2cc <MX_DriverVbusFS+0x34>)
 800a2be:	f7f7 f8fb 	bl	80014b8 <HAL_GPIO_WritePin>
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	40020800 	.word	0x40020800

0800a2d0 <__errno>:
 800a2d0:	4b01      	ldr	r3, [pc, #4]	; (800a2d8 <__errno+0x8>)
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20000030 	.word	0x20000030

0800a2dc <__libc_init_array>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	4e0d      	ldr	r6, [pc, #52]	; (800a314 <__libc_init_array+0x38>)
 800a2e0:	4c0d      	ldr	r4, [pc, #52]	; (800a318 <__libc_init_array+0x3c>)
 800a2e2:	1ba4      	subs	r4, r4, r6
 800a2e4:	10a4      	asrs	r4, r4, #2
 800a2e6:	2500      	movs	r5, #0
 800a2e8:	42a5      	cmp	r5, r4
 800a2ea:	d109      	bne.n	800a300 <__libc_init_array+0x24>
 800a2ec:	4e0b      	ldr	r6, [pc, #44]	; (800a31c <__libc_init_array+0x40>)
 800a2ee:	4c0c      	ldr	r4, [pc, #48]	; (800a320 <__libc_init_array+0x44>)
 800a2f0:	f000 f8f6 	bl	800a4e0 <_init>
 800a2f4:	1ba4      	subs	r4, r4, r6
 800a2f6:	10a4      	asrs	r4, r4, #2
 800a2f8:	2500      	movs	r5, #0
 800a2fa:	42a5      	cmp	r5, r4
 800a2fc:	d105      	bne.n	800a30a <__libc_init_array+0x2e>
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a304:	4798      	blx	r3
 800a306:	3501      	adds	r5, #1
 800a308:	e7ee      	b.n	800a2e8 <__libc_init_array+0xc>
 800a30a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a30e:	4798      	blx	r3
 800a310:	3501      	adds	r5, #1
 800a312:	e7f2      	b.n	800a2fa <__libc_init_array+0x1e>
 800a314:	0800a584 	.word	0x0800a584
 800a318:	0800a584 	.word	0x0800a584
 800a31c:	0800a584 	.word	0x0800a584
 800a320:	0800a588 	.word	0x0800a588

0800a324 <malloc>:
 800a324:	4b02      	ldr	r3, [pc, #8]	; (800a330 <malloc+0xc>)
 800a326:	4601      	mov	r1, r0
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	f000 b86d 	b.w	800a408 <_malloc_r>
 800a32e:	bf00      	nop
 800a330:	20000030 	.word	0x20000030

0800a334 <free>:
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <free+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f000 b817 	b.w	800a36c <_free_r>
 800a33e:	bf00      	nop
 800a340:	20000030 	.word	0x20000030

0800a344 <memcpy>:
 800a344:	b510      	push	{r4, lr}
 800a346:	1e43      	subs	r3, r0, #1
 800a348:	440a      	add	r2, r1
 800a34a:	4291      	cmp	r1, r2
 800a34c:	d100      	bne.n	800a350 <memcpy+0xc>
 800a34e:	bd10      	pop	{r4, pc}
 800a350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a358:	e7f7      	b.n	800a34a <memcpy+0x6>

0800a35a <memset>:
 800a35a:	4402      	add	r2, r0
 800a35c:	4603      	mov	r3, r0
 800a35e:	4293      	cmp	r3, r2
 800a360:	d100      	bne.n	800a364 <memset+0xa>
 800a362:	4770      	bx	lr
 800a364:	f803 1b01 	strb.w	r1, [r3], #1
 800a368:	e7f9      	b.n	800a35e <memset+0x4>
	...

0800a36c <_free_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4605      	mov	r5, r0
 800a370:	2900      	cmp	r1, #0
 800a372:	d045      	beq.n	800a400 <_free_r+0x94>
 800a374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a378:	1f0c      	subs	r4, r1, #4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bfb8      	it	lt
 800a37e:	18e4      	addlt	r4, r4, r3
 800a380:	f000 f8ac 	bl	800a4dc <__malloc_lock>
 800a384:	4a1f      	ldr	r2, [pc, #124]	; (800a404 <_free_r+0x98>)
 800a386:	6813      	ldr	r3, [r2, #0]
 800a388:	4610      	mov	r0, r2
 800a38a:	b933      	cbnz	r3, 800a39a <_free_r+0x2e>
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	6014      	str	r4, [r2, #0]
 800a390:	4628      	mov	r0, r5
 800a392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a396:	f000 b8a2 	b.w	800a4de <__malloc_unlock>
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	d90c      	bls.n	800a3b8 <_free_r+0x4c>
 800a39e:	6821      	ldr	r1, [r4, #0]
 800a3a0:	1862      	adds	r2, r4, r1
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	bf04      	itt	eq
 800a3a6:	681a      	ldreq	r2, [r3, #0]
 800a3a8:	685b      	ldreq	r3, [r3, #4]
 800a3aa:	6063      	str	r3, [r4, #4]
 800a3ac:	bf04      	itt	eq
 800a3ae:	1852      	addeq	r2, r2, r1
 800a3b0:	6022      	streq	r2, [r4, #0]
 800a3b2:	6004      	str	r4, [r0, #0]
 800a3b4:	e7ec      	b.n	800a390 <_free_r+0x24>
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	b10a      	cbz	r2, 800a3c0 <_free_r+0x54>
 800a3bc:	42a2      	cmp	r2, r4
 800a3be:	d9fa      	bls.n	800a3b6 <_free_r+0x4a>
 800a3c0:	6819      	ldr	r1, [r3, #0]
 800a3c2:	1858      	adds	r0, r3, r1
 800a3c4:	42a0      	cmp	r0, r4
 800a3c6:	d10b      	bne.n	800a3e0 <_free_r+0x74>
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	4401      	add	r1, r0
 800a3cc:	1858      	adds	r0, r3, r1
 800a3ce:	4282      	cmp	r2, r0
 800a3d0:	6019      	str	r1, [r3, #0]
 800a3d2:	d1dd      	bne.n	800a390 <_free_r+0x24>
 800a3d4:	6810      	ldr	r0, [r2, #0]
 800a3d6:	6852      	ldr	r2, [r2, #4]
 800a3d8:	605a      	str	r2, [r3, #4]
 800a3da:	4401      	add	r1, r0
 800a3dc:	6019      	str	r1, [r3, #0]
 800a3de:	e7d7      	b.n	800a390 <_free_r+0x24>
 800a3e0:	d902      	bls.n	800a3e8 <_free_r+0x7c>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	e7d3      	b.n	800a390 <_free_r+0x24>
 800a3e8:	6820      	ldr	r0, [r4, #0]
 800a3ea:	1821      	adds	r1, r4, r0
 800a3ec:	428a      	cmp	r2, r1
 800a3ee:	bf04      	itt	eq
 800a3f0:	6811      	ldreq	r1, [r2, #0]
 800a3f2:	6852      	ldreq	r2, [r2, #4]
 800a3f4:	6062      	str	r2, [r4, #4]
 800a3f6:	bf04      	itt	eq
 800a3f8:	1809      	addeq	r1, r1, r0
 800a3fa:	6021      	streq	r1, [r4, #0]
 800a3fc:	605c      	str	r4, [r3, #4]
 800a3fe:	e7c7      	b.n	800a390 <_free_r+0x24>
 800a400:	bd38      	pop	{r3, r4, r5, pc}
 800a402:	bf00      	nop
 800a404:	2000405c 	.word	0x2000405c

0800a408 <_malloc_r>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	1ccd      	adds	r5, r1, #3
 800a40c:	f025 0503 	bic.w	r5, r5, #3
 800a410:	3508      	adds	r5, #8
 800a412:	2d0c      	cmp	r5, #12
 800a414:	bf38      	it	cc
 800a416:	250c      	movcc	r5, #12
 800a418:	2d00      	cmp	r5, #0
 800a41a:	4606      	mov	r6, r0
 800a41c:	db01      	blt.n	800a422 <_malloc_r+0x1a>
 800a41e:	42a9      	cmp	r1, r5
 800a420:	d903      	bls.n	800a42a <_malloc_r+0x22>
 800a422:	230c      	movs	r3, #12
 800a424:	6033      	str	r3, [r6, #0]
 800a426:	2000      	movs	r0, #0
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	f000 f857 	bl	800a4dc <__malloc_lock>
 800a42e:	4a21      	ldr	r2, [pc, #132]	; (800a4b4 <_malloc_r+0xac>)
 800a430:	6814      	ldr	r4, [r2, #0]
 800a432:	4621      	mov	r1, r4
 800a434:	b991      	cbnz	r1, 800a45c <_malloc_r+0x54>
 800a436:	4c20      	ldr	r4, [pc, #128]	; (800a4b8 <_malloc_r+0xb0>)
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	b91b      	cbnz	r3, 800a444 <_malloc_r+0x3c>
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 f83d 	bl	800a4bc <_sbrk_r>
 800a442:	6020      	str	r0, [r4, #0]
 800a444:	4629      	mov	r1, r5
 800a446:	4630      	mov	r0, r6
 800a448:	f000 f838 	bl	800a4bc <_sbrk_r>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d124      	bne.n	800a49a <_malloc_r+0x92>
 800a450:	230c      	movs	r3, #12
 800a452:	6033      	str	r3, [r6, #0]
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f842 	bl	800a4de <__malloc_unlock>
 800a45a:	e7e4      	b.n	800a426 <_malloc_r+0x1e>
 800a45c:	680b      	ldr	r3, [r1, #0]
 800a45e:	1b5b      	subs	r3, r3, r5
 800a460:	d418      	bmi.n	800a494 <_malloc_r+0x8c>
 800a462:	2b0b      	cmp	r3, #11
 800a464:	d90f      	bls.n	800a486 <_malloc_r+0x7e>
 800a466:	600b      	str	r3, [r1, #0]
 800a468:	50cd      	str	r5, [r1, r3]
 800a46a:	18cc      	adds	r4, r1, r3
 800a46c:	4630      	mov	r0, r6
 800a46e:	f000 f836 	bl	800a4de <__malloc_unlock>
 800a472:	f104 000b 	add.w	r0, r4, #11
 800a476:	1d23      	adds	r3, r4, #4
 800a478:	f020 0007 	bic.w	r0, r0, #7
 800a47c:	1ac3      	subs	r3, r0, r3
 800a47e:	d0d3      	beq.n	800a428 <_malloc_r+0x20>
 800a480:	425a      	negs	r2, r3
 800a482:	50e2      	str	r2, [r4, r3]
 800a484:	e7d0      	b.n	800a428 <_malloc_r+0x20>
 800a486:	428c      	cmp	r4, r1
 800a488:	684b      	ldr	r3, [r1, #4]
 800a48a:	bf16      	itet	ne
 800a48c:	6063      	strne	r3, [r4, #4]
 800a48e:	6013      	streq	r3, [r2, #0]
 800a490:	460c      	movne	r4, r1
 800a492:	e7eb      	b.n	800a46c <_malloc_r+0x64>
 800a494:	460c      	mov	r4, r1
 800a496:	6849      	ldr	r1, [r1, #4]
 800a498:	e7cc      	b.n	800a434 <_malloc_r+0x2c>
 800a49a:	1cc4      	adds	r4, r0, #3
 800a49c:	f024 0403 	bic.w	r4, r4, #3
 800a4a0:	42a0      	cmp	r0, r4
 800a4a2:	d005      	beq.n	800a4b0 <_malloc_r+0xa8>
 800a4a4:	1a21      	subs	r1, r4, r0
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f000 f808 	bl	800a4bc <_sbrk_r>
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d0cf      	beq.n	800a450 <_malloc_r+0x48>
 800a4b0:	6025      	str	r5, [r4, #0]
 800a4b2:	e7db      	b.n	800a46c <_malloc_r+0x64>
 800a4b4:	2000405c 	.word	0x2000405c
 800a4b8:	20004060 	.word	0x20004060

0800a4bc <_sbrk_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4c06      	ldr	r4, [pc, #24]	; (800a4d8 <_sbrk_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	6023      	str	r3, [r4, #0]
 800a4c8:	f7f6 fcc2 	bl	8000e50 <_sbrk>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_sbrk_r+0x1a>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_sbrk_r+0x1a>
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	20004884 	.word	0x20004884

0800a4dc <__malloc_lock>:
 800a4dc:	4770      	bx	lr

0800a4de <__malloc_unlock>:
 800a4de:	4770      	bx	lr

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr
