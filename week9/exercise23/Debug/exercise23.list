
exercise23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004008  08004008  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004010  08004010  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004010  20000010  08004028  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004020  08004028  00024020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d82  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002744  00000000  00000000  00030dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  00033508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00034420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ee8  00000000  00000000  00035200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7e4  00000000  00000000  0004c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092027  00000000  00000000  000578cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e98f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  000e9970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f54 	.word	0x08003f54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003f54 	.word	0x08003f54

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <InitEFSema>:
#include "FreeRTOS.h"
#include "semphr.h"

SemaphoreHandle_t EFSema;

void InitEFSema(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	EFSema = xSemaphoreCreateBinary();
 80004e4:	2203      	movs	r2, #3
 80004e6:	2100      	movs	r1, #0
 80004e8:	2001      	movs	r0, #1
 80004ea:	f001 ff0f 	bl	800230c <xQueueGenericCreate>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b01      	ldr	r3, [pc, #4]	; (80004f8 <InitEFSema+0x18>)
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20003fcc 	.word	0x20003fcc

080004fc <SetEFSema>:

void SetEFSema(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(EFSema, &xHigherPriorityTaskWoken);
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <SetEFSema+0x20>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1d3a      	adds	r2, r7, #4
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f001 ff58 	bl	80023c4 <xQueueGiveFromISR>

	return;
 8000514:	bf00      	nop
}
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20003fcc 	.word	0x20003fcc

08000520 <WaitEFSema>:

void WaitEFSema(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	xSemaphoreTake(EFSema, portMAX_DELAY);
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <WaitEFSema+0x18>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f04f 31ff 	mov.w	r1, #4294967295
 800052c:	4618      	mov	r0, r3
 800052e:	f001 ffd3 	bl	80024d8 <xQueueSemaphoreTake>
	return;
 8000532:	bf00      	nop
}
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20003fcc 	.word	0x20003fcc

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000080 	.word	0x20000080

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	InitEFSema();
 8000576:	f7ff ffb3 	bl	80004e0 <InitEFSema>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fb8f 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f849 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8b1 	bl	80006e8 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of OrangeLED */
  osThreadDef(OrangeLED, StartOrangeLED, osPriorityNormal, 0, 128);
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <main+0x8c>)
 8000588:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OrangeLEDHandle = osThreadCreate(osThread(OrangeLED), NULL);
 800059a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fd36 	bl	8002012 <osThreadCreate>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0x90>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of GreenLED */
  osThreadDef(GreenLED, StartGreenLED, osPriorityNormal, 0, 128);
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <main+0x94>)
 80005ae:	f107 0420 	add.w	r4, r7, #32
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLEDHandle = osThreadCreate(osThread(GreenLED), NULL);
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fd23 	bl	8002012 <osThreadCreate>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <main+0x98>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of DeferredServer */
  osThreadDef(DeferredServer, StartDeferredServer, osPriorityNormal, 0, 128);
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <main+0x9c>)
 80005d4:	1d3c      	adds	r4, r7, #4
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DeferredServerHandle = osThreadCreate(osThread(DeferredServer), NULL);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fd12 	bl	8002012 <osThreadCreate>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <main+0xa0>)
 80005f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f4:	f001 fd06 	bl	8002004 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x88>
 80005fa:	bf00      	nop
 80005fc:	08003f78 	.word	0x08003f78
 8000600:	20003fd4 	.word	0x20003fd4
 8000604:	08003fa0 	.word	0x08003fa0
 8000608:	20003fd0 	.word	0x20003fd0
 800060c:	08003fcc 	.word	0x08003fcc
 8000610:	20003fd8 	.word	0x20003fd8

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fc8e 	bl	8003f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000688:	23c0      	movs	r3, #192	; 0xc0
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdfd 	bl	8001298 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f9f6 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2103      	movs	r1, #3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f856 	bl	8001778 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f9df 	bl	8000a94 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4ba5      	ldr	r3, [pc, #660]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aa4      	ldr	r2, [pc, #656]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4ba2      	ldr	r3, [pc, #648]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b9e      	ldr	r3, [pc, #632]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a9d      	ldr	r2, [pc, #628]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b9b      	ldr	r3, [pc, #620]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b97      	ldr	r3, [pc, #604]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a96      	ldr	r2, [pc, #600]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b94      	ldr	r3, [pc, #592]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b90      	ldr	r3, [pc, #576]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a8f      	ldr	r2, [pc, #572]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b8d      	ldr	r3, [pc, #564]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b89      	ldr	r3, [pc, #548]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a88      	ldr	r2, [pc, #544]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b86      	ldr	r3, [pc, #536]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b82      	ldr	r3, [pc, #520]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a81      	ldr	r2, [pc, #516]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7f      	ldr	r3, [pc, #508]	; (8000998 <MX_GPIO_Init+0x2b0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	487c      	ldr	r0, [pc, #496]	; (800099c <MX_GPIO_Init+0x2b4>)
 80007ac:	f000 fd1c 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	487a      	ldr	r0, [pc, #488]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80007b6:	f000 fd17 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ba:	2200      	movs	r2, #0
 80007bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c0:	4878      	ldr	r0, [pc, #480]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80007c2:	f000 fd11 	bl	80011e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c6:	2304      	movs	r3, #4
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4870      	ldr	r0, [pc, #448]	; (800099c <MX_GPIO_Init+0x2b4>)
 80007da:	f000 fb83 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007de:	2308      	movs	r3, #8
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4869      	ldr	r0, [pc, #420]	; (800099c <MX_GPIO_Init+0x2b4>)
 80007f6:	f000 fb75 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80007fa:	2332      	movs	r3, #50	; 0x32
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007fe:	4b6a      	ldr	r3, [pc, #424]	; (80009a8 <MX_GPIO_Init+0x2c0>)
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4863      	ldr	r0, [pc, #396]	; (800099c <MX_GPIO_Init+0x2b4>)
 800080e:	f000 fb69 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	485d      	ldr	r0, [pc, #372]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 800082a:	f000 fb5b 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4855      	ldr	r0, [pc, #340]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 800084a:	f000 fb4b 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	4b56      	ldr	r3, [pc, #344]	; (80009ac <MX_GPIO_Init+0x2c4>)
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4853      	ldr	r0, [pc, #332]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 8000862:	f000 fb3f 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000866:	2310      	movs	r3, #16
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000876:	2306      	movs	r3, #6
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	484b      	ldr	r0, [pc, #300]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 8000882:	f000 fb2f 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000886:	23e0      	movs	r3, #224	; 0xe0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4843      	ldr	r0, [pc, #268]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 80008a2:	f000 fb1f 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b8:	2305      	movs	r3, #5
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	483c      	ldr	r0, [pc, #240]	; (80009b4 <MX_GPIO_Init+0x2cc>)
 80008c4:	f000 fb0e 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008c8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008cc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4830      	ldr	r0, [pc, #192]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 80008e2:	f000 faff 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f8:	2306      	movs	r3, #6
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4827      	ldr	r0, [pc, #156]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 8000904:	f000 faee 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 800091e:	f000 fae1 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000922:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000934:	230a      	movs	r3, #10
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x2c8>)
 8000940:	f000 fad0 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_GPIO_Init+0x2bc>)
 8000958:	f000 fac4 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	2312      	movs	r3, #18
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800096e:	2304      	movs	r3, #4
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_GPIO_Init+0x2cc>)
 800097a:	f000 fab3 	bl	8000ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2006      	movs	r0, #6
 8000984:	f000 fa84 	bl	8000e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000988:	2006      	movs	r0, #6
 800098a:	f000 fa9d 	bl	8000ec8 <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40021000 	.word	0x40021000
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020c00 	.word	0x40020c00
 80009a8:	10120000 	.word	0x10120000
 80009ac:	10110000 	.word	0x10110000
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <StartOrangeLED>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartOrangeLED */
void StartOrangeLED(void const * argument)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, ORANGE, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <StartOrangeLED+0x34>)
 80009c8:	f000 fc0e 	bl	80011e8 <HAL_GPIO_WritePin>
	  osDelay(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d0:	f001 fb6b 	bl	80020aa <osDelay>
	  HAL_GPIO_WritePin(GPIOD, ORANGE, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <StartOrangeLED+0x34>)
 80009dc:	f000 fc04 	bl	80011e8 <HAL_GPIO_WritePin>
	  osDelay(1500);
 80009e0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009e4:	f001 fb61 	bl	80020aa <osDelay>
	  HAL_GPIO_WritePin(GPIOD, ORANGE, GPIO_PIN_SET);
 80009e8:	e7ea      	b.n	80009c0 <StartOrangeLED+0x8>
 80009ea:	bf00      	nop
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <StartGreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenLED */
void StartGreenLED(void const * argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenLED */
	osDelay(700);
 80009f8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80009fc:	f001 fb55 	bl	80020aa <osDelay>
  /* Infinite loop */
  for(;;){
	  HAL_GPIO_WritePin(GPIOD, GREEN, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <StartGreenLED+0x3c>)
 8000a08:	f000 fbee 	bl	80011e8 <HAL_GPIO_WritePin>
	  osDelay(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a10:	f001 fb4b 	bl	80020aa <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GREEN, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <StartGreenLED+0x3c>)
 8000a1c:	f000 fbe4 	bl	80011e8 <HAL_GPIO_WritePin>
	  osDelay(3500);
 8000a20:	f640 50ac 	movw	r0, #3500	; 0xdac
 8000a24:	f001 fb41 	bl	80020aa <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GREEN, GPIO_PIN_SET);
 8000a28:	e7ea      	b.n	8000a00 <StartGreenLED+0x10>
 8000a2a:	bf00      	nop
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <StartDeferredServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDeferredServer */
void StartDeferredServer(void const * argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDeferredServer */
  /* Infinite loop */
  for(;;)
  {
    WaitEFSema();
 8000a38:	f7ff fd72 	bl	8000520 <WaitEFSema>

    for(int i = 0; i < 2*4*10; i++){
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e00a      	b.n	8000a58 <StartDeferredServer+0x28>
    	HAL_GPIO_TogglePin(GPIOD, BLUE);
 8000a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <StartDeferredServer+0x3c>)
 8000a48:	f000 fbe7 	bl	800121a <HAL_GPIO_TogglePin>
    	osDelay(50);
 8000a4c:	2032      	movs	r0, #50	; 0x32
 8000a4e:	f001 fb2c 	bl	80020aa <osDelay>
    for(int i = 0; i < 2*4*10; i++){
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b4f      	cmp	r3, #79	; 0x4f
 8000a5c:	ddf1      	ble.n	8000a42 <StartDeferredServer+0x12>
    }
    HAL_GPIO_WritePin(GPIOD, RED, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	4801      	ldr	r0, [pc, #4]	; (8000a6c <StartDeferredServer+0x3c>)
 8000a66:	f000 fbbf 	bl	80011e8 <HAL_GPIO_WritePin>
    WaitEFSema();
 8000a6a:	e7e5      	b.n	8000a38 <StartDeferredServer+0x8>
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 f92d 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010000 	.word	0x40010000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_MspInit+0x54>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_MspInit+0x54>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_MspInit+0x54>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_MspInit+0x54>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	f06f 0001 	mvn.w	r0, #1
 8000aea:	f000 f9d1 	bl	8000e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 f9bd 	bl	8000e90 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b16:	2019      	movs	r0, #25
 8000b18:	f000 f9d6 	bl	8000ec8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_InitTick+0xa4>)
 8000b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b24:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <HAL_InitTick+0xa4>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_InitTick+0xa4>)
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fff6 	bl	8001b34 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b48:	f000 ffe0 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <HAL_InitTick+0xa8>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	0c9b      	lsrs	r3, r3, #18
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <HAL_InitTick+0xb0>)
 8000b64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b82:	f001 f809 	bl	8001b98 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d104      	bne.n	8000b96 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <HAL_InitTick+0xac>)
 8000b8e:	f001 f838 	bl	8001c02 <HAL_TIM_Base_Start_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	20003fdc 	.word	0x20003fdc
 8000bac:	40010000 	.word	0x40010000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOD, RED, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <EXTI0_IRQHandler+0x20>)
 8000bf0:	f000 fafa 	bl	80011e8 <HAL_GPIO_WritePin>
	SetEFSema();
 8000bf4:	f7ff fc82 	bl	80004fc <SetEFSema>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fb29 	bl	8001250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40020c00 	.word	0x40020c00

08000c08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c0e:	f001 f81c 	bl	8001c4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20003fdc 	.word	0x20003fdc

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <SystemInit+0x28>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <SystemInit+0x28>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SystemInit+0x28>)
 8000c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c36:	609a      	str	r2, [r3, #8]
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4e:	e003      	b.n	8000c58 <LoopCopyDataInit>

08000c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c56:	3104      	adds	r1, #4

08000c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c60:	d3f6      	bcc.n	8000c50 <CopyDataInit>
  ldr  r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c64:	e002      	b.n	8000c6c <LoopFillZerobss>

08000c66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c68:	f842 3b04 	str.w	r3, [r2], #4

08000c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c70:	d3f9      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd3 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f003 f941 	bl	8003efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fc79 	bl	8000570 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c84:	08004018 	.word	0x08004018
  ldr  r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c8c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c90:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c94:	20004020 	.word	0x20004020

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f8d8 	bl	8000e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff ff16 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff fee8 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	2000401c 	.word	0x2000401c

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	2000401c 	.word	0x2000401c

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff4c 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea2:	f7ff ff61 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ea6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff ffb1 	bl	8000e14 <NVIC_EncodePriority>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff80 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff54 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d00b      	beq.n	8000f3e <HAL_GPIO_Init+0x5a>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f32:	2b11      	cmp	r3, #17
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b12      	cmp	r3, #18
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0xfc>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b12      	cmp	r3, #18
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a55      	ldr	r2, [pc, #340]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a48      	ldr	r2, [pc, #288]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a47      	ldr	r2, [pc, #284]	; (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a46      	ldr	r2, [pc, #280]	; (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a45      	ldr	r2, [pc, #276]	; (80011dc <HAL_GPIO_Init+0x2f8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4934      	ldr	r1, [pc, #208]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	3724      	adds	r7, #36	; 0x24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	401a      	ands	r2, r3
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	429a      	cmp	r2, r3
 8001232:	d104      	bne.n	800123e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800123c:	e002      	b.n	8001244 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f806 	bl	8001280 <HAL_GPIO_EXTI_Callback>
  }
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e25b      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	4ba3      	ldr	r3, [pc, #652]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e236      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a90      	ldr	r2, [pc, #576]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a83      	ldr	r2, [pc, #524]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fcda 	bl	8000d08 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fcd6 	bl	8000d08 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1fb      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcc6 	bl	8000d08 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcc2 	bl	8000d08 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1e7      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1bb      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4952      	ldr	r1, [pc, #328]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fc7b 	bl	8000d08 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fc77 	bl	8000d08 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e19c      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4940      	ldr	r1, [pc, #256]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x2b0>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc5a 	bl	8000d08 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc56 	bl	8000d08 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e17b      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d030      	beq.n	80014e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fc3a 	bl	8000d08 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fc36 	bl	8000d08 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e15b      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x2b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fc23 	bl	8000d08 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc1f 	bl	8000d08 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e144      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a0 	beq.w	8001632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d121      	bne.n	8001572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_RCC_OscConfig+0x2b8>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fbe5 	bl	8000d08 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e011      	b.n	8001566 <HAL_RCC_OscConfig+0x2ce>
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
 8001550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001554:	f7ff fbd8 	bl	8000d08 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0fd      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x4d4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x2f0>
 800157a:	4b7d      	ldr	r3, [pc, #500]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a7c      	ldr	r2, [pc, #496]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e01c      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 8001590:	4b77      	ldr	r3, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a76      	ldr	r2, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b74      	ldr	r3, [pc, #464]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a73      	ldr	r2, [pc, #460]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e00b      	b.n	80015c2 <HAL_RCC_OscConfig+0x32a>
 80015aa:	4b71      	ldr	r3, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a70      	ldr	r2, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b6e      	ldr	r3, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a6d      	ldr	r2, [pc, #436]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d015      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb9d 	bl	8000d08 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff fb99 	bl	8000d08 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0bc      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	4b61      	ldr	r3, [pc, #388]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ee      	beq.n	80015d2 <HAL_RCC_OscConfig+0x33a>
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb87 	bl	8000d08 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fb83 	bl	8000d08 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0a6      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ee      	bne.n	80015fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001626:	4b52      	ldr	r3, [pc, #328]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a51      	ldr	r2, [pc, #324]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8092 	beq.w	8001760 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163c:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d05c      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d141      	bne.n	80016d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_RCC_OscConfig+0x4dc>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fb57 	bl	8000d08 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb53 	bl	8000d08 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e078      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	061b      	lsls	r3, r3, #24
 80016a0:	4933      	ldr	r1, [pc, #204]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a6:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_RCC_OscConfig+0x4dc>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb2c 	bl	8000d08 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb28 	bl	8000d08 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e04d      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x41c>
 80016d2:	e045      	b.n	8001760 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fb15 	bl	8000d08 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fb11 	bl	8000d08 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e036      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x44a>
 8001700:	e02e      	b.n	8001760 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e029      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_RCC_OscConfig+0x4d8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	429a      	cmp	r2, r3
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d115      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d10d      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000
 8001770:	40023800 	.word	0x40023800
 8001774:	42470060 	.word	0x42470060

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fa4e 	bl	8000d08 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fa4a 	bl	8000d08 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4601      	mov	r1, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	fa21 f303 	lsr.w	r3, r1, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f8ec 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08003ff0 	.word	0x08003ff0
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b04      	cmp	r3, #4
 8001964:	d007      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x32>
 8001966:	2b08      	cmp	r3, #8
 8001968:	d008      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x38>
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 80b4 	bne.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001972:	60bb      	str	r3, [r7, #8]
       break;
 8001974:	e0b3      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001976:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001978:	60bb      	str	r3, [r7, #8]
      break;
 800197a:	e0b0      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197c:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001984:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04a      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	f04f 0400 	mov.w	r4, #0
 800199c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	ea03 0501 	and.w	r5, r3, r1
 80019a8:	ea04 0602 	and.w	r6, r4, r2
 80019ac:	4629      	mov	r1, r5
 80019ae:	4632      	mov	r2, r6
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	f04f 0400 	mov.w	r4, #0
 80019b8:	0154      	lsls	r4, r2, #5
 80019ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019be:	014b      	lsls	r3, r1, #5
 80019c0:	4619      	mov	r1, r3
 80019c2:	4622      	mov	r2, r4
 80019c4:	1b49      	subs	r1, r1, r5
 80019c6:	eb62 0206 	sbc.w	r2, r2, r6
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	f04f 0400 	mov.w	r4, #0
 80019d2:	0194      	lsls	r4, r2, #6
 80019d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d8:	018b      	lsls	r3, r1, #6
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	eb64 0402 	sbc.w	r4, r4, r2
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	00e2      	lsls	r2, r4, #3
 80019ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ee:	00d9      	lsls	r1, r3, #3
 80019f0:	460b      	mov	r3, r1
 80019f2:	4614      	mov	r4, r2
 80019f4:	195b      	adds	r3, r3, r5
 80019f6:	eb44 0406 	adc.w	r4, r4, r6
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	0262      	lsls	r2, r4, #9
 8001a04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a08:	0259      	lsls	r1, r3, #9
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4621      	mov	r1, r4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f04f 0400 	mov.w	r4, #0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	f7fe fbe0 	bl	80001e0 <__aeabi_uldivmod>
 8001a20:	4603      	mov	r3, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e049      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	f04f 0400 	mov.w	r4, #0
 8001a32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	ea03 0501 	and.w	r5, r3, r1
 8001a3e:	ea04 0602 	and.w	r6, r4, r2
 8001a42:	4629      	mov	r1, r5
 8001a44:	4632      	mov	r2, r6
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	f04f 0400 	mov.w	r4, #0
 8001a4e:	0154      	lsls	r4, r2, #5
 8001a50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a54:	014b      	lsls	r3, r1, #5
 8001a56:	4619      	mov	r1, r3
 8001a58:	4622      	mov	r2, r4
 8001a5a:	1b49      	subs	r1, r1, r5
 8001a5c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	f04f 0400 	mov.w	r4, #0
 8001a68:	0194      	lsls	r4, r2, #6
 8001a6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a6e:	018b      	lsls	r3, r1, #6
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	eb64 0402 	sbc.w	r4, r4, r2
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a84:	00d9      	lsls	r1, r3, #3
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	195b      	adds	r3, r3, r5
 8001a8c:	eb44 0406 	adc.w	r4, r4, r6
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	02a2      	lsls	r2, r4, #10
 8001a9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a9e:	0299      	lsls	r1, r3, #10
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4614      	mov	r4, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f7fe fb95 	bl	80001e0 <__aeabi_uldivmod>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ada:	60bb      	str	r3, [r7, #8]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	68bb      	ldr	r3, [r7, #8]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4601      	mov	r1, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0b5b      	lsrs	r3, r3, #13
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08004000 	.word	0x08004000

08001b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	220f      	movs	r2, #15
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetClockConfig+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e01d      	b.n	8001be6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f815 	bl	8001bee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 f968 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d007      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d122      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d11b      	bne.n	8001ca6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f06f 0202 	mvn.w	r2, #2
 8001c76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8ee 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
 8001c92:	e005      	b.n	8001ca0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8e0 	bl	8001e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8f1 	bl	8001e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d122      	bne.n	8001cfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d11b      	bne.n	8001cfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0204 	mvn.w	r2, #4
 8001cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8c4 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
 8001ce6:	e005      	b.n	8001cf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8b6 	bl	8001e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8c7 	bl	8001e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d122      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d11b      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0208 	mvn.w	r2, #8
 8001d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2204      	movs	r2, #4
 8001d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f89a 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
 8001d3a:	e005      	b.n	8001d48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f88c 	bl	8001e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f89d 	bl	8001e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d122      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d11b      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0210 	mvn.w	r2, #16
 8001d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2208      	movs	r2, #8
 8001d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f870 	bl	8001e6e <HAL_TIM_IC_CaptureCallback>
 8001d8e:	e005      	b.n	8001d9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f862 	bl	8001e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f873 	bl	8001e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10e      	bne.n	8001dce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0201 	mvn.w	r2, #1
 8001dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7fe fe51 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d10e      	bne.n	8001dfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b80      	cmp	r3, #128	; 0x80
 8001de8:	d107      	bne.n	8001dfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8e3 	bl	8001fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d10e      	bne.n	8001e26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d107      	bne.n	8001e26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f838 	bl	8001e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d10e      	bne.n	8001e52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d107      	bne.n	8001e52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f06f 0220 	mvn.w	r2, #32
 8001e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8ad 	bl	8001fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <TIM_Base_SetConfig+0xe4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <TIM_Base_SetConfig+0xe8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a30      	ldr	r2, [pc, #192]	; (8001f98 <TIM_Base_SetConfig+0xec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <TIM_Base_SetConfig+0xf0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <TIM_Base_SetConfig+0xe4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01b      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d017      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <TIM_Base_SetConfig+0xe8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <TIM_Base_SetConfig+0xec>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00f      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <TIM_Base_SetConfig+0xf0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <TIM_Base_SetConfig+0xf4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <TIM_Base_SetConfig+0xf8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <TIM_Base_SetConfig+0xfc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <TIM_Base_SetConfig+0xe4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	615a      	str	r2, [r3, #20]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800

08001fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe6:	2b84      	cmp	r3, #132	; 0x84
 8001fe8:	d005      	beq.n	8001ff6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002008:	f000 fda8 	bl	8002b5c <vTaskStartScheduler>
  
  return osOK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}

08002012 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002014:	b089      	sub	sp, #36	; 0x24
 8002016:	af04      	add	r7, sp, #16
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <osThreadCreate+0x54>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01c      	beq.n	8002066 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685c      	ldr	r4, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681d      	ldr	r5, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691e      	ldr	r6, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffc8 	bl	8001fd4 <makeFreeRtosPriority>
 8002044:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800204e:	9202      	str	r2, [sp, #8]
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4632      	mov	r2, r6
 8002058:	4629      	mov	r1, r5
 800205a:	4620      	mov	r0, r4
 800205c:	f000 fbc4 	bl	80027e8 <xTaskCreateStatic>
 8002060:	4603      	mov	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e01c      	b.n	80020a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685c      	ldr	r4, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002072:	b29e      	uxth	r6, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ffaa 	bl	8001fd4 <makeFreeRtosPriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	9200      	str	r2, [sp, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	4632      	mov	r2, r6
 800208e:	4629      	mov	r1, r5
 8002090:	4620      	mov	r0, r4
 8002092:	f000 fc02 	bl	800289a <xTaskCreate>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d001      	beq.n	80020a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800209c:	2300      	movs	r3, #0
 800209e:	e000      	b.n	80020a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <osDelay+0x16>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	e000      	b.n	80020c2 <osDelay+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fd16 	bl	8002af4 <vTaskDelay>
  
  return osOK;
 80020c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f103 0208 	add.w	r2, r3, #8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0208 	add.w	r2, r3, #8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d103      	bne.n	8002194 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e00c      	b.n	80021ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3308      	adds	r3, #8
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e002      	b.n	80021a2 <vListInsert+0x2e>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d2f6      	bcs.n	800219c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6892      	ldr	r2, [r2, #8]
 80021fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6852      	ldr	r2, [r2, #4]
 8002206:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	429a      	cmp	r2, r3
 8002210:	d103      	bne.n	800221a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	e7fe      	b.n	8002262 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002264:	f001 fb5a 	bl	800391c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	441a      	add	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	3b01      	subs	r3, #1
 8002296:	68f9      	ldr	r1, [r7, #12]
 8002298:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	22ff      	movs	r2, #255	; 0xff
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	22ff      	movs	r2, #255	; 0xff
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01a      	beq.n	80022f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3310      	adds	r3, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fe8a 	bl	8002fe0 <xTaskRemoveFromEventList>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <xQueueGenericReset+0xcc>)
 80022d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	e009      	b.n	80022f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3310      	adds	r3, #16
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fef2 	bl	80020d2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3324      	adds	r3, #36	; 0x24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff feed 	bl	80020d2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022f8:	f001 fb3e 	bl	8003978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022fc:	2301      	movs	r3, #1
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000ed04 	.word	0xe000ed04

0800230c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <xQueueGenericCreate+0x28>
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e7fe      	b.n	8002332 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e004      	b.n	800234a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3348      	adds	r3, #72	; 0x48
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fbfe 	bl	8003b50 <pvPortMalloc>
 8002354:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00f      	beq.n	800237c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3348      	adds	r3, #72	; 0x48
 8002360:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f805 	bl	8002386 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800237c:	69bb      	ldr	r3, [r7, #24]
	}
 800237e:	4618      	mov	r0, r3
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023b4:	2101      	movs	r1, #1
 80023b6:	69b8      	ldr	r0, [r7, #24]
 80023b8:	f7ff ff40 	bl	800223c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80023d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <xQueueGiveFromISR+0x28>
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	e7fe      	b.n	80023ea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <xQueueGiveFromISR+0x44>
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e7fe      	b.n	8002406 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <xQueueGiveFromISR+0x54>
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <xQueueGiveFromISR+0x58>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <xQueueGiveFromISR+0x5a>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <xQueueGiveFromISR+0x72>
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	e7fe      	b.n	8002434 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002436:	f001 fb4d 	bl	8003ad4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800243a:	f3ef 8211 	mrs	r2, BASEPRI
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	617a      	str	r2, [r7, #20]
 8002450:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002452:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002462:	429a      	cmp	r2, r3
 8002464:	d22b      	bcs.n	80024be <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800246c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002478:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002480:	d112      	bne.n	80024a8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	3324      	adds	r3, #36	; 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fda6 	bl	8002fe0 <xTaskRemoveFromEventList>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00b      	beq.n	80024b8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e007      	b.n	80024b8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	b25a      	sxtb	r2, r3
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80024b8:	2301      	movs	r3, #1
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
 80024bc:	e001      	b.n	80024c2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3738      	adds	r7, #56	; 0x38
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08e      	sub	sp, #56	; 0x38
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	e7fe      	b.n	8002506 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <xQueueSemaphoreTake+0x4c>
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e7fe      	b.n	8002522 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002524:	f000 ff18 	bl	8003358 <xTaskGetSchedulerState>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <xQueueSemaphoreTake+0x5c>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <xQueueSemaphoreTake+0x60>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <xQueueSemaphoreTake+0x62>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <xQueueSemaphoreTake+0x7a>
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	e7fe      	b.n	8002550 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002552:	f001 f9e3 	bl	800391c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d024      	beq.n	80025ac <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002572:	f001 f833 	bl	80035dc <pvTaskIncrementMutexHeldCount>
 8002576:	4602      	mov	r2, r0
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00f      	beq.n	80025a4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	3310      	adds	r3, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fd29 	bl	8002fe0 <xTaskRemoveFromEventList>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <xQueueSemaphoreTake+0x20c>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80025a4:	f001 f9e8 	bl	8003978 <vPortExitCritical>
				return pdPASS;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e096      	b.n	80026da <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d110      	bne.n	80025d4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <xQueueSemaphoreTake+0xf4>
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e7fe      	b.n	80025ca <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80025cc:	f001 f9d4 	bl	8003978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e082      	b.n	80026da <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fd60 	bl	80030a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025e8:	f001 f9c6 	bl	8003978 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025ec:	f000 fb14 	bl	8002c18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025f0:	f001 f994 	bl	800391c <vPortEnterCritical>
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d103      	bne.n	800260a <xQueueSemaphoreTake+0x132>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002610:	b25b      	sxtb	r3, r3
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d103      	bne.n	8002620 <xQueueSemaphoreTake+0x148>
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002620:	f001 f9aa 	bl	8003978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002624:	463a      	mov	r2, r7
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fd4f 	bl	80030d0 <xTaskCheckForTimeOut>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d132      	bne.n	800269e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800263a:	f000 f8bf 	bl	80027bc <prvIsQueueEmpty>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d026      	beq.n	8002692 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800264c:	f001 f966 	bl	800391c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fe9d 	bl	8003394 <xTaskPriorityInherit>
 800265a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800265c:	f001 f98c 	bl	8003978 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	3324      	adds	r3, #36	; 0x24
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fc95 	bl	8002f98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800266e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002670:	f000 f852 	bl	8002718 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002674:	f000 fade 	bl	8002c34 <xTaskResumeAll>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	f47f af69 	bne.w	8002552 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <xQueueSemaphoreTake+0x20c>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e75f      	b.n	8002552 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002694:	f000 f840 	bl	8002718 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002698:	f000 facc 	bl	8002c34 <xTaskResumeAll>
 800269c:	e759      	b.n	8002552 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800269e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026a0:	f000 f83a 	bl	8002718 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026a4:	f000 fac6 	bl	8002c34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026aa:	f000 f887 	bl	80027bc <prvIsQueueEmpty>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f43f af4e 	beq.w	8002552 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80026bc:	f001 f92e 	bl	800391c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80026c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026c2:	f000 f811 	bl	80026e8 <prvGetDisinheritPriorityAfterTimeout>
 80026c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fee6 	bl	80034a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80026d4:	f001 f950 	bl	8003978 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3738      	adds	r7, #56	; 0x38
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000ed04 	.word	0xe000ed04

080026e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e001      	b.n	800270a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800270a:	68fb      	ldr	r3, [r7, #12]
	}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002720:	f001 f8fc 	bl	800391c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800272a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800272c:	e011      	b.n	8002752 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d012      	beq.n	800275c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3324      	adds	r3, #36	; 0x24
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fc50 	bl	8002fe0 <xTaskRemoveFromEventList>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002746:	f000 fd23 	bl	8003190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3b01      	subs	r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	dce9      	bgt.n	800272e <prvUnlockQueue+0x16>
 800275a:	e000      	b.n	800275e <prvUnlockQueue+0x46>
					break;
 800275c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002766:	f001 f907 	bl	8003978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800276a:	f001 f8d7 	bl	800391c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002774:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002776:	e011      	b.n	800279c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fc2b 	bl	8002fe0 <xTaskRemoveFromEventList>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002790:	f000 fcfe 	bl	8003190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002794:	7bbb      	ldrb	r3, [r7, #14]
 8002796:	3b01      	subs	r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800279c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	dce9      	bgt.n	8002778 <prvUnlockQueue+0x60>
 80027a4:	e000      	b.n	80027a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	22ff      	movs	r2, #255	; 0xff
 80027ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027b0:	f001 f8e2 	bl	8003978 <vPortExitCritical>
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027c4:	f001 f8aa 	bl	800391c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e001      	b.n	80027da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027da:	f001 f8cd 	bl	8003978 <vPortExitCritical>

	return xReturn;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <xTaskCreateStatic+0x28>
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	e7fe      	b.n	800280e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <xTaskCreateStatic+0x42>
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	e7fe      	b.n	8002828 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800282a:	2354      	movs	r3, #84	; 0x54
 800282c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b54      	cmp	r3, #84	; 0x54
 8002832:	d009      	beq.n	8002848 <xTaskCreateStatic+0x60>
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e7fe      	b.n	8002846 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01e      	beq.n	800288c <xTaskCreateStatic+0xa4>
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	2202      	movs	r2, #2
 8002862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002866:	2300      	movs	r3, #0
 8002868:	9303      	str	r3, [sp, #12]
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f850 	bl	8002924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002886:	f000 f8cb 	bl	8002a20 <prvAddNewTaskToReadyList>
 800288a:	e001      	b.n	8002890 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002890:	697b      	ldr	r3, [r7, #20]
	}
 8002892:	4618      	mov	r0, r3
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800289a:	b580      	push	{r7, lr}
 800289c:	b08c      	sub	sp, #48	; 0x30
 800289e:	af04      	add	r7, sp, #16
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 f94e 	bl	8003b50 <pvPortMalloc>
 80028b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80028bc:	2054      	movs	r0, #84	; 0x54
 80028be:	f001 f947 	bl	8003b50 <pvPortMalloc>
 80028c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
 80028d0:	e005      	b.n	80028de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f001 f9fe 	bl	8003cd4 <vPortFree>
 80028d8:	e001      	b.n	80028de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9303      	str	r3, [sp, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f80e 	bl	8002924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002908:	69f8      	ldr	r0, [r7, #28]
 800290a:	f000 f889 	bl	8002a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e002      	b.n	800291a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800291a:	69bb      	ldr	r3, [r7, #24]
	}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800293c:	3b01      	subs	r3, #1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f023 0307 	bic.w	r3, r3, #7
 800294a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <prvInitialiseNewTask+0x46>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e7fe      	b.n	8002968 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	e012      	b.n	8002996 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	7819      	ldrb	r1, [r3, #0]
 8002978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	3334      	adds	r3, #52	; 0x34
 8002980:	460a      	mov	r2, r1
 8002982:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3301      	adds	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d9e9      	bls.n	8002970 <prvInitialiseNewTask+0x4c>
 800299c:	e000      	b.n	80029a0 <prvInitialiseNewTask+0x7c>
		{
			break;
 800299e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d901      	bls.n	80029b2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ae:	2306      	movs	r3, #6
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	2200      	movs	r2, #0
 80029c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	3304      	adds	r3, #4
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fba2 	bl	8002112 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	3318      	adds	r3, #24
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fb9d 	bl	8002112 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f1c3 0207 	rsb	r2, r3, #7
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	2200      	movs	r2, #0
 80029f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	68f9      	ldr	r1, [r7, #12]
 8002a00:	69b8      	ldr	r0, [r7, #24]
 8002a02:	f000 fe65 	bl	80036d0 <pxPortInitialiseStack>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a18:	bf00      	nop
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a28:	f000 ff78 	bl	800391c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <prvAddNewTaskToReadyList+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <prvAddNewTaskToReadyList+0xb8>)
 8002a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a36:	4b29      	ldr	r3, [pc, #164]	; (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a3e:	4a27      	ldr	r2, [pc, #156]	; (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <prvAddNewTaskToReadyList+0xb8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d110      	bne.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a4c:	f000 fbc4 	bl	80031d8 <prvInitialiseTaskLists>
 8002a50:	e00d      	b.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <prvAddNewTaskToReadyList+0xc0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d802      	bhi.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a68:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <prvAddNewTaskToReadyList+0xc4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <prvAddNewTaskToReadyList+0xc4>)
 8002a76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <prvAddNewTaskToReadyList+0xc8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <prvAddNewTaskToReadyList+0xc8>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <prvAddNewTaskToReadyList+0xcc>)
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7ff fb43 	bl	800212c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002aa6:	f000 ff67 	bl	8003978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <prvAddNewTaskToReadyList+0xc0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00e      	beq.n	8002ad0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <prvAddNewTaskToReadyList+0xd0>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000380 	.word	0x20000380
 8002adc:	20000280 	.word	0x20000280
 8002ae0:	2000038c 	.word	0x2000038c
 8002ae4:	2000039c 	.word	0x2000039c
 8002ae8:	20000388 	.word	0x20000388
 8002aec:	20000284 	.word	0x20000284
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <vTaskDelay+0x60>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <vTaskDelay+0x2e>
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	e7fe      	b.n	8002b20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002b22:	f000 f879 	bl	8002c18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b26:	2100      	movs	r1, #0
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fd6b 	bl	8003604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b2e:	f000 f881 	bl	8002c34 <xTaskResumeAll>
 8002b32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <vTaskDelay+0x64>)
 8002b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200003a8 	.word	0x200003a8
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b6a:	463a      	mov	r2, r7
 8002b6c:	1d39      	adds	r1, r7, #4
 8002b6e:	f107 0308 	add.w	r3, r7, #8
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fce2 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	9202      	str	r2, [sp, #8]
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	460a      	mov	r2, r1
 8002b8a:	491d      	ldr	r1, [pc, #116]	; (8002c00 <vTaskStartScheduler+0xa4>)
 8002b8c:	481d      	ldr	r0, [pc, #116]	; (8002c04 <vTaskStartScheduler+0xa8>)
 8002b8e:	f7ff fe2b 	bl	80027e8 <xTaskCreateStatic>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <vTaskStartScheduler+0xac>)
 8002b96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <vTaskStartScheduler+0xac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e001      	b.n	8002baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d115      	bne.n	8002bdc <vTaskStartScheduler+0x80>
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <vTaskStartScheduler+0xb0>)
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <vTaskStartScheduler+0xb4>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <vTaskStartScheduler+0xb8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bd6:	f000 fe03 	bl	80037e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bda:	e00d      	b.n	8002bf8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d109      	bne.n	8002bf8 <vTaskStartScheduler+0x9c>
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e7fe      	b.n	8002bf6 <vTaskStartScheduler+0x9a>
}
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08003fe8 	.word	0x08003fe8
 8002c04:	080031a9 	.word	0x080031a9
 8002c08:	200003a4 	.word	0x200003a4
 8002c0c:	200003a0 	.word	0x200003a0
 8002c10:	2000038c 	.word	0x2000038c
 8002c14:	20000384 	.word	0x20000384

08002c18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <vTaskSuspendAll+0x18>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <vTaskSuspendAll+0x18>)
 8002c24:	6013      	str	r3, [r2, #0]
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	200003a8 	.word	0x200003a8

08002c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c42:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <xTaskResumeAll+0x114>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <xTaskResumeAll+0x2a>
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	e7fe      	b.n	8002c5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c5e:	f000 fe5d 	bl	800391c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c62:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <xTaskResumeAll+0x114>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <xTaskResumeAll+0x114>)
 8002c6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c6c:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <xTaskResumeAll+0x114>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d161      	bne.n	8002d38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c74:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <xTaskResumeAll+0x118>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05d      	beq.n	8002d38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c7c:	e02e      	b.n	8002cdc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <xTaskResumeAll+0x11c>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3318      	adds	r3, #24
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff faab 	bl	80021e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff faa6 	bl	80021e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <xTaskResumeAll+0x120>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <xTaskResumeAll+0x120>)
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <xTaskResumeAll+0x124>)
 8002cba:	441a      	add	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f7ff fa32 	bl	800212c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <xTaskResumeAll+0x128>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <xTaskResumeAll+0x12c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <xTaskResumeAll+0x11c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1cc      	bne.n	8002c7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cea:	f000 fb0f 	bl	800330c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <xTaskResumeAll+0x130>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cfa:	f000 f837 	bl	8002d6c <xTaskIncrementTick>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <xTaskResumeAll+0x12c>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f1      	bne.n	8002cfa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <xTaskResumeAll+0x130>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <xTaskResumeAll+0x12c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <xTaskResumeAll+0x134>)
 8002d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d38:	f000 fe1e 	bl	8003978 <vPortExitCritical>

	return xAlreadyYielded;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200003a8 	.word	0x200003a8
 8002d4c:	20000380 	.word	0x20000380
 8002d50:	20000340 	.word	0x20000340
 8002d54:	20000388 	.word	0x20000388
 8002d58:	20000284 	.word	0x20000284
 8002d5c:	20000280 	.word	0x20000280
 8002d60:	20000394 	.word	0x20000394
 8002d64:	20000390 	.word	0x20000390
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d76:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <xTaskIncrementTick+0x14c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 808c 	bne.w	8002e98 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d80:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <xTaskIncrementTick+0x150>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d88:	4a4c      	ldr	r2, [pc, #304]	; (8002ebc <xTaskIncrementTick+0x150>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11f      	bne.n	8002dd4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <xTaskIncrementTick+0x154>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <xTaskIncrementTick+0x46>
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	e7fe      	b.n	8002db0 <xTaskIncrementTick+0x44>
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <xTaskIncrementTick+0x154>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <xTaskIncrementTick+0x158>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <xTaskIncrementTick+0x154>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4a40      	ldr	r2, [pc, #256]	; (8002ec4 <xTaskIncrementTick+0x158>)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <xTaskIncrementTick+0x15c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a3e      	ldr	r2, [pc, #248]	; (8002ec8 <xTaskIncrementTick+0x15c>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	f000 fa9c 	bl	800330c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dd4:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <xTaskIncrementTick+0x160>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d34d      	bcc.n	8002e7a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <xTaskIncrementTick+0x154>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <xTaskIncrementTick+0x80>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <xTaskIncrementTick+0x82>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df2:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <xTaskIncrementTick+0x160>)
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	601a      	str	r2, [r3, #0]
					break;
 8002dfa:	e03e      	b.n	8002e7a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <xTaskIncrementTick+0x154>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d203      	bcs.n	8002e1c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <xTaskIncrementTick+0x160>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]
						break;
 8002e1a:	e02e      	b.n	8002e7a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f9e0 	bl	80021e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3318      	adds	r3, #24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f9d7 	bl	80021e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <xTaskIncrementTick+0x164>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <xTaskIncrementTick+0x164>)
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <xTaskIncrementTick+0x168>)
 8002e58:	441a      	add	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f7ff f963 	bl	800212c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <xTaskIncrementTick+0x16c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3b4      	bcc.n	8002dde <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e78:	e7b1      	b.n	8002dde <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <xTaskIncrementTick+0x16c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	4914      	ldr	r1, [pc, #80]	; (8002ed4 <xTaskIncrementTick+0x168>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d907      	bls.n	8002ea2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e004      	b.n	8002ea2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <xTaskIncrementTick+0x170>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <xTaskIncrementTick+0x170>)
 8002ea0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <xTaskIncrementTick+0x174>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002eae:	697b      	ldr	r3, [r7, #20]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200003a8 	.word	0x200003a8
 8002ebc:	20000384 	.word	0x20000384
 8002ec0:	20000338 	.word	0x20000338
 8002ec4:	2000033c 	.word	0x2000033c
 8002ec8:	20000398 	.word	0x20000398
 8002ecc:	200003a0 	.word	0x200003a0
 8002ed0:	20000388 	.word	0x20000388
 8002ed4:	20000284 	.word	0x20000284
 8002ed8:	20000280 	.word	0x20000280
 8002edc:	20000390 	.word	0x20000390
 8002ee0:	20000394 	.word	0x20000394

08002ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <vTaskSwitchContext+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <vTaskSwitchContext+0xa4>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ef8:	e03e      	b.n	8002f78 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <vTaskSwitchContext+0xa4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <vTaskSwitchContext+0xa8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	f1c3 031f 	rsb	r3, r3, #31
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	491e      	ldr	r1, [pc, #120]	; (8002f90 <vTaskSwitchContext+0xac>)
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	e7fe      	b.n	8002f3c <vTaskSwitchContext+0x58>
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <vTaskSwitchContext+0xac>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3308      	adds	r3, #8
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d104      	bne.n	8002f6e <vTaskSwitchContext+0x8a>
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <vTaskSwitchContext+0xb0>)
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	200003a8 	.word	0x200003a8
 8002f88:	20000394 	.word	0x20000394
 8002f8c:	20000388 	.word	0x20000388
 8002f90:	20000284 	.word	0x20000284
 8002f94:	20000280 	.word	0x20000280

08002f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <vTaskPlaceOnEventList+0x24>
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e7fe      	b.n	8002fba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <vTaskPlaceOnEventList+0x44>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff f8d5 	bl	8002174 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fca:	2101      	movs	r1, #1
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	f000 fb19 	bl	8003604 <prvAddCurrentTaskToDelayedList>
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000280 	.word	0x20000280

08002fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <xTaskRemoveFromEventList+0x2a>
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e7fe      	b.n	8003008 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3318      	adds	r3, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f8e9 	bl	80021e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <xTaskRemoveFromEventList+0xac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11c      	bne.n	8003056 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3304      	adds	r3, #4
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f8e0 	bl	80021e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	2201      	movs	r2, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <xTaskRemoveFromEventList+0xb0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <xTaskRemoveFromEventList+0xb0>)
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <xTaskRemoveFromEventList+0xb4>)
 8003046:	441a      	add	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7ff f86c 	bl	800212c <vListInsertEnd>
 8003054:	e005      	b.n	8003062 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3318      	adds	r3, #24
 800305a:	4619      	mov	r1, r3
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <xTaskRemoveFromEventList+0xb8>)
 800305e:	f7ff f865 	bl	800212c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <xTaskRemoveFromEventList+0xbc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	429a      	cmp	r2, r3
 800306e:	d905      	bls.n	800307c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <xTaskRemoveFromEventList+0xc0>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e001      	b.n	8003080 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003080:	697b      	ldr	r3, [r7, #20]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200003a8 	.word	0x200003a8
 8003090:	20000388 	.word	0x20000388
 8003094:	20000284 	.word	0x20000284
 8003098:	20000340 	.word	0x20000340
 800309c:	20000280 	.word	0x20000280
 80030a0:	20000394 	.word	0x20000394

080030a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <vTaskInternalSetTimeOutState+0x24>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <vTaskInternalSetTimeOutState+0x28>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	20000398 	.word	0x20000398
 80030cc:	20000384 	.word	0x20000384

080030d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <xTaskCheckForTimeOut+0x24>
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e7fe      	b.n	80030f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <xTaskCheckForTimeOut+0x3e>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e7fe      	b.n	800310c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800310e:	f000 fc05 	bl	800391c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <xTaskCheckForTimeOut+0xb8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d102      	bne.n	8003132 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e023      	b.n	800317a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <xTaskCheckForTimeOut+0xbc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d007      	beq.n	800314e <xTaskCheckForTimeOut+0x7e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	e015      	b.n	800317a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d20b      	bcs.n	8003170 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff9d 	bl	80030a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e004      	b.n	800317a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800317a:	f000 fbfd 	bl	8003978 <vPortExitCritical>

	return xReturn;
 800317e:	69fb      	ldr	r3, [r7, #28]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000384 	.word	0x20000384
 800318c:	20000398 	.word	0x20000398

08003190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <vTaskMissedYield+0x14>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000394 	.word	0x20000394

080031a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031b0:	f000 f852 	bl	8003258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <prvIdleTask+0x28>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d9f9      	bls.n	80031b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <prvIdleTask+0x2c>)
 80031be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031cc:	e7f0      	b.n	80031b0 <prvIdleTask+0x8>
 80031ce:	bf00      	nop
 80031d0:	20000284 	.word	0x20000284
 80031d4:	e000ed04 	.word	0xe000ed04

080031d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	e00c      	b.n	80031fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <prvInitialiseTaskLists+0x60>)
 80031f0:	4413      	add	r3, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe ff6d 	bl	80020d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d9ef      	bls.n	80031e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003206:	f7fe ff64 	bl	80020d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800320a:	480d      	ldr	r0, [pc, #52]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800320c:	f7fe ff61 	bl	80020d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <prvInitialiseTaskLists+0x6c>)
 8003212:	f7fe ff5e 	bl	80020d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <prvInitialiseTaskLists+0x70>)
 8003218:	f7fe ff5b 	bl	80020d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <prvInitialiseTaskLists+0x74>)
 800321e:	f7fe ff58 	bl	80020d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <prvInitialiseTaskLists+0x78>)
 8003224:	4a05      	ldr	r2, [pc, #20]	; (800323c <prvInitialiseTaskLists+0x64>)
 8003226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <prvInitialiseTaskLists+0x7c>)
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <prvInitialiseTaskLists+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000284 	.word	0x20000284
 800323c:	20000310 	.word	0x20000310
 8003240:	20000324 	.word	0x20000324
 8003244:	20000340 	.word	0x20000340
 8003248:	20000354 	.word	0x20000354
 800324c:	2000036c 	.word	0x2000036c
 8003250:	20000338 	.word	0x20000338
 8003254:	2000033c 	.word	0x2000033c

08003258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325e:	e019      	b.n	8003294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003260:	f000 fb5c 	bl	800391c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <prvCheckTasksWaitingTermination+0x4c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe ffb8 	bl	80021e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <prvCheckTasksWaitingTermination+0x50>)
 800327e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800328a:	f000 fb75 	bl	8003978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f80e 	bl	80032b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <prvCheckTasksWaitingTermination+0x54>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e1      	bne.n	8003260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000354 	.word	0x20000354
 80032a8:	20000380 	.word	0x20000380
 80032ac:	20000368 	.word	0x20000368

080032b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fd04 	bl	8003cd4 <vPortFree>
				vPortFree( pxTCB );
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fd01 	bl	8003cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032d2:	e017      	b.n	8003304 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d103      	bne.n	80032e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fcf8 	bl	8003cd4 <vPortFree>
	}
 80032e4:	e00e      	b.n	8003304 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d009      	beq.n	8003304 <prvDeleteTCB+0x54>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e7fe      	b.n	8003302 <prvDeleteTCB+0x52>
	}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <prvResetNextTaskUnblockTime+0x44>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <prvResetNextTaskUnblockTime+0x14>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <prvResetNextTaskUnblockTime+0x16>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <prvResetNextTaskUnblockTime+0x48>)
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800332e:	e008      	b.n	8003342 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <prvResetNextTaskUnblockTime+0x44>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <prvResetNextTaskUnblockTime+0x48>)
 8003340:	6013      	str	r3, [r2, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000338 	.word	0x20000338
 8003354:	200003a0 	.word	0x200003a0

08003358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <xTaskGetSchedulerState+0x34>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003366:	2301      	movs	r3, #1
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	e008      	b.n	800337e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <xTaskGetSchedulerState+0x38>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003374:	2302      	movs	r3, #2
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	e001      	b.n	800337e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800337e:	687b      	ldr	r3, [r7, #4]
	}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	2000038c 	.word	0x2000038c
 8003390:	200003a8 	.word	0x200003a8

08003394 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06e      	beq.n	8003488 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	4b39      	ldr	r3, [pc, #228]	; (8003494 <xTaskPriorityInherit+0x100>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d25e      	bcs.n	8003476 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db06      	blt.n	80033ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c0:	4b34      	ldr	r3, [pc, #208]	; (8003494 <xTaskPriorityInherit+0x100>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	f1c3 0207 	rsb	r2, r3, #7
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6959      	ldr	r1, [r3, #20]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <xTaskPriorityInherit+0x104>)
 80033e0:	4413      	add	r3, r2
 80033e2:	4299      	cmp	r1, r3
 80033e4:	d101      	bne.n	80033ea <xTaskPriorityInherit+0x56>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xTaskPriorityInherit+0x58>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03a      	beq.n	8003466 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fef6 	bl	80021e6 <uxListRemove>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d115      	bne.n	800342c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	4924      	ldr	r1, [pc, #144]	; (8003498 <xTaskPriorityInherit+0x104>)
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <xTaskPriorityInherit+0x98>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <xTaskPriorityInherit+0x108>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4013      	ands	r3, r2
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <xTaskPriorityInherit+0x108>)
 800342a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <xTaskPriorityInherit+0x100>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	2201      	movs	r2, #1
 800343c:	409a      	lsls	r2, r3
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <xTaskPriorityInherit+0x108>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <xTaskPriorityInherit+0x108>)
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4a10      	ldr	r2, [pc, #64]	; (8003498 <xTaskPriorityInherit+0x104>)
 8003456:	441a      	add	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7fe fe64 	bl	800212c <vListInsertEnd>
 8003464:	e004      	b.n	8003470 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <xTaskPriorityInherit+0x100>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e008      	b.n	8003488 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <xTaskPriorityInherit+0x100>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	429a      	cmp	r2, r3
 8003482:	d201      	bcs.n	8003488 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003488:	68fb      	ldr	r3, [r7, #12]
	}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000280 	.word	0x20000280
 8003498:	20000284 	.word	0x20000284
 800349c:	20000388 	.word	0x20000388

080034a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8086 	beq.w	80035c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e7fe      	b.n	80034d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d902      	bls.n	80034e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e002      	b.n	80034ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d067      	beq.n	80035c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d162      	bne.n	80035c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003500:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	429a      	cmp	r2, r3
 8003508:	d109      	bne.n	800351e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	e7fe      	b.n	800351c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db04      	blt.n	800353c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f1c3 0207 	rsb	r2, r3, #7
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6959      	ldr	r1, [r3, #20]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800354c:	4413      	add	r3, r2
 800354e:	4299      	cmp	r1, r3
 8003550:	d101      	bne.n	8003556 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d034      	beq.n	80035c6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	3304      	adds	r3, #4
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe fe40 	bl	80021e6 <uxListRemove>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d115      	bne.n	8003598 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	4918      	ldr	r1, [pc, #96]	; (80035d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	2201      	movs	r2, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43da      	mvns	r2, r3
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4013      	ands	r3, r2
 8003594:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003596:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	2201      	movs	r2, #1
 800359e:	409a      	lsls	r2, r3
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80035b8:	441a      	add	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe fdb3 	bl	800212c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035c6:	bf00      	nop
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000280 	.word	0x20000280
 80035d4:	20000284 	.word	0x20000284
 80035d8:	20000388 	.word	0x20000388

080035dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <pvTaskIncrementMutexHeldCount+0x24>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <pvTaskIncrementMutexHeldCount+0x24>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ee:	3201      	adds	r2, #1
 80035f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80035f2:	4b03      	ldr	r3, [pc, #12]	; (8003600 <pvTaskIncrementMutexHeldCount+0x24>)
 80035f4:	681b      	ldr	r3, [r3, #0]
	}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	20000280 	.word	0x20000280

08003604 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800360e:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3304      	adds	r3, #4
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fde3 	bl	80021e6 <uxListRemove>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	4b21      	ldr	r3, [pc, #132]	; (80036bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4013      	ands	r3, r2
 800363a:	4a20      	ldr	r2, [pc, #128]	; (80036bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800363c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d10a      	bne.n	800365c <prvAddCurrentTaskToDelayedList+0x58>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	481a      	ldr	r0, [pc, #104]	; (80036c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003656:	f7fe fd69 	bl	800212c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800365a:	e026      	b.n	80036aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	429a      	cmp	r2, r3
 8003672:	d209      	bcs.n	8003688 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fe fd77 	bl	8002174 <vListInsert>
}
 8003686:	e010      	b.n	80036aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7fe fd6d 	bl	8002174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d202      	bcs.n	80036aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6013      	str	r3, [r2, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000384 	.word	0x20000384
 80036b8:	20000280 	.word	0x20000280
 80036bc:	20000388 	.word	0x20000388
 80036c0:	2000036c 	.word	0x2000036c
 80036c4:	2000033c 	.word	0x2000033c
 80036c8:	20000338 	.word	0x20000338
 80036cc:	200003a0 	.word	0x200003a0

080036d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3b04      	subs	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3b04      	subs	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b04      	subs	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003700:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <pxPortInitialiseStack+0x64>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3b14      	subs	r3, #20
 800370a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b04      	subs	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f06f 0202 	mvn.w	r2, #2
 800371e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b20      	subs	r3, #32
 8003724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	08003739 	.word	0x08003739

08003738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <prvTaskExitError+0x50>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d009      	beq.n	8003760 <prvTaskExitError+0x28>
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e7fe      	b.n	800375e <prvTaskExitError+0x26>
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003772:	bf00      	nop
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0fc      	beq.n	8003774 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	2000000c 	.word	0x2000000c
 800378c:	00000000 	.word	0x00000000

08003790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <pxCurrentTCBConst2>)
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	6808      	ldr	r0, [r1, #0]
 8003796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379a:	f380 8809 	msr	PSP, r0
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f380 8811 	msr	BASEPRI, r0
 80037aa:	4770      	bx	lr
 80037ac:	f3af 8000 	nop.w

080037b0 <pxCurrentTCBConst2>:
 80037b0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop

080037b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037b8:	4808      	ldr	r0, [pc, #32]	; (80037dc <prvPortStartFirstTask+0x24>)
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	6800      	ldr	r0, [r0, #0]
 80037be:	f380 8808 	msr	MSP, r0
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8814 	msr	CONTROL, r0
 80037ca:	b662      	cpsie	i
 80037cc:	b661      	cpsie	f
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	df00      	svc	0
 80037d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037da:	bf00      	nop
 80037dc:	e000ed08 	.word	0xe000ed08

080037e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037e6:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <xPortStartScheduler+0x118>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a44      	ldr	r2, [pc, #272]	; (80038fc <xPortStartScheduler+0x11c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d109      	bne.n	8003804 <xPortStartScheduler+0x24>
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e7fe      	b.n	8003802 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <xPortStartScheduler+0x118>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a3d      	ldr	r2, [pc, #244]	; (8003900 <xPortStartScheduler+0x120>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d109      	bne.n	8003822 <xPortStartScheduler+0x42>
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e7fe      	b.n	8003820 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <xPortStartScheduler+0x124>)
 8003824:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b30      	ldr	r3, [pc, #192]	; (8003908 <xPortStartScheduler+0x128>)
 8003848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <xPortStartScheduler+0x12c>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003850:	e009      	b.n	8003866 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <xPortStartScheduler+0x12c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <xPortStartScheduler+0x12c>)
 800385a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	b2db      	uxtb	r3, r3
 8003864:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386e:	2b80      	cmp	r3, #128	; 0x80
 8003870:	d0ef      	beq.n	8003852 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <xPortStartScheduler+0x12c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	d009      	beq.n	8003892 <xPortStartScheduler+0xb2>
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	e7fe      	b.n	8003890 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003892:	4b1e      	ldr	r3, [pc, #120]	; (800390c <xPortStartScheduler+0x12c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <xPortStartScheduler+0x12c>)
 800389a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <xPortStartScheduler+0x12c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038a4:	4a19      	ldr	r2, [pc, #100]	; (800390c <xPortStartScheduler+0x12c>)
 80038a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038b0:	4b17      	ldr	r3, [pc, #92]	; (8003910 <xPortStartScheduler+0x130>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <xPortStartScheduler+0x130>)
 80038b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <xPortStartScheduler+0x130>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <xPortStartScheduler+0x130>)
 80038c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038c8:	f000 f8d6 	bl	8003a78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <xPortStartScheduler+0x134>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038d2:	f000 f8f5 	bl	8003ac0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <xPortStartScheduler+0x138>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <xPortStartScheduler+0x138>)
 80038dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80038e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038e2:	f7ff ff69 	bl	80037b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038e6:	f7ff fafd 	bl	8002ee4 <vTaskSwitchContext>
	prvTaskExitError();
 80038ea:	f7ff ff25 	bl	8003738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000ed00 	.word	0xe000ed00
 80038fc:	410fc271 	.word	0x410fc271
 8003900:	410fc270 	.word	0x410fc270
 8003904:	e000e400 	.word	0xe000e400
 8003908:	200003ac 	.word	0x200003ac
 800390c:	200003b0 	.word	0x200003b0
 8003910:	e000ed20 	.word	0xe000ed20
 8003914:	2000000c 	.word	0x2000000c
 8003918:	e000ef34 	.word	0xe000ef34

0800391c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003934:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <vPortEnterCritical+0x54>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <vPortEnterCritical+0x54>)
 800393c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <vPortEnterCritical+0x54>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10e      	bne.n	8003964 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <vPortEnterCritical+0x58>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <vPortEnterCritical+0x48>
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	e7fe      	b.n	8003962 <vPortEnterCritical+0x46>
	}
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	2000000c 	.word	0x2000000c
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <vPortExitCritical+0x4c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <vPortExitCritical+0x22>
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e7fe      	b.n	8003998 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <vPortExitCritical+0x4c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <vPortExitCritical+0x4c>)
 80039a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <vPortExitCritical+0x4c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d104      	bne.n	80039b6 <vPortExitCritical+0x3e>
 80039ac:	2300      	movs	r3, #0
 80039ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000000c 	.word	0x2000000c
	...

080039d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039d0:	f3ef 8009 	mrs	r0, PSP
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <pxCurrentTCBConst>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f01e 0f10 	tst.w	lr, #16
 80039e0:	bf08      	it	eq
 80039e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	6010      	str	r0, [r2, #0]
 80039ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039f4:	f380 8811 	msr	BASEPRI, r0
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f7ff fa70 	bl	8002ee4 <vTaskSwitchContext>
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f380 8811 	msr	BASEPRI, r0
 8003a0c:	bc09      	pop	{r0, r3}
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	6808      	ldr	r0, [r1, #0]
 8003a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a16:	f01e 0f10 	tst.w	lr, #16
 8003a1a:	bf08      	it	eq
 8003a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a20:	f380 8809 	msr	PSP, r0
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w

08003a30 <pxCurrentTCBConst>:
 8003a30:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop

08003a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a50:	f7ff f98c 	bl	8002d6c <xTaskIncrementTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <SysTick_Handler+0x3c>)
 8003a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	e000ed04 	.word	0xe000ed04

08003a78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <vPortSetupTimerInterrupt+0x34>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <vPortSetupTimerInterrupt+0x38>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <vPortSetupTimerInterrupt+0x3c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <vPortSetupTimerInterrupt+0x40>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <vPortSetupTimerInterrupt+0x44>)
 8003a96:	3b01      	subs	r3, #1
 8003a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <vPortSetupTimerInterrupt+0x34>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000e010 	.word	0xe000e010
 8003ab0:	e000e018 	.word	0xe000e018
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	10624dd3 	.word	0x10624dd3
 8003abc:	e000e014 	.word	0xe000e014

08003ac0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ac0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ad0 <vPortEnableVFP+0x10>
 8003ac4:	6801      	ldr	r1, [r0, #0]
 8003ac6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003aca:	6001      	str	r1, [r0, #0]
 8003acc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ace:	bf00      	nop
 8003ad0:	e000ed88 	.word	0xe000ed88

08003ad4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ada:	f3ef 8305 	mrs	r3, IPSR
 8003ade:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	d913      	bls.n	8003b0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ae6:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <vPortValidateInterruptPriority+0x6c>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003af0:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <vPortValidateInterruptPriority+0x70>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	7afa      	ldrb	r2, [r7, #11]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d209      	bcs.n	8003b0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	e7fe      	b.n	8003b0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <vPortValidateInterruptPriority+0x74>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <vPortValidateInterruptPriority+0x78>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d909      	bls.n	8003b32 <vPortValidateInterruptPriority+0x5e>
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	e7fe      	b.n	8003b30 <vPortValidateInterruptPriority+0x5c>
	}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000e3f0 	.word	0xe000e3f0
 8003b44:	200003ac 	.word	0x200003ac
 8003b48:	e000ed0c 	.word	0xe000ed0c
 8003b4c:	200003b0 	.word	0x200003b0

08003b50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b5c:	f7ff f85c 	bl	8002c18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b60:	4b57      	ldr	r3, [pc, #348]	; (8003cc0 <pvPortMalloc+0x170>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b68:	f000 f90c 	bl	8003d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b6c:	4b55      	ldr	r3, [pc, #340]	; (8003cc4 <pvPortMalloc+0x174>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f040 808c 	bne.w	8003c92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01c      	beq.n	8003bba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003b80:	2208      	movs	r2, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f023 0307 	bic.w	r3, r3, #7
 8003b98:	3308      	adds	r3, #8
 8003b9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <pvPortMalloc+0x6a>
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e7fe      	b.n	8003bb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d068      	beq.n	8003c92 <pvPortMalloc+0x142>
 8003bc0:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <pvPortMalloc+0x178>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d863      	bhi.n	8003c92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <pvPortMalloc+0x17c>)
 8003bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <pvPortMalloc+0x17c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bd4:	e004      	b.n	8003be0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d903      	bls.n	8003bf2 <pvPortMalloc+0xa2>
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f1      	bne.n	8003bd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <pvPortMalloc+0x170>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d04a      	beq.n	8003c92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2208      	movs	r2, #8
 8003c02:	4413      	add	r3, r2
 8003c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1ad2      	subs	r2, r2, r3
 8003c16:	2308      	movs	r3, #8
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d91e      	bls.n	8003c5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <pvPortMalloc+0xf4>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e7fe      	b.n	8003c42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c56:	69b8      	ldr	r0, [r7, #24]
 8003c58:	f000 f8f6 	bl	8003e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <pvPortMalloc+0x178>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <pvPortMalloc+0x178>)
 8003c68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <pvPortMalloc+0x178>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <pvPortMalloc+0x180>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d203      	bcs.n	8003c7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <pvPortMalloc+0x178>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <pvPortMalloc+0x180>)
 8003c7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <pvPortMalloc+0x174>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c92:	f7fe ffcf 	bl	8002c34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <pvPortMalloc+0x164>
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e7fe      	b.n	8003cb2 <pvPortMalloc+0x162>
	return pvReturn;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20003fbc 	.word	0x20003fbc
 8003cc4:	20003fc8 	.word	0x20003fc8
 8003cc8:	20003fc0 	.word	0x20003fc0
 8003ccc:	20003fb4 	.word	0x20003fb4
 8003cd0:	20003fc4 	.word	0x20003fc4

08003cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d046      	beq.n	8003d74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	425b      	negs	r3, r3
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <vPortFree+0xa8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <vPortFree+0x42>
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e7fe      	b.n	8003d14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <vPortFree+0x5e>
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	e7fe      	b.n	8003d30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <vPortFree+0xa8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d019      	beq.n	8003d74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <vPortFree+0xa8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d58:	f7fe ff5e 	bl	8002c18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <vPortFree+0xac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <vPortFree+0xac>)
 8003d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d6a:	6938      	ldr	r0, [r7, #16]
 8003d6c:	f000 f86c 	bl	8003e48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d70:	f7fe ff60 	bl	8002c34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20003fc8 	.word	0x20003fc8
 8003d80:	20003fc0 	.word	0x20003fc0

08003d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <prvHeapInit+0xac>)
 8003d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3307      	adds	r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <prvHeapInit+0xac>)
 8003db4:	4413      	add	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <prvHeapInit+0xb0>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <prvHeapInit+0xb0>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	4413      	add	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0307 	bic.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <prvHeapInit+0xb4>)
 8003de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <prvHeapInit+0xb4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <prvHeapInit+0xb4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <prvHeapInit+0xb4>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <prvHeapInit+0xb8>)
 8003e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <prvHeapInit+0xbc>)
 8003e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <prvHeapInit+0xc0>)
 8003e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e22:	601a      	str	r2, [r3, #0]
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	200003b4 	.word	0x200003b4
 8003e34:	20003fb4 	.word	0x20003fb4
 8003e38:	20003fbc 	.word	0x20003fbc
 8003e3c:	20003fc4 	.word	0x20003fc4
 8003e40:	20003fc0 	.word	0x20003fc0
 8003e44:	20003fc8 	.word	0x20003fc8

08003e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <prvInsertBlockIntoFreeList+0xac>)
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e002      	b.n	8003e5c <prvInsertBlockIntoFreeList+0x14>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d8f7      	bhi.n	8003e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4413      	add	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d108      	bne.n	8003e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	441a      	add	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d118      	bne.n	8003ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d00d      	beq.n	8003ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e008      	b.n	8003ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e003      	b.n	8003ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d002      	beq.n	8003ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20003fb4 	.word	0x20003fb4
 8003ef8:	20003fbc 	.word	0x20003fbc

08003efc <__libc_init_array>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0d      	ldr	r6, [pc, #52]	; (8003f34 <__libc_init_array+0x38>)
 8003f00:	4c0d      	ldr	r4, [pc, #52]	; (8003f38 <__libc_init_array+0x3c>)
 8003f02:	1ba4      	subs	r4, r4, r6
 8003f04:	10a4      	asrs	r4, r4, #2
 8003f06:	2500      	movs	r5, #0
 8003f08:	42a5      	cmp	r5, r4
 8003f0a:	d109      	bne.n	8003f20 <__libc_init_array+0x24>
 8003f0c:	4e0b      	ldr	r6, [pc, #44]	; (8003f3c <__libc_init_array+0x40>)
 8003f0e:	4c0c      	ldr	r4, [pc, #48]	; (8003f40 <__libc_init_array+0x44>)
 8003f10:	f000 f820 	bl	8003f54 <_init>
 8003f14:	1ba4      	subs	r4, r4, r6
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	2500      	movs	r5, #0
 8003f1a:	42a5      	cmp	r5, r4
 8003f1c:	d105      	bne.n	8003f2a <__libc_init_array+0x2e>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f24:	4798      	blx	r3
 8003f26:	3501      	adds	r5, #1
 8003f28:	e7ee      	b.n	8003f08 <__libc_init_array+0xc>
 8003f2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f2e:	4798      	blx	r3
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7f2      	b.n	8003f1a <__libc_init_array+0x1e>
 8003f34:	08004010 	.word	0x08004010
 8003f38:	08004010 	.word	0x08004010
 8003f3c:	08004010 	.word	0x08004010
 8003f40:	08004014 	.word	0x08004014

08003f44 <memset>:
 8003f44:	4402      	add	r2, r0
 8003f46:	4603      	mov	r3, r0
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <memset+0xa>
 8003f4c:	4770      	bx	lr
 8003f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f52:	e7f9      	b.n	8003f48 <memset+0x4>

08003f54 <_init>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr

08003f60 <_fini>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr
