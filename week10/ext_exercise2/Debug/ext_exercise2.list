
ext_exercise2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002368  08002368  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002370  08002370  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002370  08002370  00012370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002374  08002374  00012374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002384  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002384  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c8c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001567  00000000  00000000  00028cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0002a230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015174  00000000  00000000  0002b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006900  00000000  00000000  0004056c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000863dd  00000000  00000000  00046e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f4  00000000  00000000  000cd2c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002338 	.word	0x08002338

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002338 	.word	0x08002338

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fb85 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f831 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8dd 	bl	80006a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80004ea:	f000 f88d 	bl	8000608 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80004ee:	4814      	ldr	r0, [pc, #80]	; (8000540 <main+0x68>)
 80004f0:	f001 fb23 	bl	8001b3a <HAL_TIM_Base_Start_IT>
	for(int i = 0; i < 2*10; i++){
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	e00b      	b.n	8000512 <main+0x3a>
		HAL_GPIO_TogglePin(GPIOD, GREEN);
 80004fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fe:	4811      	ldr	r0, [pc, #68]	; (8000544 <main+0x6c>)
 8000500:	f000 fe55 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000508:	f000 fbb2 	bl	8000c70 <HAL_Delay>
	for(int i = 0; i < 2*10; i++){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3301      	adds	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b13      	cmp	r3, #19
 8000516:	ddf0      	ble.n	80004fa <main+0x22>
	}
	HAL_GPIO_WritePin(GPIOD, RED, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x6c>)
 8000520:	f000 fe2c 	bl	800117c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Stop_IT(&htim3);
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <main+0x68>)
 8000526:	f001 fb2c 	bl	8001b82 <HAL_TIM_Base_Stop_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOD, GREEN);
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x6c>)
 8000530:	f000 fe3d 	bl	80011ae <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000538:	f000 fb9a 	bl	8000c70 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GREEN);
 800053c:	e7f5      	b.n	800052a <main+0x52>
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028
 8000544:	40020c00 	.word	0x40020c00

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fee6 	bl	8002328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xb8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemClock_Config+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <SystemClock_Config+0xbc>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <SystemClock_Config+0xbc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fe13 	bl	80011e4 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c4:	f000 f9de 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f86c 	bl	80016c4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f2:	f000 f9c7 	bl	8000984 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_TIM3_Init+0x94>)
 8000626:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <MX_TIM3_Init+0x98>)
 8000628:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_TIM3_Init+0x94>)
 800062c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_TIM3_Init+0x94>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_TIM3_Init+0x94>)
 800063a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_TIM3_Init+0x94>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_TIM3_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <MX_TIM3_Init+0x94>)
 800064e:	f001 fa49 	bl	8001ae4 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000658:	f000 f994 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_TIM3_Init+0x94>)
 800066a:	f001 fbbd 	bl	8001de8 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 f986 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_TIM3_Init+0x94>)
 8000686:	f001 fda9 	bl	80021dc <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000690:	f000 f978 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	40000400 	.word	0x40000400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4ba1      	ldr	r3, [pc, #644]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4aa0      	ldr	r2, [pc, #640]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006c4:	f043 0310 	orr.w	r3, r3, #16
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b9e      	ldr	r3, [pc, #632]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b9a      	ldr	r3, [pc, #616]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a99      	ldr	r2, [pc, #612]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b97      	ldr	r3, [pc, #604]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b93      	ldr	r3, [pc, #588]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a92      	ldr	r2, [pc, #584]	; (8000944 <MX_GPIO_Init+0x2a0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b90      	ldr	r3, [pc, #576]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b8c      	ldr	r3, [pc, #560]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a8b      	ldr	r2, [pc, #556]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b89      	ldr	r3, [pc, #548]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b85      	ldr	r3, [pc, #532]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a84      	ldr	r2, [pc, #528]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b82      	ldr	r3, [pc, #520]	; (8000944 <MX_GPIO_Init+0x2a0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b7e      	ldr	r3, [pc, #504]	; (8000944 <MX_GPIO_Init+0x2a0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a7d      	ldr	r2, [pc, #500]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <MX_GPIO_Init+0x2a0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2108      	movs	r1, #8
 8000766:	4878      	ldr	r0, [pc, #480]	; (8000948 <MX_GPIO_Init+0x2a4>)
 8000768:	f000 fd08 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2101      	movs	r1, #1
 8000770:	4876      	ldr	r0, [pc, #472]	; (800094c <MX_GPIO_Init+0x2a8>)
 8000772:	f000 fd03 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000776:	2200      	movs	r2, #0
 8000778:	f24f 0110 	movw	r1, #61456	; 0xf010
 800077c:	4874      	ldr	r0, [pc, #464]	; (8000950 <MX_GPIO_Init+0x2ac>)
 800077e:	f000 fcfd 	bl	800117c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000782:	2304      	movs	r3, #4
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	486c      	ldr	r0, [pc, #432]	; (8000948 <MX_GPIO_Init+0x2a4>)
 8000796:	f000 fb6f 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800079a:	2308      	movs	r3, #8
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4865      	ldr	r0, [pc, #404]	; (8000948 <MX_GPIO_Init+0x2a4>)
 80007b2:	f000 fb61 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80007b6:	2332      	movs	r3, #50	; 0x32
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ba:	4b66      	ldr	r3, [pc, #408]	; (8000954 <MX_GPIO_Init+0x2b0>)
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	485f      	ldr	r0, [pc, #380]	; (8000948 <MX_GPIO_Init+0x2a4>)
 80007ca:	f000 fb55 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4859      	ldr	r0, [pc, #356]	; (800094c <MX_GPIO_Init+0x2a8>)
 80007e6:	f000 fb47 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4851      	ldr	r0, [pc, #324]	; (800094c <MX_GPIO_Init+0x2a8>)
 8000806:	f000 fb37 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080a:	2301      	movs	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800080e:	4b51      	ldr	r3, [pc, #324]	; (8000954 <MX_GPIO_Init+0x2b0>)
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	484e      	ldr	r0, [pc, #312]	; (8000958 <MX_GPIO_Init+0x2b4>)
 800081e:	f000 fb2b 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000822:	2310      	movs	r3, #16
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000832:	2306      	movs	r3, #6
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4846      	ldr	r0, [pc, #280]	; (8000958 <MX_GPIO_Init+0x2b4>)
 800083e:	f000 fb1b 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000842:	23e0      	movs	r3, #224	; 0xe0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	483e      	ldr	r0, [pc, #248]	; (8000958 <MX_GPIO_Init+0x2b4>)
 800085e:	f000 fb0b 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000862:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000874:	2305      	movs	r3, #5
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4837      	ldr	r0, [pc, #220]	; (800095c <MX_GPIO_Init+0x2b8>)
 8000880:	f000 fafa 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000884:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000888:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	482c      	ldr	r0, [pc, #176]	; (8000950 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 faeb 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008a2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4823      	ldr	r0, [pc, #140]	; (800094c <MX_GPIO_Init+0x2a8>)
 80008c0:	f000 fada 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <MX_GPIO_Init+0x2b4>)
 80008da:	f000 facd 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f0:	230a      	movs	r3, #10
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <MX_GPIO_Init+0x2b4>)
 80008fc:	f000 fabc 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <MX_GPIO_Init+0x2ac>)
 8000914:	f000 fab0 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000918:	f44f 7310 	mov.w	r3, #576	; 0x240
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091e:	2312      	movs	r3, #18
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800092a:	2304      	movs	r3, #4
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_GPIO_Init+0x2b8>)
 8000936:	f000 fa9f 	bl	8000e78 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3730      	adds	r7, #48	; 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	10120000 	.word	0x10120000
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 f95d 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010000 	.word	0x40010000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_TIM_Base_MspInit+0x48>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d115      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_TIM_Base_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <HAL_TIM_Base_MspInit+0x4c>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	201d      	movs	r0, #29
 8000a18:	f000 fa04 	bl	8000e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a1c:	201d      	movs	r0, #29
 8000a1e:	f000 fa1d 	bl	8000e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40000400 	.word	0x40000400
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2019      	movs	r0, #25
 8000a4a:	f000 f9eb 	bl	8000e24 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000a4e:	2019      	movs	r0, #25
 8000a50:	f000 fa04 	bl	8000e5c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6453      	str	r3, [r2, #68]	; 0x44
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f800 	bl	8001a80 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a80:	f000 ffea 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa8>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xb0>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aba:	f001 f813 	bl	8001ae4 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ac6:	f001 f838 	bl	8001b3a <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20000068 	.word	0x20000068
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b3e:	f001 f84b 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000068 	.word	0x20000068

08000b4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <TIM3_IRQHandler+0x18>)
 8000b56:	f000 fb2a 	bl	80011ae <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <TIM3_IRQHandler+0x1c>)
 8000b5c:	f001 f83c 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	20000028 	.word	0x20000028

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <SystemInit+0x28>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <SystemInit+0x28>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <SystemInit+0x28>)
 8000b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b86:	609a      	str	r2, [r3, #8]
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd3 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f001 fb8b 	bl	80022e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fc85 	bl	80004d8 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bd4:	08002378 	.word	0x08002378
  ldr  r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bdc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000be4:	200000ac 	.word	0x200000ac

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8fa 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff ff0a 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff feb8 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200000a8 	.word	0x200000a8

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000a8 	.word	0x200000a8

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_Delay+0x40>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e159      	b.n	8001148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8148 	bne.w	8001142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec6:	2b11      	cmp	r3, #17
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d130      	bne.n	8000f34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	f003 0201 	and.w	r2, r3, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0xfc>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b12      	cmp	r3, #18
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a2 	beq.w	8001142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a55      	ldr	r2, [pc, #340]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <HAL_GPIO_Init+0x2e4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_GPIO_Init+0x2e8>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x2ec>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x202>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a47      	ldr	r2, [pc, #284]	; (8001168 <HAL_GPIO_Init+0x2f0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x1fe>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a46      	ldr	r2, [pc, #280]	; (800116c <HAL_GPIO_Init+0x2f4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x1fa>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a45      	ldr	r2, [pc, #276]	; (8001170 <HAL_GPIO_Init+0x2f8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x1f6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a44      	ldr	r2, [pc, #272]	; (8001174 <HAL_GPIO_Init+0x2fc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x1f2>
 8001066:	2304      	movs	r3, #4
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x204>
 800106a:	2307      	movs	r3, #7
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x204>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x204>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x204>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x204>
 800107a:	2300      	movs	r3, #0
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4934      	ldr	r1, [pc, #208]	; (8001160 <HAL_GPIO_Init+0x2e8>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <HAL_GPIO_Init+0x300>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010be:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_GPIO_Init+0x300>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x300>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_GPIO_Init+0x300>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_GPIO_Init+0x300>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f67f aea2 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	3724      	adds	r7, #36	; 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695a      	ldr	r2, [r3, #20]
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	401a      	ands	r2, r3
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d104      	bne.n	80011d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	041a      	lsls	r2, r3, #16
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e25b      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d075      	beq.n	80012ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d00c      	beq.n	8001228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001216:	2b08      	cmp	r3, #8
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b9d      	ldr	r3, [pc, #628]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001226:	d10b      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b99      	ldr	r3, [pc, #612]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d157      	bne.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e236      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d106      	bne.n	8001258 <HAL_RCC_OscConfig+0x74>
 800124a:	4b91      	ldr	r3, [pc, #580]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a90      	ldr	r2, [pc, #576]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b8b      	ldr	r3, [pc, #556]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a8a      	ldr	r2, [pc, #552]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a87      	ldr	r2, [pc, #540]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 800127c:	4b84      	ldr	r3, [pc, #528]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a83      	ldr	r2, [pc, #524]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a80      	ldr	r2, [pc, #512]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fcdc 	bl	8000c58 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fcd8 	bl	8000c58 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1fb      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fcc8 	bl	8000c58 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcc4 	bl	8000c58 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1e7      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	4b65      	ldr	r3, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b62      	ldr	r3, [pc, #392]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1bb      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4952      	ldr	r1, [pc, #328]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x2b0>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fc7d 	bl	8000c58 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fc79 	bl	8000c58 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e19c      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4940      	ldr	r1, [pc, #256]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x2b0>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fc5c 	bl	8000c58 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc58 	bl	8000c58 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e17b      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x2b4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc3c 	bl	8000c58 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc38 	bl	8000c58 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e15b      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x200>
 8001402:	e015      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x2b4>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fc25 	bl	8000c58 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fc21 	bl	8000c58 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e144      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a0 	beq.w	800157e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d121      	bne.n	80014be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fbe7 	bl	8000c58 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e011      	b.n	80014b2 <HAL_RCC_OscConfig+0x2ce>
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
 800149c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff fbda 	bl	8000c58 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0fd      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x4d4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
 80014d2:	e01c      	b.n	800150e <HAL_RCC_OscConfig+0x32a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014dc:	4b77      	ldr	r3, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a76      	ldr	r2, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b74      	ldr	r3, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a73      	ldr	r2, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x32a>
 80014f6:	4b71      	ldr	r3, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a70      	ldr	r2, [pc, #448]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a6d      	ldr	r2, [pc, #436]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d015      	beq.n	8001542 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fb9f 	bl	8000c58 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fb9b 	bl	8000c58 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0bc      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	4b61      	ldr	r3, [pc, #388]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ee      	beq.n	800151e <HAL_RCC_OscConfig+0x33a>
 8001540:	e014      	b.n	800156c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb89 	bl	8000c58 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb85 	bl	8000c58 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0a6      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b52      	ldr	r3, [pc, #328]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a51      	ldr	r2, [pc, #324]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8092 	beq.w	80016ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d05c      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d141      	bne.n	8001620 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <HAL_RCC_OscConfig+0x4dc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb59 	bl	8000c58 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb55 	bl	8000c58 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e078      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	019b      	lsls	r3, r3, #6
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	4933      	ldr	r1, [pc, #204]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_RCC_OscConfig+0x4dc>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb2e 	bl	8000c58 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb2a 	bl	8000c58 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e04d      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x41c>
 800161e:	e045      	b.n	80016ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x4dc>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fb17 	bl	8000c58 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fb13 	bl	8000c58 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e036      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x44a>
 800164c:	e02e      	b.n	80016ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e029      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_RCC_OscConfig+0x4d8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	429a      	cmp	r2, r3
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d115      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001688:	4293      	cmp	r3, r2
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40007000 	.word	0x40007000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	42470060 	.word	0x42470060

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0cc      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d90c      	bls.n	8001700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d044      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d003      	beq.n	8001782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e067      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4934      	ldr	r1, [pc, #208]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff fa50 	bl	8000c58 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff fa4c 	bl	8000c58 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d20c      	bcs.n	800180c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4601      	mov	r1, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	fa21 f303 	lsr.w	r3, r1, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f8e2 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08002350 	.word	0x08002350
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d007      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x32>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d008      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x38>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80b4 	bne.w	8001a24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b5e      	ldr	r3, [pc, #376]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018be:	60bb      	str	r3, [r7, #8]
       break;
 80018c0:	e0b3      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c2:	4b5e      	ldr	r3, [pc, #376]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018c4:	60bb      	str	r3, [r7, #8]
      break;
 80018c6:	e0b0      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c8:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d2:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04a      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	ea03 0501 	and.w	r5, r3, r1
 80018f4:	ea04 0602 	and.w	r6, r4, r2
 80018f8:	4629      	mov	r1, r5
 80018fa:	4632      	mov	r2, r6
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	0154      	lsls	r4, r2, #5
 8001906:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190a:	014b      	lsls	r3, r1, #5
 800190c:	4619      	mov	r1, r3
 800190e:	4622      	mov	r2, r4
 8001910:	1b49      	subs	r1, r1, r5
 8001912:	eb62 0206 	sbc.w	r2, r2, r6
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f04f 0400 	mov.w	r4, #0
 800191e:	0194      	lsls	r4, r2, #6
 8001920:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001924:	018b      	lsls	r3, r1, #6
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	eb64 0402 	sbc.w	r4, r4, r2
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	00e2      	lsls	r2, r4, #3
 8001936:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800193a:	00d9      	lsls	r1, r3, #3
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	195b      	adds	r3, r3, r5
 8001942:	eb44 0406 	adc.w	r4, r4, r6
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	0262      	lsls	r2, r4, #9
 8001950:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001954:	0259      	lsls	r1, r3, #9
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	461a      	mov	r2, r3
 8001966:	4623      	mov	r3, r4
 8001968:	f7fe fc36 	bl	80001d8 <__aeabi_uldivmod>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e049      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	f04f 0400 	mov.w	r4, #0
 800197e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	ea03 0501 	and.w	r5, r3, r1
 800198a:	ea04 0602 	and.w	r6, r4, r2
 800198e:	4629      	mov	r1, r5
 8001990:	4632      	mov	r2, r6
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f04f 0400 	mov.w	r4, #0
 800199a:	0154      	lsls	r4, r2, #5
 800199c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a0:	014b      	lsls	r3, r1, #5
 80019a2:	4619      	mov	r1, r3
 80019a4:	4622      	mov	r2, r4
 80019a6:	1b49      	subs	r1, r1, r5
 80019a8:	eb62 0206 	sbc.w	r2, r2, r6
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f04f 0400 	mov.w	r4, #0
 80019b4:	0194      	lsls	r4, r2, #6
 80019b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ba:	018b      	lsls	r3, r1, #6
 80019bc:	1a5b      	subs	r3, r3, r1
 80019be:	eb64 0402 	sbc.w	r4, r4, r2
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	00e2      	lsls	r2, r4, #3
 80019cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d0:	00d9      	lsls	r1, r3, #3
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	195b      	adds	r3, r3, r5
 80019d8:	eb44 0406 	adc.w	r4, r4, r6
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	02a2      	lsls	r2, r4, #10
 80019e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019ea:	0299      	lsls	r1, r3, #10
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f04f 0400 	mov.w	r4, #0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	f7fe fbeb 	bl	80001d8 <__aeabi_uldivmod>
 8001a02:	4603      	mov	r3, r0
 8001a04:	460c      	mov	r4, r1
 8001a06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	60bb      	str	r3, [r7, #8]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a26:	60bb      	str	r3, [r7, #8]
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	007a1200 	.word	0x007a1200

08001a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff fff0 	bl	8001a40 <HAL_RCC_GetHCLKFreq>
 8001a60:	4601      	mov	r1, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0b5b      	lsrs	r3, r3, #13
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08002360 	.word	0x08002360

08001a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCC_GetClockConfig+0x60>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 020f 	and.w	r2, r3, #15
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	601a      	str	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e01d      	b.n	8001b32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe ff6a 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f000 fa40 	bl	8001fa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b06      	cmp	r3, #6
 8001b62:	d007      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6a1a      	ldr	r2, [r3, #32]
 8001ba0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_TIM_Base_Stop_IT+0x48>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a1a      	ldr	r2, [r3, #32]
 8001bb0:	f240 4344 	movw	r3, #1092	; 0x444
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <HAL_TIM_Base_Stop_IT+0x48>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f9a5 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f997 	bl	8001f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f9a8 	bl	8001f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0204 	mvn.w	r2, #4
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f97b 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f96d 	bl	8001f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f97e 	bl	8001f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0208 	mvn.w	r2, #8
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f951 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f943 	bl	8001f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f954 	bl	8001f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0210 	mvn.w	r2, #16
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2208      	movs	r2, #8
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f927 	bl	8001f6a <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f919 	bl	8001f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f92a 	bl	8001f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0201 	mvn.w	r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fe02 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 faa2 	bl	80022cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b40      	cmp	r3, #64	; 0x40
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8ef 	bl	8001f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0220 	mvn.w	r2, #32
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa6c 	bl	80022b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_TIM_ConfigClockSource+0x18>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0a6      	b.n	8001f4e <HAL_TIM_ConfigClockSource+0x166>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d067      	beq.n	8001f08 <HAL_TIM_ConfigClockSource+0x120>
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d80b      	bhi.n	8001e54 <HAL_TIM_ConfigClockSource+0x6c>
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d073      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x140>
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d802      	bhi.n	8001e4a <HAL_TIM_ConfigClockSource+0x62>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d06f      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001e48:	e078      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d06c      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x140>
 8001e4e:	2b30      	cmp	r3, #48	; 0x30
 8001e50:	d06a      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001e52:	e073      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e54:	2b70      	cmp	r3, #112	; 0x70
 8001e56:	d00d      	beq.n	8001e74 <HAL_TIM_ConfigClockSource+0x8c>
 8001e58:	2b70      	cmp	r3, #112	; 0x70
 8001e5a:	d804      	bhi.n	8001e66 <HAL_TIM_ConfigClockSource+0x7e>
 8001e5c:	2b50      	cmp	r3, #80	; 0x50
 8001e5e:	d033      	beq.n	8001ec8 <HAL_TIM_ConfigClockSource+0xe0>
 8001e60:	2b60      	cmp	r3, #96	; 0x60
 8001e62:	d041      	beq.n	8001ee8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001e64:	e06a      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6a:	d066      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0x152>
 8001e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e70:	d017      	beq.n	8001ea2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001e72:	e063      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f000 f98a 	bl	800219c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	609a      	str	r2, [r3, #8]
      break;
 8001ea0:	e04c      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6899      	ldr	r1, [r3, #8]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f000 f973 	bl	800219c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec4:	609a      	str	r2, [r3, #8]
      break;
 8001ec6:	e039      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f000 f8e7 	bl	80020a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2150      	movs	r1, #80	; 0x50
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f940 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001ee6:	e029      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f000 f906 	bl	8002106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2160      	movs	r1, #96	; 0x60
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f930 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f06:	e019      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	461a      	mov	r2, r3
 8001f16:	f000 f8c7 	bl	80020a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2140      	movs	r1, #64	; 0x40
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f920 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f26:	e009      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 f917 	bl	8002166 <TIM_ITRx_SetConfig>
      break;
 8001f38:	e000      	b.n	8001f3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a34      	ldr	r2, [pc, #208]	; (800208c <TIM_Base_SetConfig+0xe4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00f      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d00b      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <TIM_Base_SetConfig+0xe8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a30      	ldr	r2, [pc, #192]	; (8002094 <TIM_Base_SetConfig+0xec>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <TIM_Base_SetConfig+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d108      	bne.n	8001ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <TIM_Base_SetConfig+0xe4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01b      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d017      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <TIM_Base_SetConfig+0xe8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <TIM_Base_SetConfig+0xec>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00f      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <TIM_Base_SetConfig+0xf0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00b      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <TIM_Base_SetConfig+0xf4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <TIM_Base_SetConfig+0xf8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <TIM_Base_SetConfig+0xfc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <TIM_Base_SetConfig+0xe4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d103      	bne.n	8002078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000
 8002090:	40000400 	.word	0x40000400
 8002094:	40000800 	.word	0x40000800
 8002098:	40000c00 	.word	0x40000c00
 800209c:	40014000 	.word	0x40014000
 80020a0:	40014400 	.word	0x40014400
 80020a4:	40014800 	.word	0x40014800

080020a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0201 	bic.w	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f023 030a 	bic.w	r3, r3, #10
 80020e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	621a      	str	r2, [r3, #32]
}
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002106:	b480      	push	{r7}
 8002108:	b087      	sub	sp, #28
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0210 	bic.w	r2, r3, #16
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	031b      	lsls	r3, r3, #12
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002142:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	f043 0307 	orr.w	r3, r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	021a      	lsls	r2, r3, #8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	431a      	orrs	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e050      	b.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002240:	d013      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10c      	bne.n	8002284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4313      	orrs	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40014000 	.word	0x40014000

080022b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <__libc_init_array>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4e0d      	ldr	r6, [pc, #52]	; (8002318 <__libc_init_array+0x38>)
 80022e4:	4c0d      	ldr	r4, [pc, #52]	; (800231c <__libc_init_array+0x3c>)
 80022e6:	1ba4      	subs	r4, r4, r6
 80022e8:	10a4      	asrs	r4, r4, #2
 80022ea:	2500      	movs	r5, #0
 80022ec:	42a5      	cmp	r5, r4
 80022ee:	d109      	bne.n	8002304 <__libc_init_array+0x24>
 80022f0:	4e0b      	ldr	r6, [pc, #44]	; (8002320 <__libc_init_array+0x40>)
 80022f2:	4c0c      	ldr	r4, [pc, #48]	; (8002324 <__libc_init_array+0x44>)
 80022f4:	f000 f820 	bl	8002338 <_init>
 80022f8:	1ba4      	subs	r4, r4, r6
 80022fa:	10a4      	asrs	r4, r4, #2
 80022fc:	2500      	movs	r5, #0
 80022fe:	42a5      	cmp	r5, r4
 8002300:	d105      	bne.n	800230e <__libc_init_array+0x2e>
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002308:	4798      	blx	r3
 800230a:	3501      	adds	r5, #1
 800230c:	e7ee      	b.n	80022ec <__libc_init_array+0xc>
 800230e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002312:	4798      	blx	r3
 8002314:	3501      	adds	r5, #1
 8002316:	e7f2      	b.n	80022fe <__libc_init_array+0x1e>
 8002318:	08002370 	.word	0x08002370
 800231c:	08002370 	.word	0x08002370
 8002320:	08002370 	.word	0x08002370
 8002324:	08002374 	.word	0x08002374

08002328 <memset>:
 8002328:	4402      	add	r2, r0
 800232a:	4603      	mov	r3, r0
 800232c:	4293      	cmp	r3, r2
 800232e:	d100      	bne.n	8002332 <memset+0xa>
 8002330:	4770      	bx	lr
 8002332:	f803 1b01 	strb.w	r1, [r3], #1
 8002336:	e7f9      	b.n	800232c <memset+0x4>

08002338 <_init>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr

08002344 <_fini>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	bf00      	nop
 8002348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234a:	bc08      	pop	{r3}
 800234c:	469e      	mov	lr, r3
 800234e:	4770      	bx	lr
