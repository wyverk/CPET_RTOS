
exercise18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a4  080042a4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080042ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004010  20000018  080042c4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004028  080042c4  00024028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bbc  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002773  00000000  00000000  00030c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00033378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00034298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e86  00000000  00000000  00035080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7a0  00000000  00000000  0004bf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009203c  00000000  00000000  000576a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e96e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd4  00000000  00000000  000e9760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041f0 	.word	0x080041f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	080041f0 	.word	0x080041f0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <InitSem>:

SharedPool DataPool = {10, 1};

SemaphoreHandle_t PoolSemaphore;

void InitSem(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	PoolSemaphore = xSemaphoreCreateBinary();
 80004e4:	2203      	movs	r2, #3
 80004e6:	2100      	movs	r1, #0
 80004e8:	2001      	movs	r0, #1
 80004ea:	f001 ff15 	bl	8002318 <xQueueGenericCreate>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <InitSem+0x28>)
 80004f2:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(PoolSemaphore);
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <InitSem+0x28>)
 80004f6:	6818      	ldr	r0, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	f001 ff67 	bl	80023d0 <xQueueGenericSend>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20003fd4 	.word	0x20003fd4

0800050c <SetGreenRate>:

void SetGreenRate(int rate){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(PoolSemaphore, portMAX_DELAY);
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <SetGreenRate+0x34>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f04f 31ff 	mov.w	r1, #4294967295
 800051c:	4618      	mov	r0, r3
 800051e:	f002 f851 	bl	80025c4 <xQueueSemaphoreTake>
	DataPool.GreenRate = rate;
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <SetGreenRate+0x38>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(PoolSemaphore);
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <SetGreenRate+0x34>)
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	f001 ff4d 	bl	80023d0 <xQueueGenericSend>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20003fd4 	.word	0x20003fd4
 8000544:	20000000 	.word	0x20000000

08000548 <GetGreenRate>:

int GetGreenRate(){
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	return DataPool.GreenRate;
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <GetGreenRate+0x14>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <SetRedRate>:

void SetRedRate(int rate){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(PoolSemaphore, portMAX_DELAY);
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <SetRedRate+0x34>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f04f 31ff 	mov.w	r1, #4294967295
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f827 	bl	80025c4 <xQueueSemaphoreTake>
	DataPool.RedRate = rate;
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <SetRedRate+0x38>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6053      	str	r3, [r2, #4]
	xSemaphoreGive(PoolSemaphore);
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <SetRedRate+0x34>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	f001 ff23 	bl	80023d0 <xQueueGenericSend>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20003fd4 	.word	0x20003fd4
 8000598:	20000000 	.word	0x20000000

0800059c <GetRedRate>:

int GetRedRate(){
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	return DataPool.RedRate;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <GetRedRate+0x14>)
 80005a2:	685b      	ldr	r3, [r3, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000034 	.word	0x20000034
 80005e4:	20000088 	.word	0x20000088

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fb7f 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f84b 	bl	800068c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  InitSem();
 80005f6:	f7ff ff73 	bl	80004e0 <InitSem>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8b1 	bl	8000760 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GreenLED */
  osThreadDef(GreenLED, StartGreenLED, osPriorityNormal, 0, 128);
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <main+0x8c>)
 8000600:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLEDHandle = osThreadCreate(osThread(GreenLED), NULL);
 8000612:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fd00 	bl	800201e <osThreadCreate>
 800061e:	4602      	mov	r2, r0
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <main+0x90>)
 8000622:	601a      	str	r2, [r3, #0]

  /* definition and creation of RedLED */
  osThreadDef(RedLED, StartRedLED, osPriorityNormal, 0, 128);
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <main+0x94>)
 8000626:	f107 0420 	add.w	r4, r7, #32
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLEDHandle = osThreadCreate(osThread(RedLED), NULL);
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fced 	bl	800201e <osThreadCreate>
 8000644:	4602      	mov	r2, r0
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <main+0x98>)
 8000648:	601a      	str	r2, [r3, #0]

  /* definition and creation of FlashRate */
  osThreadDef(FlashRate, StartFlashRate, osPriorityNormal, 0, 128);
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <main+0x9c>)
 800064c:	1d3c      	adds	r4, r7, #4
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FlashRateHandle = osThreadCreate(osThread(FlashRate), NULL);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fcdc 	bl	800201e <osThreadCreate>
 8000666:	4602      	mov	r2, r0
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <main+0xa0>)
 800066a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800066c:	f001 fcd0 	bl	8002010 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x88>
 8000672:	bf00      	nop
 8000674:	08004214 	.word	0x08004214
 8000678:	20003fd8 	.word	0x20003fd8
 800067c:	08004238 	.word	0x08004238
 8000680:	20003fdc 	.word	0x20003fdc
 8000684:	08004260 	.word	0x08004260
 8000688:	20003fe0 	.word	0x20003fe0

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fd9f 	bl	80041de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000700:	23c0      	movs	r3, #192	; 0xc0
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000704:	2304      	movs	r3, #4
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fdc7 	bl	80012a4 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f9f6 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f820 	bl	8001784 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f9df 	bl	8000b0c <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4ba1      	ldr	r3, [pc, #644]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4aa0      	ldr	r2, [pc, #640]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b9e      	ldr	r3, [pc, #632]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b9a      	ldr	r3, [pc, #616]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a99      	ldr	r2, [pc, #612]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b97      	ldr	r3, [pc, #604]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b90      	ldr	r3, [pc, #576]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a8b      	ldr	r2, [pc, #556]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b85      	ldr	r3, [pc, #532]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a84      	ldr	r2, [pc, #528]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b82      	ldr	r3, [pc, #520]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a7d      	ldr	r2, [pc, #500]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2108      	movs	r1, #8
 8000822:	4878      	ldr	r0, [pc, #480]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000824:	f000 fd0a 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	4876      	ldr	r0, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 800082e:	f000 fd05 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000832:	2200      	movs	r2, #0
 8000834:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000838:	4874      	ldr	r0, [pc, #464]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fcff 	bl	800123c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083e:	2304      	movs	r3, #4
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	486c      	ldr	r0, [pc, #432]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000852:	f000 fb71 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4865      	ldr	r0, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 800086e:	f000 fb63 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000872:	2332      	movs	r3, #50	; 0x32
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000876:	4b66      	ldr	r3, [pc, #408]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	485f      	ldr	r0, [pc, #380]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000886:	f000 fb57 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4859      	ldr	r0, [pc, #356]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 80008a2:	f000 fb49 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4851      	ldr	r0, [pc, #324]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 80008c2:	f000 fb39 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	484e      	ldr	r0, [pc, #312]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80008da:	f000 fb2d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008de:	2310      	movs	r3, #16
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ee:	2306      	movs	r3, #6
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4846      	ldr	r0, [pc, #280]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80008fa:	f000 fb1d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008fe:	23e0      	movs	r3, #224	; 0xe0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	483e      	ldr	r0, [pc, #248]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 800091a:	f000 fb0d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800091e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000930:	2305      	movs	r3, #5
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4837      	ldr	r0, [pc, #220]	; (8000a18 <MX_GPIO_Init+0x2b8>)
 800093c:	f000 fafc 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000940:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000944:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482c      	ldr	r0, [pc, #176]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 800095a:	f000 faed 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800095e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000970:	2306      	movs	r3, #6
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4823      	ldr	r0, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 800097c:	f000 fadc 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 8000996:	f000 facf 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800099a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ac:	230a      	movs	r3, #10
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80009b8:	f000 fabe 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009bc:	2320      	movs	r3, #32
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 80009d0:	f000 fab2 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009da:	2312      	movs	r3, #18
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e6:	2304      	movs	r3, #4
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_GPIO_Init+0x2b8>)
 80009f2:	f000 faa1 	bl	8000f38 <HAL_GPIO_Init>

}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	10120000 	.word	0x10120000
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <StartGreenLED>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartGreenLED */
void StartGreenLED(void const * argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int flash_rate;
  /* Infinite loop */
  for(;;)
  {
    flash_rate = GetGreenRate();
 8000a24:	f7ff fd90 	bl	8000548 <GetGreenRate>
 8000a28:	60b8      	str	r0, [r7, #8]
    for(int i = 0; i < 2*10*flash_rate; i++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e00f      	b.n	8000a50 <StartGreenLED+0x34>
    	HAL_GPIO_TogglePin(GPIOD, GREEN);
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <StartGreenLED+0x48>)
 8000a36:	f000 fc1a 	bl	800126e <HAL_GPIO_TogglePin>
    	osDelay(500/flash_rate);
 8000a3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fb36 	bl	80020b6 <osDelay>
    for(int i = 0; i < 2*10*flash_rate; i++){
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	dbe6      	blt.n	8000a30 <StartGreenLED+0x14>
    flash_rate = GetGreenRate();
 8000a62:	e7df      	b.n	8000a24 <StartGreenLED+0x8>
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <StartRedLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLED */
void StartRedLED(void const * argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  int red_flash_rate;
  /* Infinite loop */
  for(;;)
  {
	red_flash_rate = GetRedRate();
 8000a70:	f7ff fd94 	bl	800059c <GetRedRate>
 8000a74:	60b8      	str	r0, [r7, #8]
	for(int i = 0; i < 2*6*red_flash_rate; i++){
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e00f      	b.n	8000a9c <StartRedLED+0x34>
		HAL_GPIO_TogglePin(GPIOD, RED);
 8000a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a80:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <StartRedLED+0x48>)
 8000a82:	f000 fbf4 	bl	800126e <HAL_GPIO_TogglePin>
		osDelay(500/red_flash_rate);
 8000a86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fb10 	bl	80020b6 <osDelay>
	for(int i = 0; i < 2*6*red_flash_rate; i++){
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	dbe6      	blt.n	8000a7c <StartRedLED+0x14>
	red_flash_rate = GetRedRate();
 8000aae:	e7df      	b.n	8000a70 <StartRedLED+0x8>
 8000ab0:	40020c00 	.word	0x40020c00

08000ab4 <StartFlashRate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlashRate */
void StartFlashRate(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlashRate */
  /* Infinite loop */
  for(;;)
  {
    osDelay(8000);
 8000abc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ac0:	f001 faf9 	bl	80020b6 <osDelay>
    SetGreenRate(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fd21 	bl	800050c <SetGreenRate>
    SetRedRate(10);
 8000aca:	200a      	movs	r0, #10
 8000acc:	f7ff fd48 	bl	8000560 <SetRedRate>
    osDelay(8000);
 8000ad0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ad4:	f001 faef 	bl	80020b6 <osDelay>
    SetGreenRate(10);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f7ff fd17 	bl	800050c <SetGreenRate>
    SetRedRate(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fd3e 	bl	8000560 <SetRedRate>
    osDelay(8000);
 8000ae4:	e7ea      	b.n	8000abc <StartFlashRate+0x8>
	...

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afa:	f000 f91b 	bl	8000d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010000 	.word	0x40010000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_MspInit+0x54>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <HAL_MspInit+0x54>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x54>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_MspInit+0x54>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_MspInit+0x54>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_MspInit+0x54>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	f06f 0001 	mvn.w	r0, #1
 8000b62:	f000 f9bf 	bl	8000ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	2019      	movs	r0, #25
 8000b8a:	f000 f9ab 	bl	8000ee4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f000 f9c4 	bl	8000f1c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <HAL_InitTick+0xa4>)
 8000b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <HAL_InitTick+0xa4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_InitTick+0xa4>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 ffc0 	bl	8001b40 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bc0:	f000 ffaa 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <HAL_InitTick+0xa8>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0c9b      	lsrs	r3, r3, #18
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_InitTick+0xac>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_InitTick+0xb0>)
 8000bdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_InitTick+0xac>)
 8000be0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_InitTick+0xac>)
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_InitTick+0xac>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_InitTick+0xac>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <HAL_InitTick+0xac>)
 8000bfa:	f000 ffd3 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d104      	bne.n	8000c0e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <HAL_InitTick+0xac>)
 8000c06:	f001 f802 	bl	8001c0e <HAL_TIM_Base_Start_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3730      	adds	r7, #48	; 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	431bde83 	.word	0x431bde83
 8000c20:	20003fe4 	.word	0x20003fe4
 8000c24:	40010000 	.word	0x40010000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c62:	f000 fff8 	bl	8001c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20003fe4 	.word	0x20003fe4

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <SystemInit+0x28>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <SystemInit+0x28>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SystemInit+0x28>)
 8000c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ca2:	e003      	b.n	8000cac <LoopCopyDataInit>

08000ca4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ca6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000caa:	3104      	adds	r1, #4

08000cac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb4:	d3f6      	bcc.n	8000ca4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb8:	e002      	b.n	8000cc0 <LoopFillZerobss>

08000cba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cbc:	f842 3b04 	str.w	r3, [r2], #4

08000cc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc4:	d3f9      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc6:	f7ff ffd3 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f003 fa59 	bl	8004180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cce:	f7ff fc8b 	bl	80005e8 <main>
  bx  lr    
 8000cd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cd8:	080042ac 	.word	0x080042ac
  ldr  r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000ce4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000ce8:	20004028 	.word	0x20004028

08000cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <HAL_Init+0x40>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_Init+0x40>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_Init+0x40>)
 8000d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f8d8 	bl	8000ece <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff28 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fefa 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023c00 	.word	0x40023c00

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000010 	.word	0x20000010
 8000d58:	20004024 	.word	0x20004024

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20004024 	.word	0x20004024

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff4c 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef6:	f7ff ff61 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000efa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff ffb1 	bl	8000e68 <NVIC_EncodePriority>
 8000f06:	4602      	mov	r2, r0
 8000f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff80 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff54 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e159      	b.n	8001208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 8148 	bne.w	8001202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d00b      	beq.n	8000f92 <HAL_GPIO_Init+0x5a>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f86:	2b11      	cmp	r3, #17
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0xfc>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d123      	bne.n	800107c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0203 	and.w	r2, r3, #3
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80a2 	beq.w	8001202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b56      	ldr	r3, [pc, #344]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x202>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a47      	ldr	r2, [pc, #284]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x1fe>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a46      	ldr	r2, [pc, #280]	; (800122c <HAL_GPIO_Init+0x2f4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x1fa>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a45      	ldr	r2, [pc, #276]	; (8001230 <HAL_GPIO_Init+0x2f8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x1f6>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a44      	ldr	r2, [pc, #272]	; (8001234 <HAL_GPIO_Init+0x2fc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x1f2>
 8001126:	2304      	movs	r3, #4
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112a:	2307      	movs	r3, #7
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x204>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x204>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x204>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4934      	ldr	r1, [pc, #208]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <HAL_GPIO_Init+0x300>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_GPIO_Init+0x300>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a8:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_GPIO_Init+0x300>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f aea2 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	3724      	adds	r7, #36	; 0x24
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	401a      	ands	r2, r3
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	429a      	cmp	r2, r3
 8001286:	d104      	bne.n	8001292 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001290:	e002      	b.n	8001298 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e25b      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4ba3      	ldr	r3, [pc, #652]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b9d      	ldr	r3, [pc, #628]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e236      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b91      	ldr	r3, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a90      	ldr	r2, [pc, #576]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a83      	ldr	r2, [pc, #524]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a80      	ldr	r2, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcfe 	bl	8000d5c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcfa 	bl	8000d5c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1fb      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcea 	bl	8000d5c <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fce6 	bl	8000d5c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1e7      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b5f      	ldr	r3, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b5c      	ldr	r3, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1bb      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4952      	ldr	r1, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc9f 	bl	8000d5c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc9b 	bl	8000d5c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e19c      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b43      	ldr	r3, [pc, #268]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4940      	ldr	r1, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc7e 	bl	8000d5c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc7a 	bl	8000d5c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e17b      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d030      	beq.n	80014f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x2b4>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc5e 	bl	8000d5c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc5a 	bl	8000d5c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e15b      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_RCC_OscConfig+0x2b4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc47 	bl	8000d5c <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc43 	bl	8000d5c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e144      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a0 	beq.w	800163e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d121      	bne.n	800157e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_RCC_OscConfig+0x2b8>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fc09 	bl	8000d5c <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e011      	b.n	8001572 <HAL_RCC_OscConfig+0x2ce>
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000
 8001558:	42470e80 	.word	0x42470e80
 800155c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001560:	f7ff fbfc 	bl	8000d5c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0fd      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x4d4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f0>
 8001586:	4b7d      	ldr	r3, [pc, #500]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	4a7c      	ldr	r2, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	; 0x70
 8001592:	e01c      	b.n	80015ce <HAL_RCC_OscConfig+0x32a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x312>
 800159c:	4b77      	ldr	r3, [pc, #476]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a76      	ldr	r2, [pc, #472]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	4b74      	ldr	r3, [pc, #464]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a73      	ldr	r2, [pc, #460]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x32a>
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a70      	ldr	r2, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b6e      	ldr	r3, [pc, #440]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a6d      	ldr	r2, [pc, #436]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d015      	beq.n	8001602 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fbc1 	bl	8000d5c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fbbd 	bl	8000d5c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0bc      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	4b61      	ldr	r3, [pc, #388]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ee      	beq.n	80015de <HAL_RCC_OscConfig+0x33a>
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff fbab 	bl	8000d5c <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff fba7 	bl	8000d5c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0a6      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ee      	bne.n	800160a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4b52      	ldr	r3, [pc, #328]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a51      	ldr	r2, [pc, #324]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 8001638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8092 	beq.w	800176c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001648:	4b4c      	ldr	r3, [pc, #304]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d05c      	beq.n	800170e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d141      	bne.n	80016e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <HAL_RCC_OscConfig+0x4dc>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb7b 	bl	8000d5c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb77 	bl	8000d5c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e078      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	019b      	lsls	r3, r3, #6
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	061b      	lsls	r3, r3, #24
 80016ac:	4933      	ldr	r1, [pc, #204]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b2:	4b33      	ldr	r3, [pc, #204]	; (8001780 <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb50 	bl	8000d5c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb4c 	bl	8000d5c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e04d      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x41c>
 80016de:	e045      	b.n	800176c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x4dc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb39 	bl	8000d5c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb35 	bl	8000d5c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e036      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x44a>
 800170c:	e02e      	b.n	800176c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e029      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_RCC_OscConfig+0x4d8>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	429a      	cmp	r2, r3
 800172c:	d11c      	bne.n	8001768 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d115      	bne.n	8001768 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001748:	4293      	cmp	r3, r2
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000
 800177c:	40023800 	.word	0x40023800
 8001780:	42470060 	.word	0x42470060

08001784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0cc      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d90c      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b63      	ldr	r3, [pc, #396]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0b8      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a58      	ldr	r2, [pc, #352]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a52      	ldr	r2, [pc, #328]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	494d      	ldr	r1, [pc, #308]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d044      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d003      	beq.n	8001842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	2b03      	cmp	r3, #3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e067      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4934      	ldr	r1, [pc, #208]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff fa72 	bl	8000d5c <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff fa6e 	bl	8000d5c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e04f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d20c      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e032      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4916      	ldr	r1, [pc, #88]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	490e      	ldr	r1, [pc, #56]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190a:	f000 f821 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 800190e:	4601      	mov	r1, r0
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	fa21 f303 	lsr.w	r3, r1, r3
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f922 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	08004284 	.word	0x08004284
 8001948:	20000008 	.word	0x20000008
 800194c:	2000000c 	.word	0x2000000c

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b04      	cmp	r3, #4
 8001970:	d007      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x32>
 8001972:	2b08      	cmp	r3, #8
 8001974:	d008      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x38>
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 80b4 	bne.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800197e:	60bb      	str	r3, [r7, #8]
       break;
 8001980:	e0b3      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001984:	60bb      	str	r3, [r7, #8]
      break;
 8001986:	e0b0      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001988:	4b5a      	ldr	r3, [pc, #360]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001990:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d04a      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199e:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	f04f 0400 	mov.w	r4, #0
 80019a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	ea03 0501 	and.w	r5, r3, r1
 80019b4:	ea04 0602 	and.w	r6, r4, r2
 80019b8:	4629      	mov	r1, r5
 80019ba:	4632      	mov	r2, r6
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	0154      	lsls	r4, r2, #5
 80019c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ca:	014b      	lsls	r3, r1, #5
 80019cc:	4619      	mov	r1, r3
 80019ce:	4622      	mov	r2, r4
 80019d0:	1b49      	subs	r1, r1, r5
 80019d2:	eb62 0206 	sbc.w	r2, r2, r6
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	f04f 0400 	mov.w	r4, #0
 80019de:	0194      	lsls	r4, r2, #6
 80019e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019e4:	018b      	lsls	r3, r1, #6
 80019e6:	1a5b      	subs	r3, r3, r1
 80019e8:	eb64 0402 	sbc.w	r4, r4, r2
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	00e2      	lsls	r2, r4, #3
 80019f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019fa:	00d9      	lsls	r1, r3, #3
 80019fc:	460b      	mov	r3, r1
 80019fe:	4614      	mov	r4, r2
 8001a00:	195b      	adds	r3, r3, r5
 8001a02:	eb44 0406 	adc.w	r4, r4, r6
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	0262      	lsls	r2, r4, #9
 8001a10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a14:	0259      	lsls	r1, r3, #9
 8001a16:	460b      	mov	r3, r1
 8001a18:	4614      	mov	r4, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f04f 0400 	mov.w	r4, #0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	f7fe fbda 	bl	80001e0 <__aeabi_uldivmod>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e049      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	f04f 0400 	mov.w	r4, #0
 8001a3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	ea03 0501 	and.w	r5, r3, r1
 8001a4a:	ea04 0602 	and.w	r6, r4, r2
 8001a4e:	4629      	mov	r1, r5
 8001a50:	4632      	mov	r2, r6
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	f04f 0400 	mov.w	r4, #0
 8001a5a:	0154      	lsls	r4, r2, #5
 8001a5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a60:	014b      	lsls	r3, r1, #5
 8001a62:	4619      	mov	r1, r3
 8001a64:	4622      	mov	r2, r4
 8001a66:	1b49      	subs	r1, r1, r5
 8001a68:	eb62 0206 	sbc.w	r2, r2, r6
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	f04f 0400 	mov.w	r4, #0
 8001a74:	0194      	lsls	r4, r2, #6
 8001a76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a7a:	018b      	lsls	r3, r1, #6
 8001a7c:	1a5b      	subs	r3, r3, r1
 8001a7e:	eb64 0402 	sbc.w	r4, r4, r2
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	00e2      	lsls	r2, r4, #3
 8001a8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a90:	00d9      	lsls	r1, r3, #3
 8001a92:	460b      	mov	r3, r1
 8001a94:	4614      	mov	r4, r2
 8001a96:	195b      	adds	r3, r3, r5
 8001a98:	eb44 0406 	adc.w	r4, r4, r6
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	02a2      	lsls	r2, r4, #10
 8001aa6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aaa:	0299      	lsls	r1, r3, #10
 8001aac:	460b      	mov	r3, r1
 8001aae:	4614      	mov	r4, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f04f 0400 	mov.w	r4, #0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4623      	mov	r3, r4
 8001abe:	f7fe fb8f 	bl	80001e0 <__aeabi_uldivmod>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460c      	mov	r4, r1
 8001ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	60bb      	str	r3, [r7, #8]
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ae6:	60bb      	str	r3, [r7, #8]
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	68bb      	ldr	r3, [r7, #8]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4601      	mov	r1, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0b5b      	lsrs	r3, r3, #13
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08004294 	.word	0x08004294

08001b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCC_GetClockConfig+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 020f 	and.w	r2, r3, #15
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e01d      	b.n	8001bf2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f815 	bl	8001bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f000 f968 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d007      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d122      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d11b      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0202 	mvn.w	r2, #2
 8001c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8ee 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001c9e:	e005      	b.n	8001cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8e0 	bl	8001e66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8f1 	bl	8001e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d122      	bne.n	8001d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d11b      	bne.n	8001d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0204 	mvn.w	r2, #4
 8001cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8c4 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001cf2:	e005      	b.n	8001d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8b6 	bl	8001e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8c7 	bl	8001e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d122      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11b      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0208 	mvn.w	r2, #8
 8001d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f89a 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001d46:	e005      	b.n	8001d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f88c 	bl	8001e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f89d 	bl	8001e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d122      	bne.n	8001dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d11b      	bne.n	8001dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0210 	mvn.w	r2, #16
 8001d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2208      	movs	r2, #8
 8001d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f870 	bl	8001e7a <HAL_TIM_IC_CaptureCallback>
 8001d9a:	e005      	b.n	8001da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f862 	bl	8001e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f873 	bl	8001e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10e      	bne.n	8001dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f06f 0201 	mvn.w	r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fe87 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d10e      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b80      	cmp	r3, #128	; 0x80
 8001df4:	d107      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8e3 	bl	8001fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d10e      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d107      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f838 	bl	8001ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d10e      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0220 	mvn.w	r2, #32
 8001e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8ad 	bl	8001fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <TIM_Base_SetConfig+0xe4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00f      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d00b      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <TIM_Base_SetConfig+0xe8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <TIM_Base_SetConfig+0xec>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <TIM_Base_SetConfig+0x38>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a2f      	ldr	r2, [pc, #188]	; (8001fa8 <TIM_Base_SetConfig+0xf0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <TIM_Base_SetConfig+0xe4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01b      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d017      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <TIM_Base_SetConfig+0xe8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <TIM_Base_SetConfig+0xec>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00f      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a20      	ldr	r2, [pc, #128]	; (8001fa8 <TIM_Base_SetConfig+0xf0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <TIM_Base_SetConfig+0xf4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <TIM_Base_SetConfig+0xf8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d003      	beq.n	8001f42 <TIM_Base_SetConfig+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <TIM_Base_SetConfig+0xfc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <TIM_Base_SetConfig+0xe4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d103      	bne.n	8001f88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	615a      	str	r2, [r3, #20]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00
 8001fac:	40014000 	.word	0x40014000
 8001fb0:	40014400 	.word	0x40014400
 8001fb4:	40014800 	.word	0x40014800

08001fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff2:	2b84      	cmp	r3, #132	; 0x84
 8001ff4:	d005      	beq.n	8002002 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ff6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3303      	adds	r3, #3
 8002000:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002014:	f000 fe9a 	bl	8002d4c <vTaskStartScheduler>
  
  return osOK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}

0800201e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800201e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002020:	b089      	sub	sp, #36	; 0x24
 8002022:	af04      	add	r7, sp, #16
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <osThreadCreate+0x54>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01c      	beq.n	8002072 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685c      	ldr	r4, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681d      	ldr	r5, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691e      	ldr	r6, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ffc8 	bl	8001fe0 <makeFreeRtosPriority>
 8002050:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800205a:	9202      	str	r2, [sp, #8]
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	9100      	str	r1, [sp, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4632      	mov	r2, r6
 8002064:	4629      	mov	r1, r5
 8002066:	4620      	mov	r0, r4
 8002068:	f000 fcb6 	bl	80029d8 <xTaskCreateStatic>
 800206c:	4603      	mov	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	e01c      	b.n	80020ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685c      	ldr	r4, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800207e:	b29e      	uxth	r6, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ffaa 	bl	8001fe0 <makeFreeRtosPriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	9200      	str	r2, [sp, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	4632      	mov	r2, r6
 800209a:	4629      	mov	r1, r5
 800209c:	4620      	mov	r0, r4
 800209e:	f000 fcf4 	bl	8002a8a <xTaskCreate>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d001      	beq.n	80020ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <osDelay+0x16>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	e000      	b.n	80020ce <osDelay+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fe08 	bl	8002ce4 <vTaskDelay>
  
  return osOK;
 80020d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 0208 	add.w	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f04f 32ff 	mov.w	r2, #4294967295
 80020f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 0208 	add.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 0208 	add.w	r2, r3, #8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d103      	bne.n	80021a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e00c      	b.n	80021ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3308      	adds	r3, #8
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e002      	b.n	80021ae <vListInsert+0x2e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d2f6      	bcs.n	80021a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6892      	ldr	r2, [r2, #8]
 8002208:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6852      	ldr	r2, [r2, #4]
 8002212:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d103      	bne.n	8002226 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1e5a      	subs	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800225c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002260:	f383 8811 	msr	BASEPRI, r3
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	f3bf 8f4f 	dsb	sy
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	e7fe      	b.n	800226e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002270:	f001 fcd4 	bl	8003c1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	441a      	add	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	3b01      	subs	r3, #1
 80022a2:	68f9      	ldr	r1, [r7, #12]
 80022a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	441a      	add	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d114      	bne.n	80022f0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01a      	beq.n	8002304 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3310      	adds	r3, #16
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 ff7c 	bl	80031d0 <xTaskRemoveFromEventList>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d012      	beq.n	8002304 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <xQueueGenericReset+0xcc>)
 80022e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	e009      	b.n	8002304 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3310      	adds	r3, #16
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fef2 	bl	80020de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3324      	adds	r3, #36	; 0x24
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff feed 	bl	80020de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002304:	f001 fcb8 	bl	8003c78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000ed04 	.word	0xe000ed04

08002318 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <xQueueGenericCreate+0x28>
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e7fe      	b.n	800233e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e004      	b.n	8002356 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3348      	adds	r3, #72	; 0x48
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fd3a 	bl	8003dd4 <pvPortMalloc>
 8002360:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00f      	beq.n	8002388 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	3348      	adds	r3, #72	; 0x48
 800236c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002376:	79fa      	ldrb	r2, [r7, #7]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f805 	bl	8002392 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002388:	69bb      	ldr	r3, [r7, #24]
	}
 800238a:	4618      	mov	r0, r3
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e002      	b.n	80023b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023c0:	2101      	movs	r1, #1
 80023c2:	69b8      	ldr	r0, [r7, #24]
 80023c4:	f7ff ff40 	bl	8002248 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08e      	sub	sp, #56	; 0x38
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023de:	2300      	movs	r3, #0
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <xQueueGenericSend+0x30>
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fe:	e7fe      	b.n	80023fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <xQueueGenericSend+0x3e>
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <xQueueGenericSend+0x42>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <xQueueGenericSend+0x44>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <xQueueGenericSend+0x5c>
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	e7fe      	b.n	800242a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x6a>
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <xQueueGenericSend+0x6e>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueGenericSend+0x70>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <xQueueGenericSend+0x88>
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	e7fe      	b.n	8002456 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002458:	f001 f876 	bl	8003548 <xTaskGetSchedulerState>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <xQueueGenericSend+0x98>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <xQueueGenericSend+0x9c>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <xQueueGenericSend+0x9e>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <xQueueGenericSend+0xb6>
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	e7fe      	b.n	8002484 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002486:	f001 fbc9 	bl	8003c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	429a      	cmp	r2, r3
 8002494:	d302      	bcc.n	800249c <xQueueGenericSend+0xcc>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d129      	bne.n	80024f0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024a2:	f000 f9af 	bl	8002804 <prvCopyDataToQueue>
 80024a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	3324      	adds	r3, #36	; 0x24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fe8b 	bl	80031d0 <xTaskRemoveFromEventList>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <xQueueGenericSend+0x1f0>)
 80024c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	e00a      	b.n	80024e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <xQueueGenericSend+0x1f0>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024e8:	f001 fbc6 	bl	8003c78 <vPortExitCritical>
				return pdPASS;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e063      	b.n	80025b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024f6:	f001 fbbf 	bl	8003c78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e05c      	b.n	80025b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fec3 	bl	8003294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800250e:	2301      	movs	r3, #1
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002512:	f001 fbb1 	bl	8003c78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002516:	f000 fc77 	bl	8002e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800251a:	f001 fb7f 	bl	8003c1c <vPortEnterCritical>
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002524:	b25b      	sxtb	r3, r3
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d103      	bne.n	8002534 <xQueueGenericSend+0x164>
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800253a:	b25b      	sxtb	r3, r3
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d103      	bne.n	800254a <xQueueGenericSend+0x17a>
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800254a:	f001 fb95 	bl	8003c78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800254e:	1d3a      	adds	r2, r7, #4
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 feb2 	bl	80032c0 <xTaskCheckForTimeOut>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d124      	bne.n	80025ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002564:	f000 fa20 	bl	80029a8 <prvIsQueueFull>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	3310      	adds	r3, #16
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fe06 	bl	8003188 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800257c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257e:	f000 f9ab 	bl	80028d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002582:	f000 fc4f 	bl	8002e24 <xTaskResumeAll>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f af7c 	bne.w	8002486 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <xQueueGenericSend+0x1f0>)
 8002590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	e772      	b.n	8002486 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a2:	f000 f999 	bl	80028d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025a6:	f000 fc3d 	bl	8002e24 <xTaskResumeAll>
 80025aa:	e76c      	b.n	8002486 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ae:	f000 f993 	bl	80028d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025b2:	f000 fc37 	bl	8002e24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025b6:	2300      	movs	r3, #0
		}
	}
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3738      	adds	r7, #56	; 0x38
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08e      	sub	sp, #56	; 0x38
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <xQueueSemaphoreTake+0x30>
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	e7fe      	b.n	80025f2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <xQueueSemaphoreTake+0x4c>
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e7fe      	b.n	800260e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002610:	f000 ff9a 	bl	8003548 <xTaskGetSchedulerState>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <xQueueSemaphoreTake+0x5c>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <xQueueSemaphoreTake+0x60>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <xQueueSemaphoreTake+0x62>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <xQueueSemaphoreTake+0x7a>
 800262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e7fe      	b.n	800263c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800263e:	f001 faed 	bl	8003c1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	d024      	beq.n	8002698 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800265e:	f001 f939 	bl	80038d4 <pvTaskIncrementMutexHeldCount>
 8002662:	4602      	mov	r2, r0
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00f      	beq.n	8002690 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fdab 	bl	80031d0 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <xQueueSemaphoreTake+0x20c>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002690:	f001 faf2 	bl	8003c78 <vPortExitCritical>
				return pdPASS;
 8002694:	2301      	movs	r3, #1
 8002696:	e096      	b.n	80027c6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d110      	bne.n	80026c0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <xQueueSemaphoreTake+0xf4>
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e7fe      	b.n	80026b6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80026b8:	f001 fade 	bl	8003c78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80026bc:	2300      	movs	r3, #0
 80026be:	e082      	b.n	80027c6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fde2 	bl	8003294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026d4:	f001 fad0 	bl	8003c78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026d8:	f000 fb96 	bl	8002e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026dc:	f001 fa9e 	bl	8003c1c <vPortEnterCritical>
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e6:	b25b      	sxtb	r3, r3
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d103      	bne.n	80026f6 <xQueueSemaphoreTake+0x132>
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d103      	bne.n	800270c <xQueueSemaphoreTake+0x148>
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800270c:	f001 fab4 	bl	8003c78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002710:	463a      	mov	r2, r7
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fdd1 	bl	80032c0 <xTaskCheckForTimeOut>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d132      	bne.n	800278a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002726:	f000 f929 	bl	800297c <prvIsQueueEmpty>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d026      	beq.n	800277e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002738:	f001 fa70 	bl	8003c1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 ff1f 	bl	8003584 <xTaskPriorityInherit>
 8002746:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002748:	f001 fa96 	bl	8003c78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	3324      	adds	r3, #36	; 0x24
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fd17 	bl	8003188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800275a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800275c:	f000 f8bc 	bl	80028d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002760:	f000 fb60 	bl	8002e24 <xTaskResumeAll>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f af69 	bne.w	800263e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <xQueueSemaphoreTake+0x20c>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	e75f      	b.n	800263e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800277e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002780:	f000 f8aa 	bl	80028d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002784:	f000 fb4e 	bl	8002e24 <xTaskResumeAll>
 8002788:	e759      	b.n	800263e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800278a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800278c:	f000 f8a4 	bl	80028d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002790:	f000 fb48 	bl	8002e24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002796:	f000 f8f1 	bl	800297c <prvIsQueueEmpty>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f43f af4e 	beq.w	800263e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80027a8:	f001 fa38 	bl	8003c1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80027ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ae:	f000 f811 	bl	80027d4 <prvGetDisinheritPriorityAfterTimeout>
 80027b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 ffec 	bl	8003798 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80027c0:	f001 fa5a 	bl	8003c78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000ed04 	.word	0xe000ed04

080027d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e001      	b.n	80027f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80027f6:	68fb      	ldr	r3, [r7, #12]
	}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d14d      	bne.n	80028c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 ff2e 	bl	8003690 <xTaskPriorityDisinherit>
 8002834:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	e043      	b.n	80028c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d119      	bne.n	8002878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6898      	ldr	r0, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	461a      	mov	r2, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	f001 fcba 	bl	80041c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	d32b      	bcc.n	80028c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	e026      	b.n	80028c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68d8      	ldr	r0, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	461a      	mov	r2, r3
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	f001 fca0 	bl	80041c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	425b      	negs	r3, r3
 8002892:	441a      	add	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	425b      	negs	r3, r3
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d105      	bne.n	80028c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80028ce:	697b      	ldr	r3, [r7, #20]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028e0:	f001 f99c 	bl	8003c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ec:	e011      	b.n	8002912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3324      	adds	r3, #36	; 0x24
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fc68 	bl	80031d0 <xTaskRemoveFromEventList>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002906:	f000 fd3b 	bl	8003380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3b01      	subs	r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	dce9      	bgt.n	80028ee <prvUnlockQueue+0x16>
 800291a:	e000      	b.n	800291e <prvUnlockQueue+0x46>
					break;
 800291c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002926:	f001 f9a7 	bl	8003c78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800292a:	f001 f977 	bl	8003c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002936:	e011      	b.n	800295c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3310      	adds	r3, #16
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fc43 	bl	80031d0 <xTaskRemoveFromEventList>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002950:	f000 fd16 	bl	8003380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002954:	7bbb      	ldrb	r3, [r7, #14]
 8002956:	3b01      	subs	r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800295c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002960:	2b00      	cmp	r3, #0
 8002962:	dce9      	bgt.n	8002938 <prvUnlockQueue+0x60>
 8002964:	e000      	b.n	8002968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	22ff      	movs	r2, #255	; 0xff
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002970:	f001 f982 	bl	8003c78 <vPortExitCritical>
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002984:	f001 f94a 	bl	8003c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002990:	2301      	movs	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e001      	b.n	800299a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800299a:	f001 f96d 	bl	8003c78 <vPortExitCritical>

	return xReturn;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029b0:	f001 f934 	bl	8003c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d102      	bne.n	80029c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e001      	b.n	80029ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029ca:	f001 f955 	bl	8003c78 <vPortExitCritical>

	return xReturn;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af04      	add	r7, sp, #16
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <xTaskCreateStatic+0x28>
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	623b      	str	r3, [r7, #32]
 80029fe:	e7fe      	b.n	80029fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <xTaskCreateStatic+0x42>
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e7fe      	b.n	8002a18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a1a:	2354      	movs	r3, #84	; 0x54
 8002a1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b54      	cmp	r3, #84	; 0x54
 8002a22:	d009      	beq.n	8002a38 <xTaskCreateStatic+0x60>
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e7fe      	b.n	8002a36 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01e      	beq.n	8002a7c <xTaskCreateStatic+0xa4>
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a56:	2300      	movs	r3, #0
 8002a58:	9303      	str	r3, [sp, #12]
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f850 	bl	8002b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a76:	f000 f8cb 	bl	8002c10 <prvAddNewTaskToReadyList>
 8002a7a:	e001      	b.n	8002a80 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a80:	697b      	ldr	r3, [r7, #20]
	}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b08c      	sub	sp, #48	; 0x30
 8002a8e:	af04      	add	r7, sp, #16
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 f998 	bl	8003dd4 <pvPortMalloc>
 8002aa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aac:	2054      	movs	r0, #84	; 0x54
 8002aae:	f001 f991 	bl	8003dd4 <pvPortMalloc>
 8002ab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac0:	e005      	b.n	8002ace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f001 fa48 	bl	8003f58 <vPortFree>
 8002ac8:	e001      	b.n	8002ace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9303      	str	r3, [sp, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f80e 	bl	8002b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002af8:	69f8      	ldr	r0, [r7, #28]
 8002afa:	f000 f889 	bl	8002c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	e002      	b.n	8002b0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f023 0307 	bic.w	r3, r3, #7
 8002b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <prvInitialiseNewTask+0x46>
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e7fe      	b.n	8002b58 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e012      	b.n	8002b86 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	7819      	ldrb	r1, [r3, #0]
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3334      	adds	r3, #52	; 0x34
 8002b70:	460a      	mov	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3301      	adds	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	d9e9      	bls.n	8002b60 <prvInitialiseNewTask+0x4c>
 8002b8c:	e000      	b.n	8002b90 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002b8e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d901      	bls.n	8002ba2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fab0 	bl	800211e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff faab 	bl	800211e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bcc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	f1c3 0207 	rsb	r2, r3, #7
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	69b8      	ldr	r0, [r7, #24]
 8002bf2:	f000 fee9 	bl	80039c8 <pxPortInitialiseStack>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c18:	f001 f800 	bl	8003c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <prvAddNewTaskToReadyList+0xb8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3301      	adds	r3, #1
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <prvAddNewTaskToReadyList+0xb8>)
 8002c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c2e:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <prvAddNewTaskToReadyList+0xb8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d110      	bne.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c3c:	f000 fbc4 	bl	80033c8 <prvInitialiseTaskLists>
 8002c40:	e00d      	b.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <prvAddNewTaskToReadyList+0xc0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d802      	bhi.n	8002c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <prvAddNewTaskToReadyList+0xc4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <prvAddNewTaskToReadyList+0xc4>)
 8002c66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <prvAddNewTaskToReadyList+0xc8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <prvAddNewTaskToReadyList+0xc8>)
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <prvAddNewTaskToReadyList+0xcc>)
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7ff fa51 	bl	8002138 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c96:	f000 ffef 	bl	8003c78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <prvAddNewTaskToReadyList+0xc0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00e      	beq.n	8002cc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <prvAddNewTaskToReadyList+0xbc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d207      	bcs.n	8002cc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <prvAddNewTaskToReadyList+0xd0>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000388 	.word	0x20000388
 8002ccc:	20000288 	.word	0x20000288
 8002cd0:	20000394 	.word	0x20000394
 8002cd4:	200003a4 	.word	0x200003a4
 8002cd8:	20000390 	.word	0x20000390
 8002cdc:	2000028c 	.word	0x2000028c
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <vTaskDelay+0x60>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <vTaskDelay+0x2e>
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	e7fe      	b.n	8002d10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002d12:	f000 f879 	bl	8002e08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d16:	2100      	movs	r1, #0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fdef 	bl	80038fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d1e:	f000 f881 	bl	8002e24 <xTaskResumeAll>
 8002d22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <vTaskDelay+0x64>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200003b0 	.word	0x200003b0
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d5a:	463a      	mov	r2, r7
 8002d5c:	1d39      	adds	r1, r7, #4
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc26 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	9202      	str	r2, [sp, #8]
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	460a      	mov	r2, r1
 8002d7a:	491d      	ldr	r1, [pc, #116]	; (8002df0 <vTaskStartScheduler+0xa4>)
 8002d7c:	481d      	ldr	r0, [pc, #116]	; (8002df4 <vTaskStartScheduler+0xa8>)
 8002d7e:	f7ff fe2b 	bl	80029d8 <xTaskCreateStatic>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <vTaskStartScheduler+0xac>)
 8002d86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <vTaskStartScheduler+0xac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d90:	2301      	movs	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e001      	b.n	8002d9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d115      	bne.n	8002dcc <vTaskStartScheduler+0x80>
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <vTaskStartScheduler+0xb0>)
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <vTaskStartScheduler+0xb4>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <vTaskStartScheduler+0xb8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dc6:	f000 fe8b 	bl	8003ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dca:	e00d      	b.n	8002de8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d109      	bne.n	8002de8 <vTaskStartScheduler+0x9c>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e7fe      	b.n	8002de6 <vTaskStartScheduler+0x9a>
}
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	0800427c 	.word	0x0800427c
 8002df4:	08003399 	.word	0x08003399
 8002df8:	200003ac 	.word	0x200003ac
 8002dfc:	200003a8 	.word	0x200003a8
 8002e00:	20000394 	.word	0x20000394
 8002e04:	2000038c 	.word	0x2000038c

08002e08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <vTaskSuspendAll+0x18>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <vTaskSuspendAll+0x18>)
 8002e14:	6013      	str	r3, [r2, #0]
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	200003b0 	.word	0x200003b0

08002e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <xTaskResumeAll+0x114>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <xTaskResumeAll+0x2a>
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	e7fe      	b.n	8002e4c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e4e:	f000 fee5 	bl	8003c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <xTaskResumeAll+0x114>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	4a37      	ldr	r2, [pc, #220]	; (8002f38 <xTaskResumeAll+0x114>)
 8002e5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <xTaskResumeAll+0x114>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d161      	bne.n	8002f28 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <xTaskResumeAll+0x118>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05d      	beq.n	8002f28 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e6c:	e02e      	b.n	8002ecc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <xTaskResumeAll+0x11c>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3318      	adds	r3, #24
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f9b9 	bl	80021f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f9b4 	bl	80021f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	409a      	lsls	r2, r3
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <xTaskResumeAll+0x120>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <xTaskResumeAll+0x120>)
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <xTaskResumeAll+0x124>)
 8002eaa:	441a      	add	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7ff f940 	bl	8002138 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <xTaskResumeAll+0x128>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <xTaskResumeAll+0x12c>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ecc:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <xTaskResumeAll+0x11c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1cc      	bne.n	8002e6e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002eda:	f000 fb0f 	bl	80034fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <xTaskResumeAll+0x130>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d010      	beq.n	8002f0c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eea:	f000 f837 	bl	8002f5c <xTaskIncrementTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <xTaskResumeAll+0x12c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f1      	bne.n	8002eea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <xTaskResumeAll+0x130>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <xTaskResumeAll+0x12c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f14:	2301      	movs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <xTaskResumeAll+0x134>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f28:	f000 fea6 	bl	8003c78 <vPortExitCritical>

	return xAlreadyYielded;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200003b0 	.word	0x200003b0
 8002f3c:	20000388 	.word	0x20000388
 8002f40:	20000348 	.word	0x20000348
 8002f44:	20000390 	.word	0x20000390
 8002f48:	2000028c 	.word	0x2000028c
 8002f4c:	20000288 	.word	0x20000288
 8002f50:	2000039c 	.word	0x2000039c
 8002f54:	20000398 	.word	0x20000398
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f66:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <xTaskIncrementTick+0x14c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 808c 	bne.w	8003088 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f70:	4b4e      	ldr	r3, [pc, #312]	; (80030ac <xTaskIncrementTick+0x150>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f78:	4a4c      	ldr	r2, [pc, #304]	; (80030ac <xTaskIncrementTick+0x150>)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11f      	bne.n	8002fc4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f84:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <xTaskIncrementTick+0x154>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <xTaskIncrementTick+0x46>
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	e7fe      	b.n	8002fa0 <xTaskIncrementTick+0x44>
 8002fa2:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <xTaskIncrementTick+0x154>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <xTaskIncrementTick+0x158>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a40      	ldr	r2, [pc, #256]	; (80030b0 <xTaskIncrementTick+0x154>)
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <xTaskIncrementTick+0x158>)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <xTaskIncrementTick+0x15c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4a3e      	ldr	r2, [pc, #248]	; (80030b8 <xTaskIncrementTick+0x15c>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	f000 fa9c 	bl	80034fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fc4:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <xTaskIncrementTick+0x160>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d34d      	bcc.n	800306a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <xTaskIncrementTick+0x154>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <xTaskIncrementTick+0x80>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <xTaskIncrementTick+0x82>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <xTaskIncrementTick+0x160>)
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	601a      	str	r2, [r3, #0]
					break;
 8002fea:	e03e      	b.n	800306a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <xTaskIncrementTick+0x154>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d203      	bcs.n	800300c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003004:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <xTaskIncrementTick+0x160>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]
						break;
 800300a:	e02e      	b.n	800306a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3304      	adds	r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f8ee 	bl	80021f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3318      	adds	r3, #24
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f8e5 	bl	80021f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2201      	movs	r2, #1
 800302e:	409a      	lsls	r2, r3
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <xTaskIncrementTick+0x164>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <xTaskIncrementTick+0x164>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <xTaskIncrementTick+0x168>)
 8003048:	441a      	add	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	3304      	adds	r3, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7ff f871 	bl	8002138 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <xTaskIncrementTick+0x16c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	429a      	cmp	r2, r3
 8003062:	d3b4      	bcc.n	8002fce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003068:	e7b1      	b.n	8002fce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <xTaskIncrementTick+0x16c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003070:	4914      	ldr	r1, [pc, #80]	; (80030c4 <xTaskIncrementTick+0x168>)
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d907      	bls.n	8003092 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e004      	b.n	8003092 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <xTaskIncrementTick+0x170>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <xTaskIncrementTick+0x170>)
 8003090:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <xTaskIncrementTick+0x174>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200003b0 	.word	0x200003b0
 80030ac:	2000038c 	.word	0x2000038c
 80030b0:	20000340 	.word	0x20000340
 80030b4:	20000344 	.word	0x20000344
 80030b8:	200003a0 	.word	0x200003a0
 80030bc:	200003a8 	.word	0x200003a8
 80030c0:	20000390 	.word	0x20000390
 80030c4:	2000028c 	.word	0x2000028c
 80030c8:	20000288 	.word	0x20000288
 80030cc:	20000398 	.word	0x20000398
 80030d0:	2000039c 	.word	0x2000039c

080030d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <vTaskSwitchContext+0xa0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030e2:	4b25      	ldr	r3, [pc, #148]	; (8003178 <vTaskSwitchContext+0xa4>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030e8:	e03e      	b.n	8003168 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80030ea:	4b23      	ldr	r3, [pc, #140]	; (8003178 <vTaskSwitchContext+0xa4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <vTaskSwitchContext+0xa8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	f1c3 031f 	rsb	r3, r3, #31
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	491e      	ldr	r1, [pc, #120]	; (8003180 <vTaskSwitchContext+0xac>)
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <vTaskSwitchContext+0x5a>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	e7fe      	b.n	800312c <vTaskSwitchContext+0x58>
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <vTaskSwitchContext+0xac>)
 800313a:	4413      	add	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	3308      	adds	r3, #8
 8003150:	429a      	cmp	r2, r3
 8003152:	d104      	bne.n	800315e <vTaskSwitchContext+0x8a>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a07      	ldr	r2, [pc, #28]	; (8003184 <vTaskSwitchContext+0xb0>)
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	200003b0 	.word	0x200003b0
 8003178:	2000039c 	.word	0x2000039c
 800317c:	20000390 	.word	0x20000390
 8003180:	2000028c 	.word	0x2000028c
 8003184:	20000288 	.word	0x20000288

08003188 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <vTaskPlaceOnEventList+0x24>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e7fe      	b.n	80031aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <vTaskPlaceOnEventList+0x44>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3318      	adds	r3, #24
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fe ffe3 	bl	8002180 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031ba:	2101      	movs	r1, #1
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	f000 fb9d 	bl	80038fc <prvAddCurrentTaskToDelayedList>
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000288 	.word	0x20000288

080031d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <xTaskRemoveFromEventList+0x2a>
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e7fe      	b.n	80031f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	3318      	adds	r3, #24
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fff7 	bl	80021f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <xTaskRemoveFromEventList+0xac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11c      	bne.n	8003246 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3304      	adds	r3, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe ffee 	bl	80021f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	2201      	movs	r2, #1
 800321c:	409a      	lsls	r2, r3
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <xTaskRemoveFromEventList+0xb0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <xTaskRemoveFromEventList+0xb0>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4a13      	ldr	r2, [pc, #76]	; (8003284 <xTaskRemoveFromEventList+0xb4>)
 8003236:	441a      	add	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fe ff7a 	bl	8002138 <vListInsertEnd>
 8003244:	e005      	b.n	8003252 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3318      	adds	r3, #24
 800324a:	4619      	mov	r1, r3
 800324c:	480e      	ldr	r0, [pc, #56]	; (8003288 <xTaskRemoveFromEventList+0xb8>)
 800324e:	f7fe ff73 	bl	8002138 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <xTaskRemoveFromEventList+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	429a      	cmp	r2, r3
 800325e:	d905      	bls.n	800326c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003260:	2301      	movs	r3, #1
 8003262:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <xTaskRemoveFromEventList+0xc0>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e001      	b.n	8003270 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003270:	697b      	ldr	r3, [r7, #20]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200003b0 	.word	0x200003b0
 8003280:	20000390 	.word	0x20000390
 8003284:	2000028c 	.word	0x2000028c
 8003288:	20000348 	.word	0x20000348
 800328c:	20000288 	.word	0x20000288
 8003290:	2000039c 	.word	0x2000039c

08003294 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <vTaskInternalSetTimeOutState+0x24>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <vTaskInternalSetTimeOutState+0x28>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	605a      	str	r2, [r3, #4]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	200003a0 	.word	0x200003a0
 80032bc:	2000038c 	.word	0x2000038c

080032c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <xTaskCheckForTimeOut+0x24>
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	e7fe      	b.n	80032e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <xTaskCheckForTimeOut+0x3e>
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e7fe      	b.n	80032fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80032fe:	f000 fc8d 	bl	8003c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <xTaskCheckForTimeOut+0xb8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d102      	bne.n	8003322 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e023      	b.n	800336a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <xTaskCheckForTimeOut+0xbc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d007      	beq.n	800333e <xTaskCheckForTimeOut+0x7e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003338:	2301      	movs	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e015      	b.n	800336a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d20b      	bcs.n	8003360 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad2      	subs	r2, r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff9d 	bl	8003294 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e004      	b.n	800336a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003366:	2301      	movs	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800336a:	f000 fc85 	bl	8003c78 <vPortExitCritical>

	return xReturn;
 800336e:	69fb      	ldr	r3, [r7, #28]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000038c 	.word	0x2000038c
 800337c:	200003a0 	.word	0x200003a0

08003380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <vTaskMissedYield+0x14>)
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	2000039c 	.word	0x2000039c

08003398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033a0:	f000 f852 	bl	8003448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <prvIdleTask+0x28>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d9f9      	bls.n	80033a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <prvIdleTask+0x2c>)
 80033ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033bc:	e7f0      	b.n	80033a0 <prvIdleTask+0x8>
 80033be:	bf00      	nop
 80033c0:	2000028c 	.word	0x2000028c
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	e00c      	b.n	80033ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <prvInitialiseTaskLists+0x60>)
 80033e0:	4413      	add	r3, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fe7b 	bl	80020de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3301      	adds	r3, #1
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b06      	cmp	r3, #6
 80033f2:	d9ef      	bls.n	80033d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <prvInitialiseTaskLists+0x64>)
 80033f6:	f7fe fe72 	bl	80020de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033fa:	480d      	ldr	r0, [pc, #52]	; (8003430 <prvInitialiseTaskLists+0x68>)
 80033fc:	f7fe fe6f 	bl	80020de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <prvInitialiseTaskLists+0x6c>)
 8003402:	f7fe fe6c 	bl	80020de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003406:	480c      	ldr	r0, [pc, #48]	; (8003438 <prvInitialiseTaskLists+0x70>)
 8003408:	f7fe fe69 	bl	80020de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800340c:	480b      	ldr	r0, [pc, #44]	; (800343c <prvInitialiseTaskLists+0x74>)
 800340e:	f7fe fe66 	bl	80020de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <prvInitialiseTaskLists+0x78>)
 8003414:	4a05      	ldr	r2, [pc, #20]	; (800342c <prvInitialiseTaskLists+0x64>)
 8003416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <prvInitialiseTaskLists+0x7c>)
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <prvInitialiseTaskLists+0x68>)
 800341c:	601a      	str	r2, [r3, #0]
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000028c 	.word	0x2000028c
 800342c:	20000318 	.word	0x20000318
 8003430:	2000032c 	.word	0x2000032c
 8003434:	20000348 	.word	0x20000348
 8003438:	2000035c 	.word	0x2000035c
 800343c:	20000374 	.word	0x20000374
 8003440:	20000340 	.word	0x20000340
 8003444:	20000344 	.word	0x20000344

08003448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800344e:	e019      	b.n	8003484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003450:	f000 fbe4 	bl	8003c1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <prvCheckTasksWaitingTermination+0x4c>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fec6 	bl	80021f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <prvCheckTasksWaitingTermination+0x50>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3b01      	subs	r3, #1
 800346c:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <prvCheckTasksWaitingTermination+0x50>)
 800346e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <prvCheckTasksWaitingTermination+0x54>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3b01      	subs	r3, #1
 8003476:	4a09      	ldr	r2, [pc, #36]	; (800349c <prvCheckTasksWaitingTermination+0x54>)
 8003478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800347a:	f000 fbfd 	bl	8003c78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f80e 	bl	80034a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <prvCheckTasksWaitingTermination+0x54>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e1      	bne.n	8003450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	2000035c 	.word	0x2000035c
 8003498:	20000388 	.word	0x20000388
 800349c:	20000370 	.word	0x20000370

080034a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fd4e 	bl	8003f58 <vPortFree>
				vPortFree( pxTCB );
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fd4b 	bl	8003f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034c2:	e017      	b.n	80034f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d103      	bne.n	80034d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fd42 	bl	8003f58 <vPortFree>
	}
 80034d4:	e00e      	b.n	80034f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d009      	beq.n	80034f4 <prvDeleteTCB+0x54>
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e7fe      	b.n	80034f2 <prvDeleteTCB+0x52>
	}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <prvResetNextTaskUnblockTime+0x44>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <prvResetNextTaskUnblockTime+0x14>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <prvResetNextTaskUnblockTime+0x16>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <prvResetNextTaskUnblockTime+0x48>)
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800351e:	e008      	b.n	8003532 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <prvResetNextTaskUnblockTime+0x44>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <prvResetNextTaskUnblockTime+0x48>)
 8003530:	6013      	str	r3, [r2, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000340 	.word	0x20000340
 8003544:	200003a8 	.word	0x200003a8

08003548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <xTaskGetSchedulerState+0x34>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003556:	2301      	movs	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e008      	b.n	800356e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <xTaskGetSchedulerState+0x38>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003564:	2302      	movs	r3, #2
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e001      	b.n	800356e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800356e:	687b      	ldr	r3, [r7, #4]
	}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	20000394 	.word	0x20000394
 8003580:	200003b0 	.word	0x200003b0

08003584 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d06e      	beq.n	8003678 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <xTaskPriorityInherit+0x100>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d25e      	bcs.n	8003666 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db06      	blt.n	80035be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <xTaskPriorityInherit+0x100>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f1c3 0207 	rsb	r2, r3, #7
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6959      	ldr	r1, [r3, #20]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <xTaskPriorityInherit+0x104>)
 80035d0:	4413      	add	r3, r2
 80035d2:	4299      	cmp	r1, r3
 80035d4:	d101      	bne.n	80035da <xTaskPriorityInherit+0x56>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <xTaskPriorityInherit+0x58>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d03a      	beq.n	8003656 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fe04 	bl	80021f2 <uxListRemove>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d115      	bne.n	800361c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4924      	ldr	r1, [pc, #144]	; (8003688 <xTaskPriorityInherit+0x104>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <xTaskPriorityInherit+0x98>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43da      	mvns	r2, r3
 8003612:	4b1e      	ldr	r3, [pc, #120]	; (800368c <xTaskPriorityInherit+0x108>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4013      	ands	r3, r2
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <xTaskPriorityInherit+0x108>)
 800361a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <xTaskPriorityInherit+0x100>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	2201      	movs	r2, #1
 800362c:	409a      	lsls	r2, r3
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <xTaskPriorityInherit+0x108>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <xTaskPriorityInherit+0x108>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4a10      	ldr	r2, [pc, #64]	; (8003688 <xTaskPriorityInherit+0x104>)
 8003646:	441a      	add	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	3304      	adds	r3, #4
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f7fe fd72 	bl	8002138 <vListInsertEnd>
 8003654:	e004      	b.n	8003660 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <xTaskPriorityInherit+0x100>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003660:	2301      	movs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e008      	b.n	8003678 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <xTaskPriorityInherit+0x100>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	429a      	cmp	r2, r3
 8003672:	d201      	bcs.n	8003678 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003678:	68fb      	ldr	r3, [r7, #12]
	}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000288 	.word	0x20000288
 8003688:	2000028c 	.word	0x2000028c
 800368c:	20000390 	.word	0x20000390

08003690 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <xTaskPriorityDisinherit+0xfc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d009      	beq.n	80036c4 <xTaskPriorityDisinherit+0x34>
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e7fe      	b.n	80036c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <xTaskPriorityDisinherit+0x50>
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	e7fe      	b.n	80036de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d044      	beq.n	8003780 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d140      	bne.n	8003780 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3304      	adds	r3, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fd75 	bl	80021f2 <uxListRemove>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d115      	bne.n	800373a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	491f      	ldr	r1, [pc, #124]	; (8003790 <xTaskPriorityDisinherit+0x100>)
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <xTaskPriorityDisinherit+0xaa>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	2201      	movs	r2, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <xTaskPriorityDisinherit+0x104>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4013      	ands	r3, r2
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <xTaskPriorityDisinherit+0x104>)
 8003738:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f1c3 0207 	rsb	r2, r3, #7
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	2201      	movs	r2, #1
 8003754:	409a      	lsls	r2, r3
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <xTaskPriorityDisinherit+0x104>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <xTaskPriorityDisinherit+0x104>)
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4a08      	ldr	r2, [pc, #32]	; (8003790 <xTaskPriorityDisinherit+0x100>)
 800376e:	441a      	add	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	3304      	adds	r3, #4
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7fe fcde 	bl	8002138 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003780:	697b      	ldr	r3, [r7, #20]
	}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000288 	.word	0x20000288
 8003790:	2000028c 	.word	0x2000028c
 8003794:	20000390 	.word	0x20000390

08003798 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8086 	beq.w	80038be <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <vTaskPriorityDisinheritAfterTimeout+0x36>
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e7fe      	b.n	80037cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d902      	bls.n	80037de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e002      	b.n	80037e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d067      	beq.n	80038be <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d162      	bne.n	80038be <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80037f8:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d109      	bne.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	e7fe      	b.n	8003814 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	db04      	blt.n	8003834 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f1c3 0207 	rsb	r2, r3, #7
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6959      	ldr	r1, [r3, #20]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003844:	4413      	add	r3, r2
 8003846:	4299      	cmp	r1, r3
 8003848:	d101      	bne.n	800384e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d034      	beq.n	80038be <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	3304      	adds	r3, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fcca 	bl	80021f2 <uxListRemove>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d115      	bne.n	8003890 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4918      	ldr	r1, [pc, #96]	; (80038cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4013      	ands	r3, r2
 800388c:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800388e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80038b0:	441a      	add	r2, r3
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe fc3d 	bl	8002138 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000288 	.word	0x20000288
 80038cc:	2000028c 	.word	0x2000028c
 80038d0:	20000390 	.word	0x20000390

080038d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e6:	3201      	adds	r2, #1
 80038e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80038ea:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80038ec:	681b      	ldr	r3, [r3, #0]
	}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	20000288 	.word	0x20000288

080038fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fc6d 	bl	80021f2 <uxListRemove>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	2201      	movs	r2, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4013      	ands	r3, r2
 8003932:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003934:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d10a      	bne.n	8003954 <prvAddCurrentTaskToDelayedList+0x58>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	481a      	ldr	r0, [pc, #104]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800394e:	f7fe fbf3 	bl	8002138 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003952:	e026      	b.n	80039a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d209      	bcs.n	8003980 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7fe fc01 	bl	8002180 <vListInsert>
}
 800397e:	e010      	b.n	80039a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3304      	adds	r3, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f7fe fbf7 	bl	8002180 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d202      	bcs.n	80039a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800399c:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6013      	str	r3, [r2, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	2000038c 	.word	0x2000038c
 80039b0:	20000288 	.word	0x20000288
 80039b4:	20000390 	.word	0x20000390
 80039b8:	20000374 	.word	0x20000374
 80039bc:	20000344 	.word	0x20000344
 80039c0:	20000340 	.word	0x20000340
 80039c4:	200003a8 	.word	0x200003a8

080039c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3b04      	subs	r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b04      	subs	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3b04      	subs	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039f8:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <pxPortInitialiseStack+0x64>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3b14      	subs	r3, #20
 8003a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3b04      	subs	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f06f 0202 	mvn.w	r2, #2
 8003a16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3b20      	subs	r3, #32
 8003a1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	08003a31 	.word	0x08003a31

08003a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <prvTaskExitError+0x50>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d009      	beq.n	8003a58 <prvTaskExitError+0x28>
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e7fe      	b.n	8003a56 <prvTaskExitError+0x26>
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a6a:	bf00      	nop
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0fc      	beq.n	8003a6c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000014 	.word	0x20000014
	...

08003a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <pxCurrentTCBConst2>)
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	6808      	ldr	r0, [r1, #0]
 8003a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9a:	f380 8809 	msr	PSP, r0
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f380 8811 	msr	BASEPRI, r0
 8003aaa:	4770      	bx	lr
 8003aac:	f3af 8000 	nop.w

08003ab0 <pxCurrentTCBConst2>:
 8003ab0:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop

08003ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <prvPortStartFirstTask+0x24>)
 8003aba:	6800      	ldr	r0, [r0, #0]
 8003abc:	6800      	ldr	r0, [r0, #0]
 8003abe:	f380 8808 	msr	MSP, r0
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8814 	msr	CONTROL, r0
 8003aca:	b662      	cpsie	i
 8003acc:	b661      	cpsie	f
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	df00      	svc	0
 8003ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ada:	bf00      	nop
 8003adc:	e000ed08 	.word	0xe000ed08

08003ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ae6:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <xPortStartScheduler+0x118>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a44      	ldr	r2, [pc, #272]	; (8003bfc <xPortStartScheduler+0x11c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d109      	bne.n	8003b04 <xPortStartScheduler+0x24>
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e7fe      	b.n	8003b02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b04:	4b3c      	ldr	r3, [pc, #240]	; (8003bf8 <xPortStartScheduler+0x118>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <xPortStartScheduler+0x120>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d109      	bne.n	8003b22 <xPortStartScheduler+0x42>
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e7fe      	b.n	8003b20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <xPortStartScheduler+0x124>)
 8003b24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <xPortStartScheduler+0x128>)
 8003b48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b4a:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b50:	e009      	b.n	8003b66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d0ef      	beq.n	8003b52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b72:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1c3 0307 	rsb	r3, r3, #7
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d009      	beq.n	8003b92 <xPortStartScheduler+0xb2>
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	e7fe      	b.n	8003b90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003ba6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bb0:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <xPortStartScheduler+0x130>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <xPortStartScheduler+0x130>)
 8003bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <xPortStartScheduler+0x130>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	; (8003c10 <xPortStartScheduler+0x130>)
 8003bc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003bc8:	f000 f8d6 	bl	8003d78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <xPortStartScheduler+0x134>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bd2:	f000 f8f5 	bl	8003dc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003be0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003be2:	f7ff ff69 	bl	8003ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003be6:	f7ff fa75 	bl	80030d4 <vTaskSwitchContext>
	prvTaskExitError();
 8003bea:	f7ff ff21 	bl	8003a30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed00 	.word	0xe000ed00
 8003bfc:	410fc271 	.word	0x410fc271
 8003c00:	410fc270 	.word	0x410fc270
 8003c04:	e000e400 	.word	0xe000e400
 8003c08:	200003b4 	.word	0x200003b4
 8003c0c:	200003b8 	.word	0x200003b8
 8003c10:	e000ed20 	.word	0xe000ed20
 8003c14:	20000014 	.word	0x20000014
 8003c18:	e000ef34 	.word	0xe000ef34

08003c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <vPortEnterCritical+0x54>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <vPortEnterCritical+0x54>)
 8003c3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <vPortEnterCritical+0x54>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10e      	bne.n	8003c64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <vPortEnterCritical+0x58>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <vPortEnterCritical+0x48>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	e7fe      	b.n	8003c62 <vPortEnterCritical+0x46>
	}
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	20000014 	.word	0x20000014
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <vPortExitCritical+0x4c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <vPortExitCritical+0x22>
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	e7fe      	b.n	8003c98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <vPortExitCritical+0x4c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <vPortExitCritical+0x4c>)
 8003ca2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ca4:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <vPortExitCritical+0x4c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <vPortExitCritical+0x3e>
 8003cac:	2300      	movs	r3, #0
 8003cae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000014 	.word	0x20000014
	...

08003cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003cd0:	f3ef 8009 	mrs	r0, PSP
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <pxCurrentTCBConst>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	f01e 0f10 	tst.w	lr, #16
 8003ce0:	bf08      	it	eq
 8003ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cea:	6010      	str	r0, [r2, #0]
 8003cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003cf4:	f380 8811 	msr	BASEPRI, r0
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f7ff f9e8 	bl	80030d4 <vTaskSwitchContext>
 8003d04:	f04f 0000 	mov.w	r0, #0
 8003d08:	f380 8811 	msr	BASEPRI, r0
 8003d0c:	bc09      	pop	{r0, r3}
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	6808      	ldr	r0, [r1, #0]
 8003d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d16:	f01e 0f10 	tst.w	lr, #16
 8003d1a:	bf08      	it	eq
 8003d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d20:	f380 8809 	msr	PSP, r0
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	f3af 8000 	nop.w

08003d30 <pxCurrentTCBConst>:
 8003d30:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop

08003d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d50:	f7ff f904 	bl	8002f5c <xTaskIncrementTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <SysTick_Handler+0x3c>)
 8003d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	2300      	movs	r3, #0
 8003d64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <vPortSetupTimerInterrupt+0x34>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <vPortSetupTimerInterrupt+0x38>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <vPortSetupTimerInterrupt+0x3c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <vPortSetupTimerInterrupt+0x40>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <vPortSetupTimerInterrupt+0x44>)
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d9a:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vPortSetupTimerInterrupt+0x34>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	601a      	str	r2, [r3, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e010 	.word	0xe000e010
 8003db0:	e000e018 	.word	0xe000e018
 8003db4:	20000008 	.word	0x20000008
 8003db8:	10624dd3 	.word	0x10624dd3
 8003dbc:	e000e014 	.word	0xe000e014

08003dc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003dc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003dd0 <vPortEnableVFP+0x10>
 8003dc4:	6801      	ldr	r1, [r0, #0]
 8003dc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dca:	6001      	str	r1, [r0, #0]
 8003dcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003dce:	bf00      	nop
 8003dd0:	e000ed88 	.word	0xe000ed88

08003dd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003de0:	f7ff f812 	bl	8002e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003de4:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <pvPortMalloc+0x170>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003dec:	f000 f90c 	bl	8004008 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003df0:	4b55      	ldr	r3, [pc, #340]	; (8003f48 <pvPortMalloc+0x174>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f040 808c 	bne.w	8003f16 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01c      	beq.n	8003e3e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003e04:	2208      	movs	r2, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d013      	beq.n	8003e3e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f023 0307 	bic.w	r3, r3, #7
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <pvPortMalloc+0x6a>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e7fe      	b.n	8003e3c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d068      	beq.n	8003f16 <pvPortMalloc+0x142>
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <pvPortMalloc+0x178>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d863      	bhi.n	8003f16 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e4e:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <pvPortMalloc+0x17c>)
 8003e50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e52:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <pvPortMalloc+0x17c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e58:	e004      	b.n	8003e64 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d903      	bls.n	8003e76 <pvPortMalloc+0xa2>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f1      	bne.n	8003e5a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <pvPortMalloc+0x170>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d04a      	beq.n	8003f16 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2208      	movs	r2, #8
 8003e86:	4413      	add	r3, r2
 8003e88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d91e      	bls.n	8003ee0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <pvPortMalloc+0xf4>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e7fe      	b.n	8003ec6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eda:	69b8      	ldr	r0, [r7, #24]
 8003edc:	f000 f8f6 	bl	80040cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ee0:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <pvPortMalloc+0x178>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <pvPortMalloc+0x178>)
 8003eec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <pvPortMalloc+0x178>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <pvPortMalloc+0x180>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d203      	bcs.n	8003f02 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <pvPortMalloc+0x178>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <pvPortMalloc+0x180>)
 8003f00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <pvPortMalloc+0x174>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f16:	f7fe ff85 	bl	8002e24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <pvPortMalloc+0x164>
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e7fe      	b.n	8003f36 <pvPortMalloc+0x162>
	return pvReturn;
 8003f38:	69fb      	ldr	r3, [r7, #28]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3728      	adds	r7, #40	; 0x28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20003fc4 	.word	0x20003fc4
 8003f48:	20003fd0 	.word	0x20003fd0
 8003f4c:	20003fc8 	.word	0x20003fc8
 8003f50:	20003fbc 	.word	0x20003fbc
 8003f54:	20003fcc 	.word	0x20003fcc

08003f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d046      	beq.n	8003ff8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4413      	add	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4b20      	ldr	r3, [pc, #128]	; (8004000 <vPortFree+0xa8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <vPortFree+0x42>
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e7fe      	b.n	8003f98 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <vPortFree+0x5e>
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	e7fe      	b.n	8003fb4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <vPortFree+0xa8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d115      	bne.n	8003ff8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <vPortFree+0xa8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fdc:	f7fe ff14 	bl	8002e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4b07      	ldr	r3, [pc, #28]	; (8004004 <vPortFree+0xac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	4a06      	ldr	r2, [pc, #24]	; (8004004 <vPortFree+0xac>)
 8003fec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fee:	6938      	ldr	r0, [r7, #16]
 8003ff0:	f000 f86c 	bl	80040cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ff4:	f7fe ff16 	bl	8002e24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20003fd0 	.word	0x20003fd0
 8004004:	20003fc8 	.word	0x20003fc8

08004008 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800400e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004012:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <prvHeapInit+0xac>)
 8004016:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3307      	adds	r3, #7
 8004026:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <prvHeapInit+0xac>)
 8004038:	4413      	add	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <prvHeapInit+0xb0>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <prvHeapInit+0xb0>)
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4413      	add	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004054:	2208      	movs	r2, #8
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <prvHeapInit+0xb4>)
 8004068:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <prvHeapInit+0xb4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <prvHeapInit+0xb4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <prvHeapInit+0xb4>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <prvHeapInit+0xb8>)
 8004096:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <prvHeapInit+0xbc>)
 800409e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <prvHeapInit+0xc0>)
 80040a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	200003bc 	.word	0x200003bc
 80040b8:	20003fbc 	.word	0x20003fbc
 80040bc:	20003fc4 	.word	0x20003fc4
 80040c0:	20003fcc 	.word	0x20003fcc
 80040c4:	20003fc8 	.word	0x20003fc8
 80040c8:	20003fd0 	.word	0x20003fd0

080040cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040d4:	4b28      	ldr	r3, [pc, #160]	; (8004178 <prvInsertBlockIntoFreeList+0xac>)
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e002      	b.n	80040e0 <prvInsertBlockIntoFreeList+0x14>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d8f7      	bhi.n	80040da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4413      	add	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d108      	bne.n	800410e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	441a      	add	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	441a      	add	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d118      	bne.n	8004154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <prvInsertBlockIntoFreeList+0xb0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d00d      	beq.n	800414a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	441a      	add	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e008      	b.n	800415c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <prvInsertBlockIntoFreeList+0xb0>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e003      	b.n	800415c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d002      	beq.n	800416a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20003fbc 	.word	0x20003fbc
 800417c:	20003fc4 	.word	0x20003fc4

08004180 <__libc_init_array>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	4e0d      	ldr	r6, [pc, #52]	; (80041b8 <__libc_init_array+0x38>)
 8004184:	4c0d      	ldr	r4, [pc, #52]	; (80041bc <__libc_init_array+0x3c>)
 8004186:	1ba4      	subs	r4, r4, r6
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	2500      	movs	r5, #0
 800418c:	42a5      	cmp	r5, r4
 800418e:	d109      	bne.n	80041a4 <__libc_init_array+0x24>
 8004190:	4e0b      	ldr	r6, [pc, #44]	; (80041c0 <__libc_init_array+0x40>)
 8004192:	4c0c      	ldr	r4, [pc, #48]	; (80041c4 <__libc_init_array+0x44>)
 8004194:	f000 f82c 	bl	80041f0 <_init>
 8004198:	1ba4      	subs	r4, r4, r6
 800419a:	10a4      	asrs	r4, r4, #2
 800419c:	2500      	movs	r5, #0
 800419e:	42a5      	cmp	r5, r4
 80041a0:	d105      	bne.n	80041ae <__libc_init_array+0x2e>
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041a8:	4798      	blx	r3
 80041aa:	3501      	adds	r5, #1
 80041ac:	e7ee      	b.n	800418c <__libc_init_array+0xc>
 80041ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041b2:	4798      	blx	r3
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7f2      	b.n	800419e <__libc_init_array+0x1e>
 80041b8:	080042a4 	.word	0x080042a4
 80041bc:	080042a4 	.word	0x080042a4
 80041c0:	080042a4 	.word	0x080042a4
 80041c4:	080042a8 	.word	0x080042a8

080041c8 <memcpy>:
 80041c8:	b510      	push	{r4, lr}
 80041ca:	1e43      	subs	r3, r0, #1
 80041cc:	440a      	add	r2, r1
 80041ce:	4291      	cmp	r1, r2
 80041d0:	d100      	bne.n	80041d4 <memcpy+0xc>
 80041d2:	bd10      	pop	{r4, pc}
 80041d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041dc:	e7f7      	b.n	80041ce <memcpy+0x6>

080041de <memset>:
 80041de:	4402      	add	r2, r0
 80041e0:	4603      	mov	r3, r0
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d100      	bne.n	80041e8 <memset+0xa>
 80041e6:	4770      	bx	lr
 80041e8:	f803 1b01 	strb.w	r1, [r3], #1
 80041ec:	e7f9      	b.n	80041e2 <memset+0x4>
	...

080041f0 <_init>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr

080041fc <_fini>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr
